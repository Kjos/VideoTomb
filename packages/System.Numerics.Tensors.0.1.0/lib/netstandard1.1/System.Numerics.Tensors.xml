<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Numerics.Tensors</name>
    </assembly>
    <members>
        <member name="M:System.Numerics.Tensors.ArrayTensorExtensions.ToTensor``1(``0[])">
            <summary>
            Creates a copy of this single-dimensional array as a DenseTensor&lt;T&gt;
            </summary>
            <typeparam name="T">Type contained in the array to copy to the DenseTensor&lt;T&gt;.</typeparam>
            <param name="array">The array to create a DenseTensor&lt;T&gt; from.</param>
            <returns>A 1-dimensional DenseTensor&lt;T&gt; with the same length and content as <paramref name="array"/>.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayTensorExtensions.ToTensor``1(``0[0:,0:],System.Boolean)">
            <summary>
            Creates a copy of this two-dimensional array as a DenseTensorr&lt;T&gt;
            </summary>
            <typeparam name="T">Type contained in the array to copy to the DenseTensor&lt;T&gt;.</typeparam>
            <param name="array">The array to create a DenseTensor&lt;T&gt; from.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): row-major.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): column-major.</param>
            <returns>A 2-dimensional DenseTensor&lt;T&gt; with the same dimensions and content as <paramref name="array"/>.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayTensorExtensions.ToTensor``1(``0[0:,0:,0:],System.Boolean)">
            <summary>
            Creates a copy of this three-dimensional array as a DenseTensorr&lt;T&gt;
            </summary>
            <typeparam name="T">Type contained in the array to copy to the DenseTensor&lt;T&gt;.</typeparam>
            <param name="array">The array to create a DenseTensor&lt;T&gt; from.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): akin to column-major in a rank-2 tensor.</param>
            <returns>A 3-dimensional DenseTensor&lt;T&gt; with the same dimensions and content as <paramref name="array"/>.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayTensorExtensions.ToTensor``1(System.Array,System.Boolean)">
            <summary>
            Creates a copy of this n-dimensional array as a DenseTensorr&lt;T&gt;
            </summary>
            <typeparam name="T">Type contained in the array to copy to the DenseTensor&lt;T&gt;.</typeparam>
            <param name="array">The array to create a DenseTensor&lt;T&gt; from.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): akin to column-major in a rank-2 tensor.</param>
            <returns>A n-dimensional DenseTensor&lt;T&gt; with the same dimensions and content as <paramref name="array"/>.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayTensorExtensions.ToSparseTensor``1(``0[])">
            <summary>
            Creates a copy of this single-dimensional array as a SparseTensorr&lt;T&gt;
            </summary>
            <typeparam name="T">Type contained in the array to copy to the SparseTensorr&lt;T&gt;.</typeparam>
            <param name="array">The array to create a SparseTensorr&lt;T&gt; from.</param>
            <returns>A 1-dimensional SparseTensorr&lt;T&gt; with the same length and content as <paramref name="array"/>.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayTensorExtensions.ToSparseTensor``1(``0[0:,0:],System.Boolean)">
            <summary>
            Creates a copy of this two-dimensional array as a SparseTensor&lt;T&gt;
            </summary>
            <typeparam name="T">Type contained in the array to copy to the SparseTensor&lt;T&gt;.</typeparam>
            <param name="array">The array to create a SparseTensor&lt;T&gt; from.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): row-major.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): column-major.</param>
            <returns>A 2-dimensional SparseTensor&lt;T&gt; with the same dimensions and content as <paramref name="array"/>.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayTensorExtensions.ToSparseTensor``1(``0[0:,0:,0:],System.Boolean)">
            <summary>
            Creates a copy of this three-dimensional array as a SparseTensor&lt;T&gt;
            </summary>
            <typeparam name="T">Type contained in the array to copy to the SparseTensor&lt;T&gt;.</typeparam>
            <param name="array">The array to create a SparseTensor&lt;T&gt; from.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): akin to column-major in a rank-2 tensor.</param>
            <returns>A 3-dimensional SparseTensor&lt;T&gt; with the same dimensions and content as <paramref name="array"/>.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayTensorExtensions.ToSparseTensor``1(System.Array,System.Boolean)">
            <summary>
            Creates a copy of this n-dimensional array as a SparseTensor&lt;T&gt;
            </summary>
            <typeparam name="T">Type contained in the array to copy to the SparseTensor&lt;T&gt;.</typeparam>
            <param name="array">The array to create a SparseTensor&lt;T&gt; from.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): akin to column-major in a rank-2 tensor.</param>
            <returns>A n-dimensional SparseTensor&lt;T&gt; with the same dimensions and content as <paramref name="array"/>.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayTensorExtensions.ToCompressedSparseTensor``1(``0[])">
            <summary>
            Creates a copy of this single-dimensional array as a CompressedSparseTensor&lt;T&gt;
            </summary>
            <typeparam name="T">Type contained in the array to copy to the CompressedSparseTensor&lt;T&gt;.</typeparam>
            <param name="array">The array to create a CompressedSparseTensor&lt;T&gt; from.</param>
            <returns>A 1-dimensional CompressedSparseTensor&lt;T&gt; with the same length and content as <paramref name="array"/>.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayTensorExtensions.ToCompressedSparseTensor``1(``0[0:,0:],System.Boolean)">
            <summary>
            Creates a copy of this two-dimensional array as a CompressedSparseTensor&lt;T&gt;
            </summary>
            <typeparam name="T">Type contained in the array to copy to the CompressedSparseTensor&lt;T&gt;.</typeparam>
            <param name="array">The array to create a CompressedSparseTensor&lt;T&gt; from.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): row-major.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): column-major.</param>
            <returns>A 2-dimensional CompressedSparseTensor&lt;T&gt; with the same dimensions and content as <paramref name="array"/>.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayTensorExtensions.ToCompressedSparseTensor``1(``0[0:,0:,0:],System.Boolean)">
            <summary>
            Creates a copy of this three-dimensional array as a CompressedSparseTensor&lt;T&gt;
            </summary>
            <typeparam name="T">Type contained in the array to copy to the CompressedSparseTensor&lt;T&gt;.</typeparam>
            <param name="array">The array to create a CompressedSparseTensor&lt;T&gt; from.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): akin to column-major in a rank-2 tensor.</param>
            <returns>A 3-dimensional CompressedSparseTensor&lt;T&gt; with the same dimensions and content as <paramref name="array"/>.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayTensorExtensions.ToCompressedSparseTensor``1(System.Array,System.Boolean)">
            <summary>
            Creates a copy of this n-dimensional array as a CompressedSparseTensor&lt;T&gt;
            </summary>
            <typeparam name="T">Type contained in the array to copy to the CompressedSparseTensor&lt;T&gt;.</typeparam>
            <param name="array">The array to create a CompressedSparseTensor&lt;T&gt; from.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): akin to column-major in a rank-2 tensor.</param>
            <returns>A n-dimensional CompressedSparseTensor&lt;T&gt; with the same dimensions and content as <paramref name="array"/>.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayUtilities.GetStrides(System.ReadOnlySpan{System.Int32},System.Boolean)">
            <summary>
            Gets the set of strides that can be used to calculate the offset of n-dimensions in a 1-dimensional layout
            </summary>
            <param name="dimensions"></param>
            <param name="reverseStride"></param>
            <returns></returns>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayUtilities.GetIndex(System.Int32[],System.ReadOnlySpan{System.Int32},System.Int32)">
            <summary>
            Calculates the 1-d index for n-d indices in layout specified by strides.
            </summary>
            <param name="strides"></param>
            <param name="indices"></param>
            <param name="startFromDimension"></param>
            <returns></returns>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayUtilities.GetIndices(System.ReadOnlySpan{System.Int32},System.Boolean,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Calculates the n-d indices from the 1-d index in a layout specificed by strides
            </summary>
            <param name="strides"></param>
            <param name="reverseStride"></param>
            <param name="index"></param>
            <param name="indices"></param>
            <param name="startFromDimension"></param>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayUtilities.GetIndices(System.ReadOnlySpan{System.Int32},System.Boolean,System.Int32,System.Span{System.Int32},System.Int32)">
            <summary>
            Calculates the n-d indices from the 1-d index in a layout specificed by strides
            </summary>
            <param name="strides"></param>
            <param name="reverseStride"></param>
            <param name="index"></param>
            <param name="indices"></param>
            <param name="startFromDimension"></param>
        </member>
        <member name="M:System.Numerics.Tensors.ArrayUtilities.TransformIndexByStrides(System.Int32,System.Int32[],System.Boolean,System.Int32[])">
            <summary>
            Takes an 1-d index over n-d sourceStrides and recalculates it assuming same n-d coordinates over a different n-d strides
            </summary>
        </member>
        <member name="T:System.Numerics.Tensors.CompressedSparseTensor`1">
            <summary>
            Represents a tensor using compressed sparse format
            For a two dimensional tensor this is referred to as compressed sparse row (CSR, CRS, Yale), compressed sparse column (CSC, CCS)
            
            In this format, data that is in the same value for the compressed dimension has locality
            
            In standard layout of a dense tensor, data with the same value for first dimensions has locality.
            As such we'll use reverseStride = false (default) to mean that the first dimension is compressed (CSR)
            and reverseStride = true to mean that the last dimension is compressed (CSC)
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Numerics.Tensors.CompressedSparseTensor`1.#ctor(System.ReadOnlySpan{System.Int32},System.Boolean)">
            <summary>
            Constructs a new CompressedSparseTensor of the specifed dimensions and stride ordering.
            </summary>
            <param name="dimensions">An span of integers that represent the size of each dimension of the CompressedSparseTensor to create.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): akin to column-major in a rank-2 tensor.</param>
        </member>
        <member name="M:System.Numerics.Tensors.CompressedSparseTensor`1.#ctor(System.ReadOnlySpan{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Constructs a new CompressedSparseTensor of the specifed dimensions, initial capacity, and stride ordering.
            </summary>
            <param name="dimensions">An span of integers that represent the size of each dimension of the CompressedSparseTensor to create.</param>
            <param name="capacity">The number of non-zero values this tensor can store without resizing.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): akin to column-major in a rank-2 tensor.</param>
        </member>
        <member name="M:System.Numerics.Tensors.CompressedSparseTensor`1.#ctor(System.Memory{`0},System.Memory{System.Int32},System.Memory{System.Int32},System.Int32,System.ReadOnlySpan{System.Int32},System.Boolean)">
            <summary>
            Constructs a new CompressedSparseTensor of the specifed dimensions, wrapping existing backing memory for the contents.
            Growing this CompressedSparseTensor will re-allocate the backing memory.
            </summary>
            <param name="values">Memory storing non-zero values to construct this tensor with.</param>
            <param name="compressedCounts">Memory storing the counts of non-zero elements at each index of the compressed dimension.</param>
            <param name="indices">Memory storing the linearized index (excluding the compressed dimension) of non-zero elements.</param>
            <param name="nonZeroCount">The number of valid entries (eg: non-zero values) in <paramref name="values"/> and <paramref name="indices"/>.</param>
            <param name="dimensions">An span of integers that represent the size of each dimension of the CompressedSparseTensor to create.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): akin to column-major in a rank-2 tensor.</param>
        </member>
        <member name="P:System.Numerics.Tensors.CompressedSparseTensor`1.Item(System.ReadOnlySpan{System.Int32})">
            <summary>
            Obtains the value at the specified indices
            </summary>
            <param name="indices">A span of integers that represent the indices specifying the position of the element to get.</param>
            <returns>The value at the specified position in this Tensor.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.CompressedSparseTensor`1.GetValue(System.Int32)">
            <summary>
            Gets the value at the specied index, where index is lineraized as a dot product between indices and strides.
            </summary>
            <param name="index">An integer index computed as a dot-product of indices.</param>
            <returns>The value at the specified position in this Tensor.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.CompressedSparseTensor`1.SetValue(System.Int32,`0)">
            <summary>
            Sets the value at the specied index, where index is a linearized version of n-dimension indices using strides.
            </summary>
            <param name="index">An integer index computed as a dot-product of indices.</param>
            <param name="value">The new value to set at the specified position in this Tensor.</param>
        </member>
        <member name="P:System.Numerics.Tensors.CompressedSparseTensor`1.Capacity">
            <summary>
            Gets the number of non-zero values this tensor can store without resizing.
            </summary>
        </member>
        <member name="P:System.Numerics.Tensors.CompressedSparseTensor`1.NonZeroCount">
            <summary>
            Get's the number on non-zero values currently being stored in this tensor.
            </summary>
        </member>
        <member name="P:System.Numerics.Tensors.CompressedSparseTensor`1.Values">
            <summary>
            Memory storing non-zero values.
            </summary>
        </member>
        <member name="P:System.Numerics.Tensors.CompressedSparseTensor`1.CompressedCounts">
            <summary>
            Memory storing the counts of non-zero elements at each index of the compressed dimension.
            </summary>
        </member>
        <member name="P:System.Numerics.Tensors.CompressedSparseTensor`1.Indices">
            <summary>
            Memory storing the linearized index (excluding the compressed dimension) of non-zero elements.
            </summary>
        </member>
        <member name="M:System.Numerics.Tensors.CompressedSparseTensor`1.TryFindIndex(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Trys to find the place to store a value
            </summary>
            <param name="compressedIndex"></param>
            <param name="nonCompressedIndex"></param>
            <param name="valueIndex"></param>
            <returns>True if element is found at specific index, false if no specific index is found and insertion point is returned</returns>
        </member>
        <member name="M:System.Numerics.Tensors.CompressedSparseTensor`1.Clone">
            <summary>
            Creates a shallow copy of this tensor, with new backing storage.
            </summary>
            <returns>A shallow copy of this tensor.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.CompressedSparseTensor`1.CloneEmpty``1(System.ReadOnlySpan{System.Int32})">
            <summary>
            Creates a new Tensor of a different type with the specified dimensions and the same layout as this tensor with elements initialized to their default value.
            </summary>
            <typeparam name="TResult">Type contained in the returned Tensor.</typeparam>
            <param name="dimensions">An span of integers that represent the size of each dimension of the CompressedSparseTensor to create.</param>
            <returns>A new tensor with the same layout as this tensor but different type and dimensions.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.CompressedSparseTensor`1.Reshape(System.ReadOnlySpan{System.Int32})">
            <summary>
            Reshapes the current tensor to new dimensions. Unlike other Tensor implementations, CompressedSparseTensor&lt;T&gt; must allocate new backing storage to represent a reshaped Tensor.
            </summary>
            <param name="dimensions">An span of integers that represent the size of each dimension of the CompressedSparseTensor to create.</param>
            <returns>A new tensor that reinterprets the content of this tensor to new dimensions (assuming the same linear index for each element).</returns>
        </member>
        <member name="M:System.Numerics.Tensors.CompressedSparseTensor`1.ToDenseTensor">
            <summary>
            Creates a copy of this tensor as a DenseTensor&lt;T&gt;.
            </summary>
            <returns>A copy of this tensor as a DenseTensor&lt;T&gt;</returns>
        </member>
        <member name="M:System.Numerics.Tensors.CompressedSparseTensor`1.ToCompressedSparseTensor">
            <summary>
            Creates a copy of this tensor as a new CompressedSparseTensor&lt;T&gt; eliminating any unused space in the backing storage.
            </summary>
            <returns>A copy of this tensor as a CompressedSparseTensor&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.CompressedSparseTensor`1.ToSparseTensor">
            <summary>
            Creates a copy of this tensor as a SparseTensor&lt;T&gt;. 
            </summary>
            <returns>A copy of this tensor as a SparseTensor&lt;T&gt;.</returns>
        </member>
        <member name="T:System.Numerics.Tensors.DenseTensor`1">
            <summary>
            Represents a multi-dimensional collection of objects of type T that can be accessed by indices.  DenseTensor stores values in a contiguous sequential block of memory where all values are represented.
            </summary>
            <typeparam name="T">type contained within the Tensor.  Typically a value type such as int, double, float, etc.</typeparam>
        </member>
        <member name="M:System.Numerics.Tensors.DenseTensor`1.#ctor(System.Int32)">
            <summary>
            Initializes a rank-1 Tensor using the specified <paramref name="length"/>.
            </summary>
            <param name="length">Size of the 1-dimensional tensor</param>
        </member>
        <member name="M:System.Numerics.Tensors.DenseTensor`1.#ctor(System.ReadOnlySpan{System.Int32},System.Boolean)">
            <summary>
            Initializes a rank-n Tensor using the dimensions specified in <paramref name="dimensions"/>.
            </summary>
            <param name="dimensions">An span of integers that represent the size of each dimension of the DenseTensor to create.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): akin to column-major in a rank-2 tensor.</param>
        </member>
        <member name="M:System.Numerics.Tensors.DenseTensor`1.#ctor(System.Memory{`0},System.ReadOnlySpan{System.Int32},System.Boolean)">
            <summary>
            Constructs a new DenseTensor of the specifed dimensions, wrapping existing backing memory for the contents.
            </summary>
            <param name="memory"></param>
            <param name="dimensions">An span of integers that represent the size of each dimension of the DenseTensor to create.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): akin to column-major in a rank-2 tensor.</param>
        </member>
        <member name="P:System.Numerics.Tensors.DenseTensor`1.Buffer">
            <summary>
            Memory storing backing values of this tensor.
            </summary>
        </member>
        <member name="M:System.Numerics.Tensors.DenseTensor`1.GetValue(System.Int32)">
            <summary>
            Gets the value at the specied index, where index is a linearized version of n-dimension indices using strides.
            </summary>
            <param name="index">An integer index computed as a dot-product of indices.</param>
            <returns>The value at the specified position in this Tensor.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.DenseTensor`1.SetValue(System.Int32,`0)">
            <summary>
            Sets the value at the specied index, where index is a linearized version of n-dimension indices using strides.
            </summary>
            <param name="index">An integer index computed as a dot-product of indices.</param>
            <param name="value">The new value to set at the specified position in this Tensor.</param>
        </member>
        <member name="M:System.Numerics.Tensors.DenseTensor`1.Clone">
            <summary>
            Creates a shallow copy of this tensor, with new backing storage.
            </summary>
            <returns>A shallow copy of this tensor.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.DenseTensor`1.CloneEmpty``1(System.ReadOnlySpan{System.Int32})">
            <summary>
            Creates a new Tensor of a different type with the specified dimensions and the same layout as this tensor with elements initialized to their default value.
            </summary>
            <typeparam name="TResult">Type contained in the returned Tensor.</typeparam>
            <param name="dimensions">An span of integers that represent the size of each dimension of the DenseTensor to create.</param>
            <returns>A new tensor with the same layout as this tensor but different type and dimensions.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.DenseTensor`1.Reshape(System.ReadOnlySpan{System.Int32})">
            <summary>
            Reshapes the current tensor to new dimensions, using the same backing storage.
            </summary>
            <param name="dimensions">An span of integers that represent the size of each dimension of the DenseTensor to create.</param>
            <returns>A new tensor that reinterprets backing Buffer of this tensor with different dimensions.</returns>
        </member>
        <member name="T:System.Numerics.Tensors.SparseTensor`1">
            <summary>
            Represents a multi-dimensional collection of objects of type T that can be accessed by indices.  Unlike other Tensor&lt;T&gt; implementations SparseTensor&lt;T&gt; does not expose its backing storage.  It is meant as an intermediate to be used to build other Tensors, such as CompressedSparseTensor.  Unlike CompressedSparseTensor where insertions are O(n), insertions to SparseTensor&lt;T&gt; are nominally O(1).
            </summary>
            <typeparam name="T">type contained within the Tensor.  Typically a value type such as int, double, float, etc.</typeparam>
        </member>
        <member name="M:System.Numerics.Tensors.SparseTensor`1.#ctor(System.ReadOnlySpan{System.Int32},System.Boolean,System.Int32)">
            <summary>
            Constructs a new SparseTensor of the specifed dimensions, initial capacity, and stride ordering.
            </summary>
            <param name="dimensions">An span of integers that represent the size of each dimension of the SparseTensor to create.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): akin to column-major in a rank-2 tensor.</param>
            <param name="capacity">The number of non-zero values this tensor can store without resizing.</param>
        </member>
        <member name="M:System.Numerics.Tensors.SparseTensor`1.GetValue(System.Int32)">
            <summary>
            Gets the value at the specied index, where index is a linearized version of n-dimension indices using strides.
            </summary>
            <param name="index">An integer index computed as a dot-product of indices.</param>
            <returns>The value at the specified position in this Tensor.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.SparseTensor`1.SetValue(System.Int32,`0)">
            <summary>
            Sets the value at the specied index, where index is a linearized version of n-dimension indices using strides.
            </summary>
            <param name="index">An integer index computed as a dot-product of indices.</param>
            <param name="value">The new value to set at the specified position in this Tensor.</param>
        </member>
        <member name="P:System.Numerics.Tensors.SparseTensor`1.NonZeroCount">
            <summary>
            Get's the number on non-zero values currently being stored in this tensor.
            </summary>
        </member>
        <member name="M:System.Numerics.Tensors.SparseTensor`1.Clone">
            <summary>
            Creates a shallow copy of this tensor, with new backing storage.
            </summary>
            <returns>A shallow copy of this tensor.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.SparseTensor`1.CloneEmpty``1(System.ReadOnlySpan{System.Int32})">
            <summary>
            Creates a new Tensor of a different type with the specified dimensions and the same layout as this tensor with elements initialized to their default value.
            </summary>
            <typeparam name="TResult">Type contained in the returned Tensor.</typeparam>
            <param name="dimensions">An span of integers that represent the size of each dimension of the SparseTensor to create.</param>
            <returns>A new tensor with the same layout as this tensor but different type and dimensions.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.SparseTensor`1.Reshape(System.ReadOnlySpan{System.Int32})">
            <summary>
            Reshapes the current tensor to new dimensions, using the same backing storage.
            </summary>
            <param name="dimensions">An span of integers that represent the size of each dimension of the SparseTensor to create.</param>
            <returns>A new tensor that reinterprets backing storage of this tensor with different dimensions.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.SparseTensor`1.ToDenseTensor">
            <summary>
            Creates a copy of this tensor as a DenseTensor&lt;T&gt;.  
            </summary>
            <returns>A copy of this tensor as a DenseTensor&lt;T&gt;</returns>
        </member>
        <member name="M:System.Numerics.Tensors.SparseTensor`1.ToSparseTensor">
            <summary>
            Creates a copy of this tensor as a new SparseTensor&lt;T&gt; eliminating any unused space in the backing storage.
            </summary>
            <returns>A copy of this tensor as a SparseTensor&lt;T&gt; eliminated any usused space in the backing storage.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.SparseTensor`1.ToCompressedSparseTensor">
            <summary>
            Creates a copy of this tensor as a CompressedSparseTensor&lt;T&gt;.
            </summary>
            <returns>A copy of this tensor as a CompressedSparseTensor&lt;T&gt;.</returns>
        </member>
        <member name="T:System.Numerics.Tensors.Tensor">
            <summary>
            Various methods for creating and manipulating Tensor&lt;T&gt;
            </summary>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor.CreateIdentity``1(System.Int32)">
            <summary>
            Creates an identity tensor of the specified size.  An identity tensor is a two dimensional tensor with 1s in the diagonal.
            </summary>
            <typeparam name="T">type contained within the Tensor.  Typically a value type such as int, double, float, etc.</typeparam>
            <param name="size">Width and height of the identity tensor to create.</param>
            <returns>a <paramref name="size"/> by <paramref name="size"/> with 1s along the diagonal and zeros elsewhere.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor.CreateIdentity``1(System.Int32,System.Boolean)">
            <summary>
            Creates an identity tensor of the specified size and layout (row vs column major).  An identity tensor is a two dimensional tensor with 1s in the diagonal.
            </summary>
            <typeparam name="T">type contained within the Tensor.  Typically a value type such as int, double, float, etc.</typeparam>
            <param name="size">Width and height of the identity tensor to create.</param>
            <param name="columMajor">>False to indicate that the first dimension is most minor (closest) and the last dimension is most major (farthest): row-major.  True to indicate that the last dimension is most minor (closest together) and the first dimension is most major (farthest apart): column-major.</param>
            <returns>a <paramref name="size"/> by <paramref name="size"/> with 1s along the diagonal and zeros elsewhere.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor.CreateIdentity``1(System.Int32,System.Boolean,``0)">
            <summary>
            Creates an identity tensor of the specified size and layout (row vs column major) using the specified one value.  An identity tensor is a two dimensional tensor with 1s in the diagonal.  This may be used in case T is a type that doesn't have a known 1 value.
            </summary>
            <typeparam name="T">type contained within the Tensor.  Typically a value type such as int, double, float, etc.</typeparam>
            <param name="size">Width and height of the identity tensor to create.</param>
            <param name="columMajor">>False to indicate that the first dimension is most minor (closest) and the last dimension is most major (farthest): row-major.  True to indicate that the last dimension is most minor (closest together) and the first dimension is most major (farthest apart): column-major.</param>
            <param name="oneValue">Value of <typeparamref name="T"/> that is used along the diagonal.</param>
            <returns>a <paramref name="size"/> by <paramref name="size"/> with 1s along the diagonal and zeros elsewhere.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor.CreateFromDiagonal``1(System.Numerics.Tensors.Tensor{``0})">
            <summary>
            Creates a n+1-rank tensor using the specified n-rank diagonal.  Values not on the diagonal will be filled with zeros.
            </summary>
            <typeparam name="T">type contained within the Tensor.  Typically a value type such as int, double, float, etc.</typeparam>
            <param name="diagonal">Tensor representing the diagonal to build the new tensor from.</param>
            <returns>A new tensor of the same layout and order as <paramref name="diagonal"/> of one higher rank, with the values of <paramref name="diagonal"/> along the diagonal and zeros elsewhere.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor.CreateFromDiagonal``1(System.Numerics.Tensors.Tensor{``0},System.Int32)">
            <summary>
            Creates a n+1-dimension tensor using the specified n-dimension diagonal at the specified offset from the center.  Values not on the diagonal will be filled with zeros.
            </summary>
            <typeparam name="T">type contained within the Tensor.  Typically a value type such as int, double, float, etc.</typeparam>
            <param name="diagonal">Tensor representing the diagonal to build the new tensor from.</param>
            <param name="offset">Offset of diagonal to set in returned tensor.  0 for the main diagonal, less than zero for diagonals below, greater than zero from diagonals above.</param>
            <returns>A new tensor of the same layout and order as <paramref name="diagonal"/> of one higher rank, with the values of <paramref name="diagonal"/> along the specified diagonal and zeros elsewhere.</returns>
        </member>
        <member name="T:System.Numerics.Tensors.Tensor`1">
            <summary>
            Represents a multi-dimensional collection of objects of type T that can be accessed by indices.
            </summary>
            <typeparam name="T">type contained within the Tensor.  Typically a value type such as int, double, float, etc.</typeparam>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.#ctor(System.Int32)">
            <summary>
            Initialize a 1-dimensional tensor of the specified length
            </summary>
            <param name="length">Size of the 1-dimensional tensor</param>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.#ctor(System.ReadOnlySpan{System.Int32},System.Boolean)">
            <summary>
            Initialize an n-dimensional tensor with the specified dimensions and layout.  ReverseStride=true gives a stride of 1-element witdth to the first dimension (0).  ReverseStride=false gives a stride of 1-element width to the last dimension (n-1).
            </summary>
            <param name="dimensions">An span of integers that represent the size of each dimension of the Tensor to create.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): akin to column-major in a rank-2 tensor.</param>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.#ctor(System.Array,System.Boolean)">
            <summary>
            Initializes tensor with same dimensions as array, content of array is ignored.  ReverseStride=true gives a stride of 1-element witdth to the first dimension (0).  ReverseStride=false gives a stride of 1-element width to the last dimension (n-1).
            </summary>
            <param name="fromArray">Array from which to derive dimensions.</param>
            <param name="reverseStride">False (default) to indicate that the first dimension is most major (farthest apart) and the last dimension is most minor (closest together): akin to row-major in a rank-2 tensor.  True to indicate that the last dimension is most major (farthest apart) and the first dimension is most minor (closest together): akin to column-major in a rank-2 tensor.</param>
        </member>
        <member name="P:System.Numerics.Tensors.Tensor`1.Length">
            <summary>
            Total length of the Tensor.
            </summary>
        </member>
        <member name="P:System.Numerics.Tensors.Tensor`1.Rank">
            <summary>
            Rank of the tensor: number of dimensions.
            </summary>
        </member>
        <member name="P:System.Numerics.Tensors.Tensor`1.IsReversedStride">
            <summary>
            True if strides are reversed (AKA Column-major)
            </summary>
        </member>
        <member name="P:System.Numerics.Tensors.Tensor`1.Dimensions">
            <summary>
            Returns a readonly view of the dimensions of this tensor.
            </summary>
        </member>
        <member name="P:System.Numerics.Tensors.Tensor`1.Strides">
            <summary>
            Returns a readonly view of the strides of this tensor.
            </summary>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.Fill(`0)">
            <summary>
            Sets all elements in Tensor to <paramref name="value"/>.
            </summary>
            <param name="value">Value to fill</param>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.Clone">
            <summary>
            Creates a shallow copy of this tensor, with new backing storage.
            </summary>
            <returns>A shallow copy of this tensor.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.CloneEmpty">
            <summary>
            Creates a new Tensor with the same layout and dimensions as this tensor with elements initialized to their default value.
            </summary>
            <returns>A new Tensor with the same layout and dimensions as this tensor with elements initialized to their default value.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.CloneEmpty(System.ReadOnlySpan{System.Int32})">
            <summary>
            Creates a new Tensor with the specified dimensions and the same layout as this tensor with elements initialized to their default value.
            </summary>
            <param name="dimensions">An span of integers that represent the size of each dimension of the DenseTensor to create.</param>
            <returns>A new Tensor with the same layout as this tensor and specified <paramref name="dimensions"/> with elements initialized to their default value.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.CloneEmpty``1">
            <summary>
            Creates a new Tensor of a different type with the same layout and size as this tensor with elements initialized to their default value.
            </summary>
            <typeparam name="TResult">Type contained within the new Tensor.  Typically a value type such as int, double, float, etc.</typeparam>
            <returns>A new Tensor with the same layout and dimensions as this tensor with elements of <typeparamref name="TResult"/> type initialized to their default value.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.CloneEmpty``1(System.ReadOnlySpan{System.Int32})">
            <summary>
            Creates a new Tensor of a different type with the specified dimensions and the same layout as this tensor with elements initialized to their default value.
            </summary>
            <typeparam name="TResult">Type contained within the new Tensor.  Typically a value type such as int, double, float, etc.</typeparam>
            <param name="dimensions">An span of integers that represent the size of each dimension of the DenseTensor to create.</param>
            <returns>A new Tensor with the same layout as this tensor of specified <paramref name="dimensions"/> with elements of <typeparamref name="TResult"/> type initialized to their default value.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.GetDiagonal">
            <summary>
            Gets the n-1 dimension diagonal from the n dimension tensor.
            </summary>
            <returns>An n-1 dimension tensor with the values from the main diagonal of this tensor.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.GetDiagonal(System.Int32)">
            <summary>
            Gets the n-1 dimension diagonal from the n dimension tensor at the specified offset from center.
            </summary>
            <param name="offset">Offset of diagonal to set in returned tensor.  0 for the main diagonal, less than zero for diagonals below, greater than zero from diagonals above.</param>
            <returns>An n-1 dimension tensor with the values from the specified diagonal of this tensor.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.GetTriangle">
            <summary>
            Gets a tensor representing the elements below and including the diagonal, with the rest of the elements zero-ed.
            </summary>
            <returns>A tensor with the values from this tensor at and below the main diagonal and zeros elsewhere.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.GetTriangle(System.Int32)">
            <summary>
            Gets a tensor representing the elements below and including the specified diagonal, with the rest of the elements zero-ed.
            </summary>
            <param name="offset">Offset of diagonal to set in returned tensor.  0 for the main diagonal, less than zero for diagonals below, greater than zero from diagonals above.</param>
            <returns>A tensor with the values from this tensor at and below the specified diagonal and zeros elsewhere.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.GetUpperTriangle">
            <summary>
            Gets a tensor representing the elements above and including the diagonal, with the rest of the elements zero-ed.
            </summary>
            <returns>A tensor with the values from this tensor at and above the main diagonal and zeros elsewhere.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.GetUpperTriangle(System.Int32)">
            <summary>
            Gets a tensor representing the elements above and including the specified diagonal, with the rest of the elements zero-ed.
            </summary>
            <param name="offset">Offset of diagonal to set in returned tensor.  0 for the main diagonal, less than zero for diagonals below, greater than zero from diagonals above.</param>
            <returns>A tensor with the values from this tensor at and above the specified diagonal and zeros elsewhere.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.Reshape(System.ReadOnlySpan{System.Int32})">
            <summary>
            Reshapes the current tensor to new dimensions, using the same backing storage if possible.
            </summary>
            <param name="dimensions">An span of integers that represent the size of each dimension of the Tensor to create.</param>
            <returns>A new tensor that reinterprets this tensor with different dimensions.</returns>
        </member>
        <member name="P:System.Numerics.Tensors.Tensor`1.Item(System.Int32[])">
            <summary>
            Obtains the value at the specified indices
            </summary>
            <param name="indices">A one-dimensional array of integers that represent the indices specifying the position of the element to get.</param>
            <returns>The value at the specified position in this Tensor.</returns>
        </member>
        <member name="P:System.Numerics.Tensors.Tensor`1.Item(System.ReadOnlySpan{System.Int32})">
            <summary>
            Obtains the value at the specified indices
            </summary>
            <param name="indices">A span integers that represent the indices specifying the position of the element to get.</param>
            <returns>The value at the specified position in this Tensor.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.GetValue(System.Int32)">
            <summary>
            Gets the value at the specied index, where index is a linearized version of n-dimension indices using strides.
            </summary>
            <param name="index">An integer index computed as a dot-product of indices.</param>
            <returns>The value at the specified position in this Tensor.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.SetValue(System.Int32,`0)">
            <summary>
            Sets the value at the specied index, where index is a linearized version of n-dimension indices using strides.
            </summary>
            <param name="index">An integer index computed as a dot-product of indices.</param>
            <param name="value">The new value to set at the specified position in this Tensor.</param>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.Compare(System.Numerics.Tensors.Tensor{`0},System.Numerics.Tensors.Tensor{`0})">
            <summary>
            Performs a value comparison of the content and shape of two tensors.  Two tensors are equal if they have the same shape and same value at every set of indices.  If not equal a tensor is greater or less than another tensor based on the first non-equal element when enumerating in linear order.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.Equals(System.Numerics.Tensors.Tensor{`0},System.Numerics.Tensors.Tensor{`0})">
            <summary>
            Performs a value equality comparison of the content of two tensors. Two tensors are equal if they have the same shape and same value at every set of indices.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.Contains(`0)">
            <summary>
            Determines whether an element is in the Tensor&lt;T&gt;.
            </summary>
            <param name="item">
            The object to locate in the Tensor&lt;T&gt;. The value can be null for reference types.
            </param>
            <returns>
            true if item is found in the Tensor&lt;T&gt;; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the Tensor&lt;T&gt; to an Array, starting at a particular Array index.
            </summary>
            <param name="array">
            The one-dimensional Array that is the destination of the elements copied from Tensor&lt;T&gt;. The Array must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the Tensor&lt;T&gt;.
            </summary>
            <param name="item">The object to locate in the Tensor&lt;T&gt;.</param>
            <returns>The index of item if found in the tensor; otherwise, -1.</returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.ToDenseTensor">
            <summary>
            Creates a copy of this tensor as a DenseTensor&lt;T&gt;.  If this tensor is already a DenseTensor&lt;T&gt; calling this method is equivalent to calling Clone().
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.ToSparseTensor">
            <summary>
            Creates a copy of this tensor as a SparseTensor&lt;T&gt;.  If this tensor is already a SparseTensor&lt;T&gt; calling this method is equivalent to calling Clone().
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Numerics.Tensors.Tensor`1.ToCompressedSparseTensor">
            <summary>
            Creates a copy of this tensor as a CompressedSparseTensor&lt;T&gt;.  If this tensor is already a CompressedSparseTensor&lt;T&gt; calling this method is equivalent to calling Clone().
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
