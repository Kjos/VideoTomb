<?xml version="1.0"?>
<doc>
    <assembly>
        "MicrosoftAdvertising"
    </assembly>
    <members>
        <member name="M:Microsoft.Advertising.Net.MockStringResponder.GetLastRequestUrl">
            <summary>
returns the last url that was passed to GetResponse(...);
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockStringResponder.GetResponse(Microsoft.Advertising.Net.HttpRequestMethodType!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;Sys">
            <summary>
Get the response.
</summary>
            <param name="method">The http method</param>
            <param name="url">The url to match</param>
            <param name="headers">The headers to match</param>
            <returns>A shared pointer to a mock response if the url matches. Nullptr if it doesn't</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockStringResponder.#ctor(Microsoft.Advertising.Net.HttpRequestMethodType!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Constructor.
</summary>
            <param name="method">The http method</param>
            <param name="url">The url to match</param>
            <param name="payload">The payload to return</param>
            <param name="matchStartsWith">If true it will return a the payload if the supplied url matches the start
of the requesting url</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockStringResponder.#ctor(Microsoft.Advertising.Net.HttpRequestMethodType!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std">
            <summary>
Constructor.
</summary>
            <param name="method">The http method</param>
            <param name="url">The url to match</param>
            <param name="payload">The payload to return</param>
            <param name="callback">The callback to run when the response is requested</param>
            <param name="statusCode">The status code to return</param>
        </member>
        <member name="T:Microsoft.Advertising.Net.MockStringResponder">
            <summary>
Simple mock responder that returns a response to a given url with a given string payload.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.UserUtils.GetCurrentUserInfoBasic">
            <summary>
Gets the details about the current user without waiting for the email.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.UserUtils.GetCurrentUserInfo">
            <summary>
Gets the details about the current user.
</summary>
            <returns>A string representing the current user's details</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.UserUtils.GetCurrentUserInfo(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Gets the details about the current user.
</summary>
            <param name="context">The context for this ad request</param>
            <returns>A string representing the current user's details</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.UserUtils.ExtractEmailFromJson(System.String)">
            <summary> 
Attempts to extract the the 'email' from a return user profile 
JSON blob, see here below link for details
http://xboxlivetools/APIDocs/Files/userscurrentprofileGET.html
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Shared.WinRT.SdkInfo.runtimeType">
            <summary>
Current runtime type
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Shared.WinRT.SdkInfo.client">
            <summary>
SDK client
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Shared.WinRT.SdkInfo.sdkVersion">
            <summary />
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.SdkInfo">
            <summary>
structure containing information about the SDK and runtime
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VMAPResolver.CreateVmapNoadResponse">
Freewheel no-ad response (empty VAST or empty VMAP)
</member>
        <member name="M:Microsoft.Advertising.Shared.ArcRequestBuilder.BuildRequest">
            <summary>
builds the request url and adds the decorators for the request url params
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VASTResolver.ExtractWrapperEventsIntoAd(Microsoft.Advertising.Vast.Ad,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Wrapper!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Extract the tracking events from an parsed Wrapper DOM element.
</summary>
            <param name="ad">Ad object where the tracking events will be added.</param>
            <param name="wrapper">Parsed DOM object potentially containing tracking events for merging.</param>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VASTResolver.ResolveUrl(System.String,Concurrency.cancellation_token_source)">
            <summary>
Resolve a url into a VAST object
</summary>
            <param name="url">Url to resolve</param>
            <param name="cts">The cancellation token source for the returned task</param>
            <return>Populated VAST object</return>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VASTResolver.Resolve(std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.VAST!System.Runtime.CompilerServices.IsConst&gt;,Concurrency.cancellation_token_source)">
            <summary>
Resolve a string of xml into a VAST object
</summary>
            <param name="xml">String to resolve</param>
            <param name="cts">The cancellation token source for the returned task</param>
            <return>Populated VAST object</return>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VASTResolver.#ctor(System.Boolean,System.Boolean,System.UInt32,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Constructor
<param name="followRedirects">Follow wrappers and redirects</param><param name="allowMultipleAds">Allow multiple ads in an adBreak</param><param name="currentWrapperCount">The wrapper count of this resolver</param><param name="context">The context to use for this ad call</param></summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.VASTResolver">
            <summary>
VAST Resolver class
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.XmlUtils">
            <summary>
Class for Xml Utilities
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetLocale">
Locale targeting param shared by all Ad Placements.
</member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.EventLogging.AdRendererPageView(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.UInt32,System.UInt32,System.String,System.UInt32,System.String,System.String,System.String,System.String)">
            <summary>
Allows javascript to log a page view event.
</summary>
            <param name="UserId">XUID with context of the event</param>
            <param name="PageUri">Unique ID of the displayed page. I.e. Canonical URI indicating the AppID\PageID\SectionID\--the hierarchy of the page.</param>
            <param name="PageName">Canonical name of the displayed page.</param>
            <param name="RefererPageUri">Unique ID of the page displayed prior to current page. I.e. Canonical URI indicating the AppID\PageID\SectionID\ of the previous page--again, the hierarchy URI of page for the app</param>
            <param name="PageTypeId">Type ID of page shown (1=Dash, 2=Webblend, 3=WebPage, 4=Pop-up, 5=Charm, 6=GameMenu, 7=AppBar)</param>
            <param name="RefererPageTypeId">Type ID of page shown (1=Dash, 2=Webblend, 3=WebPage, 4=Pop-up, 5=Charm, 6=GameMenu, 7=AppBar)</param>
            <param name="PageTags">JSON list of page tags</param>
            <param name="PageParameters">List of parameters in URI format</param>
            <param name="ProductCatalogId">Catalog the ProductId is from</param>
            <param name="ProductId">Id of Product For product specific pages</param>
            <param name="TemplateId">Page layout id</param>
            <param name="ResolutionWidth">Screen resolution width</param>
            <param name="ResolutionHeight">Screen resolution height</param>
            <param name="ScreenState">Describes the state of the application on the screen such as "Full" or "Minimized". This can include values for Windows7 and Windows8 snapping as well such as "SnappedLeft" (Win7) or "Snapped1/3" (Win8). (Full Screen / Maximized, Windowed / Restored, Minimized / Hidden / Background, Snapped 1/3, Snapped 1/2, Snapped 2/3, Snapped Other) Other )</param>
            <param name="ColorDepth">Color Depth</param>
            <param name="SkinId">Different views of a page for different platforms like x8, iPhone</param>
            <param name="CampaignId">Campaign page is part of</param>
            <param name="GroupId">Group/Segment/Treatment ID for this page</param>
            <param name="Content">JSON list of assets/content on page and locations</param>
            <returns>0 on success</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.EventLogging.AdRendererPageAction(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
Allows javascript to log a page action event.
</summary>
            <param name="UserId">XUID with context of the event</param>
            <param name="ActionTypeId">Type of action. Which button pressed, swipe, etc.</param>
            <param name="ActionInputMethodId">Type of input method</param>
            <param name="PageUri">Unique ID of the page action was taken on. I.e. URL/URI indicating the page the action was taken on.</param>
            <param name="PageName">Canonical name of the displayed page</param>
            <param name="PageTypeId">Page layout id</param>
            <param name="TemplateId">Id of template used to layout the page</param>
            <param name="DestPageUri">Unique ID of the page action invokes. I.e. URL/URI indicating the destination page of the action</param>
            <param name="DestPageTypeId">Type ID of page shown</param>
            <param name="CampaignId">Campaign page is part of</param>
            <param name="GroupId">Group/Segment/Treament ID for this content</param>
            <param name="Content">JSON of asset/content on which action was taken</param>
            <returns>0 on success</returns>
        </member>
        <member name="M:Microsoft.Advertising.Documents.UacAdSource.GetElementVASTData">
            <summary>
Mitigate VAST 3.0 specification bug, VASTData and VASTAdData are used in different parts of the spec
to refer to the same element. Some vendors have chosen to follow different parts. We treat the two names
as equal.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.CustomExtensions.GetExtensions">
            <summary>
Custom extensions DOM connected.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VMAPResolver.Resolve(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServic">
            <summary>
Resolve a url into VMAP object(s)
</summary>
            <param name="url">request url</param>
            <param name="headers">request headers</param>
            <param name="cts">The cancellation token source for the returned task</param>
            <return>Populated VMAP object</return>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VMAPResolver.Parse(System.String,Concurrency.cancellation_token_source)">
            <summary>
Parses a string of xml into a VMAP manifest
</summary>
            <param name="XML">String to parse</param>
            <param name="cts">The cancellation token source for the returned task</param>
            <return>Populated VMAP manifest</return>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VMAPResolver.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Constructor
</summary>
            <param name="context">The context to use for this ad call</param>
        </member>
        <member name="T:Microsoft.Advertising.Vast.VMAPResolver">
            <summary>
VMAP Resolver class
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.StorageUtils.WinReadText(Windows.Foundation.Uri,System.UInt32)">
            <summary>
Read INI file for windows
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.StorageUtils.ReadTextFromLocalFolderAsync(Windows.Storage.IApplicationData,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Reads text from the specified file located in Local storage folder
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.StorageUtils.WriteTextToLocalFolderAsync(Windows.Storage.IApplicationData,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Writes the specified text into the specified file located in Local storage folder
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.StorageUtils.DoesFileExistInFolder(System.String,Windows.Storage.StorageFolder,Concurrency.cancellation_token_source)">
            <summary>
Returns true if the a file with name filename exists in the supplied folder.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.ArcRequest.Log(std.shared_ptr&lt;Microsoft.Advertising.AdCallTraceLogger&gt;)">
            <summary>
decorates tracelogger with the individual decorators parameters and their values
<param name="logger">the TraceLog logger to be decorated</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.ArcRequest.Execute(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
decorates the request url with the individual decorator parameters and their values
<param name="headers">the headers to be decorated</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.ArcRequest.AddDecorator(std.shared_ptr&lt;Microsoft.Advertising.Net.IWebClientDecorator&gt;)">
            <summary>
adds the decorators to the Arc Request Decorator collection
<param name="decorator">the decorators to be added to build the request</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AdPlacement.RequestAdAsync(Concurrency.cancellation_token_source)">
Returns the current valid ad and if needed, starts the web request for fetching the next ad.
</member>
        <member name="M:Microsoft.Advertising.Shared.AdPlacement.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDeref">
Private constructor - the public interface exposes a static create method.
</member>
        <member name="M:Microsoft.Advertising.Shared.StoreInfoDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
appends the store id to the request parameter
<param name="url">the request url to be decorated with store info</param><param name="headers">the header to be decorated if need be</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.PopupUpdateLayoutHandler(System.Double,System.Double)">
            <summary>
This handles popup view layout change event
When popup changes its size due to orientation or windows snapping,
the ad container needs to resize itself, position it in center and notify Mraid new size.
</summary>
            <param name="sender" />
            <param name="e" />
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.OrmmaRichMediaActionHandler(System.Object,Microsoft.Advertising.WinRT.UI.RichMediaEventArgs)">
            <summary>
This passes on any events raised in OrmmaImpl.
</summary>
            <param name="sender" />
            <param name="e" />
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.RaiseRichMediaActionEvent(Microsoft.Advertising.WinRT.UI.RichMediaActionType)">
            <summary>
raises the rich media action event
</summary>
            <param name="action">the rich media action that occurred</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.ClosedEventHandler(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
cleanup the popup and reset the size of the AdvertisingWebBrowser to the 
pre-expand size
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.Expand(Windows.Foundation.Uri,Microsoft.Advertising.WinRT.UI.ExpandProperties,System.Boolean)">
            <summary>
method passed as a delegate to WP7TaskInvoker to handle expand operation
</summary>
            <param name="uri">url to expand to if specified</param>
            <param name="expandProperties">properties for the expand (whether to show background, it's colour etc)</param>
            <param name="isLegacyAd">whether this ad called expand using MRAID.expand </param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.Expand(Windows.Foundation.Uri,Microsoft.Advertising.WinRT.UI.ExpandProperties)">
            <summary>
method passed as a delegate to WP7TaskInvoker to handle expand operation
</summary>
            <param name="uri">url to expand to if specified</param>
            <param name="expandProperties">properties for the expand (whether to show background, it's colour etc)</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.CleanUp">
            <summary>
performs necessary cleanup
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.NavigationStarting(Windows.UI.Xaml.Controls.WebView,Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs)">
            <summary>
Fired when the web view is navigating away form its current source. 
Will redirect the call to Ormma.open and cancel the navigation on the current web view.
</summary>
            <param name="sender" />
            <param name="e" />
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.HandleEventNotification(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Handle all Pointer events coming from JS layer
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.SetUseCustomClose(System.Boolean)">
            <summary>
This set expanded view or interstitial ad view showing default close button or not.
</summary>
            <param name="useCustomClose">If true, hide default close button. The ad will show its own close button.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.#ctor(Windows.Foundation.Uri)">
            <summary>
AdvertisingWebBrowser constructor used when expanding to a url 
</summary>
            <param name="uri">target address of expansion</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.#ctor(Microsoft.Advertising.Shared.WinRT.Advertisement,Windows.UI.Xaml.FrameworkElement)">
            <summary>
constuctor
</summary>
            <param name="rendererUrl">url to the ad renderer</param>
            <param name="adJsonBlob">ad data to pass to the renderer</param>
            <param name="prmJsonBlob">payload params to pass to the renderer</param>
            <param name="rendererOptions">publisher provided renderer options</param>
            <param name="adControl">the framework element of the parent ad control -- needed for viewability checks</param>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.ResourceCache.m_instance">
            <summary>
private instance of the ResourceCache
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.ResourceCache.m_cacheAddLock">
            <summary>
lock to control access for cache adds
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.ResourceCache">
            <summary>
loads resources from disk and caches them
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.DeviceInfoDecorator.ConvertHexToDotNetVersion(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
returns standard .NET version from ULONGLONG
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.DeviceInfoDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
appends the device form, family, and family version to the request parameter
<param name="url">the request url to be decorated with device info</param><param name="headers">the header to be decorated if need be</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.GetInterstitialAdTags">
            <summary>
This method is for testing/internal purposes only.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.SetAd(Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd)">
            <summary>
This method is for testing/internal purposes only.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.RequestAdByUrl(Microsoft.Advertising.WinRT.UI.AdType,System.String,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Requests an interstitial ad based on the supplied url. The AdReady event
will fire when the request completes successfully. The ErrorOccurred event will fire if
there was an issue getting the ad. This is for testing purposes
</summary>
            <param name="url">Location to request the ad from.</param>
            <param name="context">Context object to use for the request.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.RequestAd(Microsoft.Advertising.WinRT.UI.AdType,System.String,System.String,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Requests an interstitial ad based on the supplied applicationId/adUnitId. The AdReady event
will fire when the request completes successfully. The ErrorOccurred event will fire if
there was an issue getting the ad.
</summary>
            <param name="adType">The type of interstitial ad to request.</param>
            <param name="applicationId">applicationId to use for the interstitial ad request.</param>
            <param name="adUnitId">adUnitId to use for the interstitial ad request.</param>
            <param name="context">Context object to use for the request.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.RequestAdByUrl(Microsoft.Advertising.WinRT.UI.AdType,System.String)">
            <summary>
Requests an interstitial ad based on the supplied url. The AdReady event
will fire when the request completes successfully. The ErrorOccurred event will fire if
there was an issue getting the ad. This is for testing purposes
</summary>
            <param name="url">Location to request the ad from.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.OnErrorOccurred(System.Object,Microsoft.Advertising.WinRT.UI.AdErrorEventArgs)">
            <summary>
Event handler for child m_ad ErrorOccurred event. Calls Close() and passes through event to own ErrorOccurred event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.OnCancelled(System.Object,System.Object)">
            <summary>
Event handler for child m_ad Cancelled event. Calls Close() and passes through event to own Cancelled event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.OnCompleted(System.Object,System.Object)">
            <summary>
Event handler for child m_ad Completed event. Calls Close() and passes through event to own Completed event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.OnAdReady(System.Object,System.Object)">
            <summary>
Event handler for child m_ad AdReady event. Passes through event to own AdReady event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.RequestDisplayAd(System.String,System.String,System.String,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Begins a request for a display ad using supplied appplicationId/adUnitId pair OR url. Url must be null/empty
if appplicationId/adUnitId are present, appplicationId/adUnitId must be null/empty if url is present.
</summary>
            <param name="applicationId">Application id to use for request.</param>
            <param name="adUnitId">Ad unit id to use for request.</param>
            <param name="url">Url to use for request.</param>
            <param name="context">Context object to use for the request.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.RequestVideoAd(System.String,System.String,System.String,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Begins a request for a video ad using supplied appplicationId/adUnitId pair OR url. Url must be null/empty
if appplicationId/adUnitId are present, appplicationId/adUnitId must be null/empty if url is present.
</summary>
            <param name="applicationId">Application id to use for request.</param>
            <param name="adUnitId">Ad unit id to use for request.</param>
            <param name="url">Url to use for request.</param>
            <param name="context">Context object to use for the request.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.UnsubscribeFromEvents">
            <summary>
Unsubscribes from events (AdReady, Completed, Cancelled, Error) in the member AbstractInterstitialAd.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.SubscribeToEvents">
            <summary>
Subscribes to events (AdReady, Completed, Cancelled, Error) in the member AbstractInterstitialAd.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialAd.k_adRequestTimeoutInMilliSeconds">
            <summary>
Constant for Ad Request Timeout
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.InterstitialAd.ErrorOccurred">
            <summary>
      يتم هذا الحدث عندما يواجه <c>InterstitialAd</c> خطأ أثناء استرداد إعلانات.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.InterstitialAd.Cancelled">
            <summary>
      يتم هذا الحدث إذا قام المستخدم بإلغاء الإعلان قبل اعتباره كاملاً.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.InterstitialAd.Completed">
            <summary>
      يتم هذا الحدث عند إغلاق الإعلان وتعتبر تجربة الإعلان كاملة.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.InterstitialAd.AdReady">
            <summary>
      يتم هذا الحدث عندما يكون إعلانًا متداخلاً جاهزًا للعرض.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialAd.PostalCode">
            <summary>
      الرمز البريدي للمستخدم.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialAd.CountryOrRegion">
            <summary>
      البلد أو المنطقة حيث يتواجد المستخدم.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialAd.Keywords">
            <summary>
      كلمات أساسية ليتم استخدامها في الاستهداف.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialAd.RequestTimeout">
            <summary>
      عدد المللي ثانية التي سيتم انتظارها حتى يكتمل طلب إعلان قبل انتهاء المهلة. الافتراضي هو 30000 مللي ثانية أو 30 ثانية.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialAd.State">
            <summary>
      الحالة الحالية للإعلان المتداخل. راجع قائمة تعداد <c>InterstitialAdState</c>.
    </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.RemoveAdTag(System.String)">
            <summary>
      قم بإزالة علامة إعلان.
    </summary>
            <param name="tagName">اسم العلامة المطلوب إزالتها.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.AddAdTag(System.String,System.String)">
            <summary>
      قم بإضافة علامة إعلان للاستخدام في طلب الإعلان. الحد الأقصى هو 10 علامات. إذا تم تجاوز الحد الأقصى، فسيظهر حدث خطأ.
    </summary>
            <param name="tagName">اسم العلامة. الحد الأقصى 16 حرفًا، إذا تم تجاوزه فسيبدأ حدث errorOccurred.</param>
            <param name="tagValue">قيمة العلامة. الحد الأقصى 128 حرفًا، إذا تم تجاوزه فسيبدأ حدث errorOccurred.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.Close">
            <summary>
      يُغلق الإعلان المتداخل إذا كان معروضًا. بمجرد الإغلاق، قد لا يتم عرض نفس الإعلان مرة أخرى. قد يطلب التطبيق إعلانًا جديدًا بعد إغلاق الإعلان السابق.
    </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.Show">
            <summary>
      يعرض الإعلان المتداخل إن كان في حالة جاهزية.
    </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.RequestAd(Microsoft.Advertising.WinRT.UI.AdType,System.String,System.String)">
            <summary>
      يقوم بطلب إعلان متداخل من الخادم. سيبدأ حدث AdReady عند اكتمال الطلب بنجاح. سيبدأ حدث ErrorOccurred إذا كانت هناك مشكلة في الحصول على إعلان. لن يتم عرض الإعلان للمستخدم حتى يتم استدعاء <c>العرض</c>.
    </summary>
            <param name="adType">نوع الإعلان المتداخل لطلبه.</param>
            <param name="applicationId">معرف التطبيق الخاص بالتطبيق. يتم توفير هذه القيمة لك عند تسجيل التطبيق مع PubCenter.</param>
            <param name="adUnitId">adUnitId كما هو متوفر على pubCenter.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.#ctor">
            <summary>
      يقوم بتهيئة <c>InterstitialAd</c> جديد.
    </summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.InterstitialAd">
            <summary>
      يسمح InterstitialAd للمطورين بإضافة إعلانات متداخلة بملء الشاشة على تطبيقاتهم.
    </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser.CleanUp">
            <summary>
Cleanup any resources used.
</summary>
            <summary>
Cleanup any resources used.
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser.AdInitialized">
            <summary>
event that is fired when an ad is rendered
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser.Close">
            <summary>
Close the popup view.
</summary>
            <summary>
Close the popup view.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser.Show">
            <summary>
Show the popup view in full screen mode.
</summary>
            <summary>
Show the popup view in full screen mode.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser.LoadAd(Microsoft.Advertising.Shared.WinRT.Advertisement)">
            <summary>
Load Ad content and put it into a popup view.
</summary>
            <param name="ad">The ad to be loaded into popup view.</param>
            <summary>
Load Ad content and put it into a popup view.
</summary>
            <param name="ad">The ad to be loaded into popup view.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser.#ctor">
            <summary>
Constructor.
</summary>
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser">
            <summary>
Class for displaying an interstitial mraid ad content.
It mainly uses a webview control to display html/js content and provide its with Mraid support.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.MediaErrors.GetMediaError(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Returns the vast error code and error message for a particular media error scenario
<param name="errorMessage">The error message received in the Media Failed event from the media element</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.MediaErrors.GetHresultFromErrorMessage(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Parses the error message to determine the hresult and error status code
<param name="errorMessage">The error message received in the Media Failed event from the media element</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.GetValueFromCollectionHelper(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System">
            <summary>
Find and return the value in parameter collection by parameter name
</summary>
            <param name="parameters">The parameters collection</param>
            <param name="parameterName">The parameter name to find</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.ParseQueryString(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary><![CDATA[Parses out parameters from data supplied "param1=value1&param2=value2" into a dictionary [{param1:value1},{param2:value2}]]]></summary>
            <param name="queryString">string to be parsed</param>
            <returns>Dictionary containing parameter data.</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.TryGetGuid(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerS">
            <summary>
attempts to get a Guid from the dictionary
</summary>
            <param name="parameters">paramters to query</param>
            <param name="parameterName">the name of the parameter to query</param>
            <param name="value">value if parameter found</param>
            <returns>true if the parameter was found, false otherwise</returns>
            <summary>
attempts to get a Guid from the dictionary
</summary>
            <param name="parameters">paramters to query</param>
            <param name="parameterName">the name of the parameter to query</param>
            <param name="value">value if parameter found</param>
            <returns>true if the parameter was found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.TryGetBooleanParameter(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runti">
            <summary>
attemps to get a value from the dictionary as a bool, returns false on error
</summary>
            <param name="parameters">paramters to query</param>
            <param name="parameterName">the name of the parameter to query</param>
            <param name="value">value if parameter found</param>
            <returns>true if the parameter was found, false otherwise</returns>
            <summary>
attemps to get a value from the dictionary as a bool, returns false on error
</summary>
            <param name="parameters">paramters to query</param>
            <param name="parameterName">the name of the parameter to query</param>
            <param name="value">value if parameter found</param>
            <returns>true if the parameter was found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.TryGetIntegerParameter(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runti">
            <summary>
attemps to get a value from the dictionary as a integer
</summary>
            <param name="parameters">paramters to query</param>
            <param name="parameterName">the name of the parameter to query</param>
            <param name="value">value if parameter found</param>
            <returns>true if the parameter was found, false otherwise</returns>
            <summary>
attemps to get a value from the dictionary as a integer
</summary>
            <param name="parameters">paramters to query</param>
            <param name="parameterName">the name of the parameter to query</param>
            <param name="value">value if parameter found</param>
            <returns>true if the parameter was found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.TryGetUri(System.String,Windows.Foundation.Uri*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Verifies url is valid and of a scheme supported in the ad sdk.
</summary>
            <param name="uriString">String representing the uri</param>
            <param name="uri">Initialised uri if successful.</param>
            <returns>true if the uri was initialised, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.TryGetUriParameter(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.C">
            <summary>
verifies url is valid and of a supported scheme
</summary>
            <param name="parameters">paramters to query</param>
            <param name="parameterName">the name of the parameter to query</param>
            <param name="uri">value if parameter found</param>
            <returns>true if the parameter was found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.IsEmailValid(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
verifies if an email is valid
</summary>
            <param name="email">email address to validate</param>
            <returns>true if valid, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.ValidateAndRemoveEmailList(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
parses a list of email addresses in a string separated by a ',' or a ';', validates them
and removes them from the string if not valid or are duplicates. eg 
"test@example.com;test2.example.com,test3@example.com" would return
"test@example.com;test3@example.com;"
</summary>
            <param name="emailAddresses">email address list to parse</param>
            <returns>validated email addresses</returns>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_backButtonStrokeThickness">
            <summary>
Thickness of the lines drawn in the back button.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_backButtonCoordSmall">
            <summary>
Small coordinate used for drawing the arrow in the back button.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_backButtonCoordBig">
            <summary>
Big coordinate used for drawing the arrow in the back button.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_backButtonEllipseSize">
            <summary>
Size of the circle draw in the back button.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_backButtonSize">
            <summary>
Overall size of the back button.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_100NanosecondsInQuarterSecond">
            <summary>
Frequency at which the progress bar is updated.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_marginOffsetPx">
            <summary>
Margin offset used for the Advertisement (top), Click Through (bottom, right) and
countdown (bottom, left), close button (top, left).
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_clickThroughFontSize">
            <summary>
Font size used for the click-through.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_labelFontSize">
            <summary>
Font size used for the countdown and "Advertisement" labels.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_adPod">
            <summary>
The selected ad pod from the vast response for Interstitial ads. Contains all the information for the package
to be played.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaSrc">
            <summary>
Media source to be played, parsed from the vast response media element
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_skipOffsetParsed">
            <summary>
Parsed skipoffset into equivalent number of seconds
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_skipOffset">
            <summary>
skipoffset returned from the vast response linear element to allow user to skip the ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaEnded">
            <summary>
Tracks if the MediaEnded event has been raised on the m_mediaElement. This is used
to determin if a popup closed was caused by the content reaching it's natural end
or a user cancelling out of the ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_countdownTimer">
            <summary>
Timer used for updating the time remaining UI.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_backButtonFadeOutAnimation">
            <summary>
Storyboard for fading out the back button.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_backButtonFadeInAnimation">
            <summary>
Storyboard for fading in the back button, this is 
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_bufferingProgressBar">
            <summary>
Progress bar displayed while buffering.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_backButtonCanvas">
            <summary>
Transparent overlay canvas of size 50*50 that provides close functionality and holds back button.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_grid">
            <summary>
Grid element that is added to the PopupView, this hosts the MediaElement used to
play the video ad as well as the advertisement text, back button, progress bar
and optionally a click through link.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_countdownText">
            <summary>
Used to display the time remaining to the user if m_showCountdownTimer is set to true;
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaElement">
            <summary>
MediaElement used to play the video.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_popup">
            <summary>
PopupView that will host the MediaElement playing the video.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_state">
            <summary>
State of the interstitial ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_keyPressEventToken">
            <summary>
Token for unsubscribing from key pressed event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_visibilityChangedToken">
            <summary>
Token for unsubscribing from visibility changed event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_unloadedToken">
            <summary>
Token for unsubscribing from MediaElements unloaded event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaStateChangedToken">
            <summary>
Token for unsubscribing from StateChanged event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_markerReachedToken">
            <summary>
Token for unsubscribing from MarkerReached event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaEndedToken">
            <summary>
Token for unsubscribing from MediaEnded event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaOpenedToken">
            <summary>
Token for unsubscribing from MediaOpened event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaFailedToken">
            <summary>
Token for unsubscribing from MediaFailed event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_countdownTickToken">
            <summary>
Token for unsubscribing from Tick event for the countdown timer.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.RequestCompleted">
            <summary>
Returns whether the ad request is completed using the interstitial state machine. Fires erroroccurred event if false.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnVisibilityChanged(System.Object,Windows.UI.Core.VisibilityChangedEventArgs)">
            <summary>
Event handler for the visibility changed event. This handler is used for triggering pause/resume events.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnBackButtonTapped(System.Object,Windows.UI.Xaml.Input.TappedRoutedEventArgs)">
            <summary>
Event handler for the back button being tapped. This tells the popup to close.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnKeyPressed(Windows.UI.Core.CoreWindow,Windows.UI.Core.KeyEventArgs)">
            <summary>
Event handler for pressing a key when ad is shown. This is used to determine when we should show/hide the back button.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnAdTapped(System.Object,Windows.UI.Xaml.Input.TappedRoutedEventArgs)">
            <summary>
Event handler for tapping the Ad. This is used to determine when we should show/hide the back button.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnClickThroughClicked(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
Event handler for Click-Through Clicked event Closed event. This is used to fire the click through tracking
event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.ReportErrorTrackingEvent(Microsoft.Advertising.WinRT.UI.VastErrorCode)">
            <summary>
Reports Vast/Vmap error activity reporting url along with the vast error code
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnPopupClosed(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
Event handler for PopupView Closed event. If this is triggered before the content reaches natural content
duration end we fire the cancelled event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnUnloaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
Event handler for Unloaded event, performs cleanup of PreRollAd.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnMediaStateChanged(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
Event handler for the MediaStateChanged event. Unsubscribed from the first time "Playing" state is reached.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnMarkerReached(System.Object,Windows.UI.Xaml.Media.TimelineMarkerRoutedEventArgs)">
            <summary>
Event handler for MarkerReached event. Triggers firing of VAST/VMAP reporting urls if present.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnMediaEnded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
Event handler for MediaEnded event. Triggers firing of the Completed event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnMediaOpened(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
Event handler for MediaOpened event. Triggers updating the layout of the MediaElement and adding of time line markers.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnMediaFailed(System.Object,Windows.UI.Xaml.ExceptionRoutedEventArgs)">
            <summary>
Event handler for the MediaFailed event. Triggers closing of the popup and raising of the InterstitialAds
ErrorOccurred event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnCountdownTimerTick(System.Object,System.Object)">
            <summary>
Callback for the countdown timer, used to update the time remaining in the UI.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.UpdateRemainingTime">
            <summary>
Updates the countdown timer with the remaining time.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.DrawBackButton(Windows.UI.Xaml.Controls.Canvas)">
            <summary>
Helper method for drawing the back button, an arrow pointing left in a circle.
</summary>
            <param name="c">Canvas to draw the back button on.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.CreateTimelineMarker(System.Int64,System.String)">
            <summary>
Helper method for creating timeline markers.
</summary>
            <param name="time">Point to put the marker in 100-nanosecond units of total duration.</param>
            <param name="name">Human readable name for the marker to aid in firing events.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.ConvertToSeconds(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Converts a string in format hh:mm:ss.sss to the number of seconds
<param name="skipOffset">skipoffset in the format hh:mm:ss or hh:mm:ss.sss</param><param name="mediaDuration">the total length of the media, if an invalid skipoffset is encountered, we return the max value i.e. 
media duration to not allow the user to skip the ad</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.UnsubscribeFromAllEvents">
            <summary>
Unsubscribes from all events.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.UnsubscribeFromMediaStateChangedEvent">
            <summary>
Unscubscribes from media elements state changed event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.UnsubscribeFromCloseButtonVisibilityEvent">
            <summary>
Unsubscribes from the close button show hide events
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.UnsubscribeFromVisibilityChangedEvent">
            <summary>
Unsubscribes from the visibility changed event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.SubscribeToVisibilityChangedEvent">
            <summary>
Subscribes to the visibility changed event. This event is used to determine when the app hosting an
interstitial ad is sent to the background (behind windows start screen for desktop, or not currently
active app on Windows Phone).
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.UnsubscribeFromMediaElementEvents">
            <summary>
Unsubscribes handlers to the MediaElement events MediaFailed, MediaOpened, MediaEnded, MarkerReached.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.SubscribeToMediaElementEvents">
            <summary>
Adds handlers to the MediaElement events MediaFailed, MediaOpened, MediaEnded, MarkerReached.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AddMarkersToMediaElement">
            <summary>
Adds start, firstQuartlie, midPoint, thirdQuartile and complete markers to the MediaElement
to be used for VAST/VMAP reporting.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.Resume">
            <summary>
Performs resume tasks, this includes starting the media playing, firing the resume event and restarting
the countdown timer.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.ShowHideCloseButton">
            <summary>
Show hide close buttons	
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.Pause">
            <summary>
Performs pause tasks, this includes pausing the media, firing the pause event and pausing
the countdown timer.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.CleanupCountdownTimer">
            <summary>
Stops the countdown timer if it is running and unsubscribes from it's events.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.StartCountdownTimer">
            <summary>
Starts the countdown timer if m_showCountdownTimer is set to true.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.CreateOpacityStoryboard(System.Double,System.Double,Windows.UI.Xaml.UIElement)">
            <summary>
Helper method for creating back button opacity animations.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AddBufferingProgressBar">
            <summary>
Adds a progress bar to the popup which is displayed until the MediaElement moves into the Playing state.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AddBackButtonToGrid">
            <summary>
Adds the back button to the main grid, initialising handlers for tap and the fade in/out animations which
are triggered when the ad popup is tapped.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AddClickThroughTextToGrid(System.String)">
            <summary>
Adds the Click-Through element to the center top of the popup.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AddAdvertisementTextToGrid">
            <summary>
Adds the "Advertisement" indicator to center bottom of the popup.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AddCountdownTextblockToGrid">
            <summary>
Adds the count down time text block to m_grid if m_showCountdownTimer is set to true.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AddMediaElementToGrid">
            <summary>
Initialises and adds a MediaElement used for playing the video to m_grid.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.CreatePopup">
            <summary>
Creates the popup and adds a child element to it, m_grid, which contains
a media player, advertisement notification, back button, progress bar and optionally
a click through link
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.PositionAndSizeChildren(System.Double,System.Double)">
            <summary>
Method passed as a delegate to the PopupView used to notify the IntersitialVideoAd
that it has to update it's layout
</summary>
            <param name="width">Width of the hosting control.</param>
            <param name="height">Height of the hosting control.</param>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_clickThroughButton">
            <summary>
Reference to the clickthrough Button displayed in the interstitial AD
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AdType">
            <summary>
Returns the type of the derived instance derived from the AbstractInterstitialAd base class.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.State">
            <summary>
Returns the state of the interstitial ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.SelectMedia(Windows.Foundation.Collections.IVectorView`1{Microsoft.Advertising.Shared.WinRT.VideoResource^})">
            <summary>
Selects the media files based on bitrate and format 
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.CanPlayType(System.String)">
            <summary>
Checks if the media file MIME type is in the list of supported MIME types.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.IsNetworkMetered">
            <summary>
Returns whether the network connection is Metered or not
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.IsPreroll(System.String)">
            <summary>
Checks if the timeoffset in the ad package suggests that ad is preroll
<param name="timeoffset">the timeoffset in percentage, start, 00:00:00 or 00:00:00.000 format for the current ad break</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.GetPrerollAdPod(Microsoft.Advertising.Shared.WinRT.AdScheduleResult)">
            <summary>
Parses the vast response and returns the first PreRoll AdPod it encounters
<param name="vastResponse">the parsed vast response obtained from RequestAd</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.SelectAdAndCreatePopUp(Microsoft.Advertising.Shared.WinRT.AdScheduleResult)">
            <summary>
Selects the first PreRoll video ad from the parsed Vast/Vmap response
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.RequestAd">
            <summary>
Attempts to request an ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.Close">
            <summary>
Closes the interstitial ad if showing.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.Show">
            <summary>
Shows the interstitial ad if in the ready state.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.RequestAd(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
 Attempts to request an ad with ability to pass in a context object to help enable testing.
</summary>
            <param name="context">Context object to use for the request</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.#ctor(System.String,System.String,System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.AdTagCollection)">
            <summary>
Constructor.
</summary>
            <param name="applicationId">applicationId to use for the interstitial ad request.</param>
            <param name="adUnitId">adUnitId to use for the interstitial ad request.</param>
            <param name="url">Location to request the ad from.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd">
            <summary>
Represents an interstitial video ad and is responsible for requesting the video ad,
showing any UI elements and closing any UI element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VastErrorCode.VastUnableToPlayFile">
            <summary>
Problem displaying MediaFile
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VastErrorCode.VastNoSupportedMedia">
            <summary>
Couldnt find MediaFile supported by video player, based on attributed of the MediaFile element
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VastErrorCode.VastMediaTimeout">
            <summary>
Timeout of MediaFile URI
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VastErrorCode.VastFileNotFound">
            <summary>
Unable to find Linear/MediaFile from URI
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VastErrorCode.VastGeneralLinearError">
            <summary>
Video player is unable to display the Linear Ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_hardwareBackButtonPressedToken">
            <summary>
Token used for unsubscribing from the hardware back button (windows phone)
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_hardwareEscButtonPressedToken">
            <summary>
Token used for unsubscribing from the escape key for desktop windows.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_closeButtonTappedToken">
            <summary>
Token used for unsubscribing from the close button tapped event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_orientationChangedToken">
            <summary>
Token used for unsubscribing from the orientation changed event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_windowSizeChangedToken">
            <summary>
Token used for unsubscribing from the window size changed event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_adContainer">
            <summary>
Weak reference to the main canvas's child content
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_positionChildControlsDelegate">
            <summary>
Delegate to call on orientation/size change events to notify child controls
to update their layout.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_useFullScreen">
            <summary>
Set to true to use all available screen space, false to use the supplied
Height and Width properties.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_showCloseButton">
            <summary>
Toggles the display of a close button in the to right of the popup.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_closeCanvas">
            <summary>
Transparent overlay canvas of size 50*50 that provides close functionality and holds close button when CustomClose is false.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_overlayCanvas">
            <summary>
Transparent overlay canvas that holds the close button and popup content.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_popup">
            <summary>
Popup that holds the popup content.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.OrientationChangedHandler(Windows.Graphics.Display.DisplayInformation,System.Object)">
            <summary>
Event handler for orientation changes, this triggers a call to updated the layout.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.WindowSizeChangedHandler(System.Object,Windows.UI.Core.WindowSizeChangedEventArgs)">
            <summary>
Event handler for window size changes, this triggers a call to updated the layout.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.UnsubscribeFromHardwareCloseButton">
            <summary>
Unsubscribes from hardware specific close button. On Windows Phone this is the back button, on desktop this is the escape key.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.SubscribeToHardwareCloseButton">
            <summary>
Subscribes to hardware specific close button. On Windows Phone this is the back button, on desktop this is the escape key.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.UnsubscribeFromEvents">
            <summary>
Helper method to centralise unsubscribing from events.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.SubscribeToEvents">
            <summary>
Helper method to centralise subscribing to events.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.CloseButtonHandler(System.Object,Windows.UI.Xaml.Input.TappedRoutedEventArgs)">
            <summary>
Event handler for the close button being tapped.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.DrawCloseButton(Windows.UI.Xaml.Controls.Canvas)">
            <summary>
Adds a visual close button which can be displayed in the close canvas area.
</summary>
            <param name="c">The canvas to draw the close button on.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.CreateAndAddCloseCanvas(Windows.UI.Xaml.Controls.Panel)">
            <summary>
Creates the close button.
</summary>
            <param name="popup">The parent to ad the close button to.</param>
            <return>The newly created canvas.</return>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.CreateAndAddAdCanvas(Windows.UI.Xaml.Controls.Primitives.Popup)">
            <summary>
Creates the canvas that forms the background of the popup.
</summary>
            <param name="popup">The popup to ad the created canvas to.</param>
            <return>The newly created canvas.</return>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.CreatePopup">
            <summary>
Creates the popup control initialising layout properties.
</summary>
            <return>Initialised Popup control.</return>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PopupView.MainPopup">
            <summary>
This accessor is for testing/internal purposes only.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PopupView.CloseCanvas">
            <summary>
This accessor is for testing/internal purposes only.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PopupView.OverlayCanvas">
            <summary>
This accessor is for testing/internal purposes only.
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.PopupView.Closed">
            <summary>
Fired when the PopupView closes.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PopupView.Height">
            <summary>
The Height of the Popup control, ignored if UseFullScreen set to true.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PopupView.Width">
            <summary>
The width of the Popup control, ignored if UseFullScreen set to true.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PopupView.UseFullScreen">
            <summary>
Set to true to use all available screen space, false to use the supplied
Height and Width properties.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PopupView.UseCustomClose">
            <summary>
Toggles the display of a close button in the to right of the popup.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.UpdateLayout">
            <summary>
Updates the layout of the popup after screen change, orientation changes etc.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.GetAdContainer">
            <summary>
Gets the child added to the main overlay canvas.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.SetAdContainer(Windows.UI.Xaml.FrameworkElement)">
            <summary>
Adds the child content to the main overlay canvas.
</summary>
            <param name="adContainer">The content to be added to the canvas.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.Close">
            <summary>
Closes the popup.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.Show">
            <summary>
Shows the popup.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.#ctor(Microsoft.Advertising.WinRT.UI.UpdateLayoutDelegate,System.Boolean,System.Boolean)">
            <summary>
Constructor.
</summary>
            <param name="positionChildControlsDelegate">Deletgate for updating child control layouts.</param>
            <param name="useFullScreen">True for the popup to take up the full screen, false to use the 
 supplied height and width.</param>
            <param name="useFullScreen">True to show a close button in the top right corner
false to not show it.</param>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.PopupView">
            <summary>
Class for hosting ad content, this could be Interstitial Display, Intersitial Video or
expanded Display ad content.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.UpdateLayoutDelegate">
            <summary>
Delegate for use in layout update changes.
</summary>
            <param name="width">Width of the hosting control.</param>
            <param name="height">Height of the hosting control.</param>
        </member>
        <member name="F:Microsoft.Advertising.Net.CacheControlDecorator.k_httpHeaderValueCacheControlNoCache">
            <summary>
constant for the default value we set http header 'cache-control', 'no-cache'
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.CacheControlDecorator.k_httpHeaderCacheControl">
            <summary>
constant for the http header 'cache-control'
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.CacheControlDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Decorates the cache-control header to a request.
</summary>
            <param name="url">The url to decorate</param>
            <param name="headers">A map of header to header value to modify</param>
        </member>
        <member name="T:Microsoft.Advertising.Net.CacheControlDecorator">
            <summary>
Decorates the cache-control header to a request.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.ASIDDecorator.DecorateLog(std.shared_ptr&lt;Microsoft.Advertising.AdCallTraceLogger&gt;)">
            <summary>
sets the asid on the Tracelogger 
<param name="logger">the TraceLog logger to be decorated with asid</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.ASIDDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
appends the asid request parameter along with the asid guid to the request url
<param name="url">the request url to be decorated with asid</param><param name="headers">the header to be decorated if need be</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.ILogDecorator.DecorateLog(std.shared_ptr&lt;Microsoft.Advertising.AdCallTraceLogger&gt;)">
            <summary>
Modifies a given tracelog logger
<param name="logger">The logger used to decorate the tracelog params</param></summary>
        </member>
        <member name="T:Microsoft.Advertising.ILogDecorator">
            <summary>
This interface describes methods that modify the log request
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdRequestFactory.UseTestServer">
            <summary>
returns true if the file MicrosoftAdvertisingInternalConfig.xml is present, false otherwise
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdRequestFactory.InitRequestUrl(Concurrency.cancellation_token_source)">
            <summary>
ads the no-cache header and optionally the X-Ads-UserAuth-Ticket header if the request url is https://mobileads.msn.com/v3/delivery/placement
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdRequestFactory.IsReservedRequestParameter(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
initializes the m_adServerUrl with either production or test value bases on the presence of a file named
config.xml in the root of the application install location.
checks to see if the supplied value is a reserved request parameter
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdRequestFactory.AddAdRequestHeaders(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!Sy">
            <summary>
ads the no-cache header and optionally the X-Ads-UserAuth-Ticket header if the request url is https://mobileads.msn.com
or http://nyc-hypnotoad-1.northamerica.corp.microsoft.com
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdRequestFactory.IsWlidUrl(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
checks the supplied url for the presence of https://mobileads.msn.com or http://nyc-hypnotoad-1.northamerica.corp.microsoft.com and returns true if found
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdRequestFactory.GetRequestData(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDer">
            <summary>
Contains all the information necessary to request an ad, including the URL and any headers.
</summary>
            <param name="url">The url for the request</param>
            <param name="headers">The headers for the request</param>
            <param name="decorators">The decorators for the request</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.IsAdOnScreen">
            <summary>
Checks if both the ad control and the webview elements are on screen
This is needed because the ad control is not necessarily in the hierarchy of the webview, and the webview may have a different size fomr the ad control
</summary>
            <returns>true if the visible ad is on screen</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.FireViewableChange(System.Boolean)">
            <summary>
Fire the viewableChange event to Mraid.
</summary>
            <param name="isViewable">Is the current ad viewable.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.Init">
            <summary>
Initialize task invoker
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.GetNetwork">
            <summary>
Get the network type
</summary>
            <returns>network type</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.DoRequest(System.String,System.String)">
            <summary>
Perform web request 
</summary>
            <param name="url">url to request</param>
            <param name="display">ormma display parameter to specify how to handle response</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.OnUnloaded">
            <summary>
cleans up resoureces used by the class
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.GetTilt">
            <summary>
Reports the current tilt coordinates to ormma once for GetTilt call.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StopShakeTracking">
            <summary>
Stops the tracking of accelerometer shake data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StartShakeTracking">
            <summary>
Starts the tracking of accelerometer shake data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StopTiltTracking">
            <summary>
Stops the tracking of accelerometer tilt data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StartTiltTracking">
            <summary>
Starts the tracking of accelerometer tilt data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.SetFullScreenSize(System.Double)">
            <summary>
sets the screen size to the device size
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.SetScreenSize(System.Double,System.Double)">
            <summary>
sets the screen size for the 
</summary>
            <param name="width" />
            <param name="height" />
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.InvokeScript(System.String,System.String[])">
            <summary>
invokes a javascript function
</summary>
            <param name="function">the function to call</param>
            <param name="parameters">parameters to pass to the function</param>
            <returns>the value returned by the javascript call</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.ReportError(System.String,System.String)">
            <summary>
Reports an error to the ad in the web browser via javascript.
</summary>
            <param name="function">the ORMMA method the error occured in</param>
            <param name="message">the error message</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StopOrientationMonitoring">
            <summary>
stops listening to the orientation changed event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StartOrientationMonitoring">
            <summary>
starts listening to the orientation changed event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.UpdateOrientation">
            <summary>
updates the orientation in the WebView
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.BrowseToUrl(Windows.Foundation.Uri)">
            <summary>
initiates browsing to a url
</summary>
            <param name="uri">location to browse to</param>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.TaskInvoker.m_adControlElement">
            <summary>
Parent Ad Control -- for viewability checks
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.TaskInvoker.m_lastNetworkStatus">
            <summary>
keeps track of last network status for event handling
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.TaskInvoker.m_errorReportCount">
            <summary>
used to prevent feedback loop to javascript layer, this scenario could happen when 
subscribing to the error event and in the handler for the error event you generate
the same error again.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Utilities.AppendHttpDelimitedString(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Helper method to form the http request string.
</member>
        <member name="T:Microsoft.Advertising.Utils.Utilities">
Class for containing utility functions.
</member>
        <member name="T:Microsoft.Advertising.Utils.UtilitiesCX">
Class for containing utility functions.
</member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdErrorReport.Init">
            <summary>
Common initialization called from the constructor.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdErrorReport.SetContext(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Set the context used for web requests and error reporting. This is used 
for testing. 
</summary>
            <param name="context">Context for this object to use.</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AdErrorReport.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDer">
Constructor
</member>
        <member name="F:Microsoft.Advertising.Shared.AdErrorReport.m_context">
Context
</member>
        <member name="F:Microsoft.Advertising.Shared.AdErrorReport.m_sdkType">
SDK Type
</member>
        <member name="F:Microsoft.Advertising.Shared.AdErrorReport.m_errorCode">
Error code to be reported
</member>
        <member name="F:Microsoft.Advertising.Shared.AdErrorReport.m_error">
Error from WWA/Xaml
</member>
        <member name="F:Microsoft.Advertising.Shared.AdErrorReport.m_storeId">
App's store id
</member>
        <member name="F:Microsoft.Advertising.Shared.AdErrorReport.m_arcDebug">
ARC-RSP-DBG
</member>
        <member name="F:Microsoft.Advertising.Shared.AdErrorReport.m_asId">
Unique Impression identifier
</member>
        <member name="F:Microsoft.Advertising.Shared.AdErrorReport.m_adUnitId">
Ad Unit ID
</member>
        <member name="F:Microsoft.Advertising.Shared.AdErrorReport.m_appId">
Pub center ID
</member>
        <member name="M:Microsoft.Advertising.Net.IWebClientDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Modifies a given url and/or its headers
</summary>
            <param name="url">The url to decorate</param>
            <param name="headers">A map of header to header value to modify</param>
        </member>
        <member name="T:Microsoft.Advertising.Net.IWebClientDecorator">
            <summary>
This interface describes methods that modify a HTTP request
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.UIUtilities.IsControlOnScreen(Windows.UI.Xaml.FrameworkElement,System.Double)">
            <summary>
returns true if at least x% of the ad area is on screen, false otherwise
</summary>
            <param name="maxAllowedOffscreen">threshold percent to determing if control is on screen or not</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.UIUtilities.GetControlScreenPosition(Windows.UI.Xaml.UIElement)">
            <summary>
returns the position of the element relative to the main window
see: http://forums.silverlight.net/p/12160/39074.aspx
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.UnloadAdControl">
            <summary>
Release AdControl resources when AdControl is removed from the application page.
This method detects whether this.Parent is null. If the parent is null, we need to
clean up the AdControl.

The cleanup will only occur when the Parent is null, unless forceUnload is true.
When the AdControl is being unloaded (see the AdControl_Unloaded event handler)
we force cleanup even if Parent is not null.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.AdLoadFailedHandler(System.Object,Microsoft.Advertising.WinRT.UI.AdErrorEventArgs)">
            <summary>
Handles the case when an ad fails to load.
</summary>
            <param name="sender">the object which fired the event</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.OnWindowVisibilityChanged(System.Object,Windows.UI.Core.VisibilityChangedEventArgs)">
            <summary>
When the app is hidden by the start screen or another app, pause the ad control.
</summary>
            <param name="sender">sender of the event</param>
            <param name="e">arguments for the event</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.OnUnloaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
Unloaded event handler - tells you when the control needs to be cleaned up
</summary>
            <param name="sender">sender of the event</param>
            <param name="e">arguments for the event</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.#ctor">
            <summary>
      يقوم بتهيئة <c>AdControl</c> جديد.
    </summary>
            <remarks>
                <para>
        يجب أن يقوم المطور بتعيين خصائص <c>ApplicationId</c> و<c>AdUnitId</c> قبل أن يتمكن التطبيق من عرض إعلانًا.
      </para>
                <para>
        القيمة الافتراضية لحجم <c>AdControl</c> هو 480x80 بكسل.
      </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.ReleaseWebViewPool">
            <summary>
      قم بتحرير كل عناصر تحكم عرض الويب المخزنة مؤقتًا الموجودة حاليًا داخل تجمع عرض الويب.
    </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.Resume">
            <summary>
                <para>
        يستئنف الأداء الوظيفي العادي للإعلان بعد أن كان مُعلقًا.
      </para>
                <para>
        يستئنف التحديث التلقائي لـ AdControl، إذا كان <c>IsAutoRefreshEnabled</c>=<c>صواب</c>، ويسمح للتحديث اليدوي بأن يحدث مرة أخرى.
      </para>
            </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.Suspend">
            <summary>
                <para>
        يُعلق الإعلان الحالي. تم تعطيل تحديث الإعلان. إذا تم تعشيق الإعلان، فسيتم إغلاق الإعلان المُوسع.
      </para>
            </summary>
            <remarks>
      يمكن استخدام ذلك في حالات تحتاج فيها التطبيقات إلى تولي تحكم الواجهة، على سبيل المثال لمكالمة واردة أو تنبيه. يستبدل العرض الحالي للإعلان بلقطة لما كان يعرض في هذا الوقت. راجع وظيفة <c>استئناف</c> لاستئناف الإعلان.
    </remarks>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.RemoveAdTag(System.String)">
            <summary>
      قم بإزالة علامة إعلان من تحكم الإعلان. لن يكون لهذا تأثيرًا إذا كان اسم العلامة غير موجود.
    </summary>
            <param name="tagName">
      اسم العلامة المطلوب إزالتها.
    </param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.AddAdTag(System.String,System.String)">
            <summary>
      إضافة علامة إعلان إلى تحكم الإعلان. الحد الأقصى 10 علامات لكل تحكم إعلان. إذا تم تجاوز الحد الأقصى، فسيتم حدث errorOccurred.
    </summary>
            <param name="tagName">
      اسم العلامة. الحد الأقصى 16 حرفًا، إذا تم تجاوزه فسيبدأ حدث errorOccurred.
    </param>
            <param name="tagValue">
      قيمة العلامة. الحد الأقصى 128 حرفًا، إذا تم تجاوزه فسيبدأ حدث errorOccurred.
    </param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.Refresh">
            <summary>
                <para>
        يبدأ طلبًا لإعلان جديد، والذي سيتم عرضه بمجرد توفره.
      </para>
                <para>
        قد لا يتم استخدام هذه الطريقة عند تعيين <c>IsAutoRefreshEnabled</c> على <c>صواب</c>.
      </para>
            </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.InitializeAdControl">
            <summary>
Initialize the AdControl.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.OnSizeChanged(System.Object,Windows.UI.Xaml.SizeChangedEventArgs)">
            <summary>
Size changed event handler. If the control
contains bannerAdView/textAdView, trigger size validation and 
ad rendering. Also change placement size according to the control
size.
</summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Arguments for the event</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.BeforeAdRenderEventHandler">
            <summary>
Fires OnBeforeAdRender event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.ManipulationStateChangeEventHandler(Microsoft.Advertising.WinRT.UI.ManipulationStateChangedEventArgs)">
            <summary>
Fires ManipulationStateChange event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.MouseWheelEventHandler(Microsoft.Advertising.WinRT.UI.MouseWheelEventArgs)">
            <summary>
Fires OnMouseWheel event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.PointerDownEventHandler(Microsoft.Advertising.WinRT.UI.PointerDownEventArgs)">
            <summary>
Fires OnPointerDown event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.PointerUpEventHandler">
            <summary>
Fires OnPointerUp event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.PointerMoveEventHandler(Microsoft.Advertising.WinRT.UI.PointerMoveEventArgs)">
            <summary>
Fires OnPointerMove event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.BroadcastAdRefreshedEvent">
            <summary>
Helper method that broadcasts ad refreshed events to any listeners
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.BroadcastErrorEvent(Microsoft.Advertising.ErrorCode,System.String)">
            <summary>
Helper method that broadcasts error events to any listeners 
and discard current ad.
</summary>
            <param name="error">the exception</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.BroadcastErrorEvent(Microsoft.Advertising.ErrorCode,System.String,System.Boolean)">
            <summary>
Helper method that broadcasts error events to any listeners
and can choose to discard ad.
</summary>
            <param name="error">the exception</param>
            <param name="discardAd">true to discard ad, false not to</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.DiscardCurrentAd">
            <summary>
This will discard the current ad, remove any existing child elements (e.g. the WebView containing the ad),
and make the ad control transparent.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.VerifyAndDisplayAd(Microsoft.Advertising.Shared.WinRT.Advertisement)">
            <summary>
Helper method called from the event handler for the library notification of a new ad - used to make sure the
new ad fits in the size available, and can be displayed by the ad control.
</summary>
            <param name="ad">Advertisement to verify and display</param>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.EnableWebViewPool">
            <summary>
      قم بالتعيين على صواب لتمكين إعادة استخدام مثيلات WebView.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.HasAd">
            <summary>
      يظهر نتيجة صواب إذا استلم <c>AdControl</c> إعلانًا من الخادم.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.IsSuspended">
            <summary>
      يوضح ما إذا كان <c>AdControl</c> في حالة تعليق حاليًا أم لا.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.PostalCode">
            <summary>
      الرمز البريدي للمستخدم.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.CountryOrRegion">
            <summary>
      بلد أو منطقة المستخدم.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.Keywords">
            <summary>
      الكلمات الأساسية المستخدمة في استهداف الإعلان.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.IsBackgroundTransparent">
            <summary>
      عند تعيين هذه الخاصية على صواب، ستكون خلفية <c>AdControl</c> شفافة. عند تعيين هذه الخاصية على خطأ، ستكون الخلفية سوداء. القيمة الافتراضية هي خطأ.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.AutoRefreshIntervalInSeconds">
            <summary>
      الفاصل الزمني للتحديث التلقائي بالثواني.
    </summary>
            <remarks>
      يجب أن تكون القيمة مساوية لقيمة التحديث التلقائي الافتراضية أو أكبر منها. إذا كانت القيمة المضبوطة أقل من قيمة التحديث التلقائي الافتراضية، فإن قيمة التحديث التلقائي الافتراضية سيتم استخدامها.
    </remarks>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.IsAutoRefreshEnabled">
            <summary>
      يُمكن التحديث التلقائي للإعلانات أو يُعطله. لا يمكن تغيير هذه الخاصية بعد تعيينها مبدئيًا.
    </summary>
            <remarks>
      يمكن تعيين هذه الخاصية مرة واحدة فقط. القيمة الافتراضية هي <c>صواب</c>.
    </remarks>
            <exception>تم تعيين خاصية IsAutoRefreshEnabled بالفعل.</exception>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.IsEngaged">
            <summary>
      يوضح ما إذا المستخدم متداخل حاليًا مع الإعلان أم لا.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.ApplicationId">
            <summary>
      معرف التطبيق الخاص بالتطبيق. يتم توفير هذه القيمة عند تسجيل التطبيق مع pubCenter.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.AdUnitId">
            <summary>
                <para>
        مُعرف وحدة الإعلان.
      </para>
                <para>
        يتم توفير هذه القيمة للناشر عندما يقوم الناشر بإنشاء وحدة إعلان في pubCenter.
      </para>
            </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.OnManipulationStateChanged">
            <summary>
      يتم هذا الحدث عند استلام <c>AdControl</c> حدث تغيير حالة المعالجة.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.OnPointerMove">
            <summary>
      يتم هذا الحدث عند استلام <c>AdControl</c> حدث حركة مؤشر.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.OnMouseWheel">
            <summary>
      يتم هذا الحدث عند استلام <c>AdControl</c> حدث عجلة التمرير في الماوس.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.OnPointerDown">
            <summary>
      يتم هذا الحدث عندما دفع المستخدم لأسفل داخل تحكم إعلان باستخدام الماوس أو المؤشر أو اللمس. بإمكان التطبيق استخدام هذا الحدث لإظهار حركة تحكم الإعلان للحصول على تعليقات مرئية عند اللمس لأسفل. قد يُوقف الإعلان هذا الحدث إذا كان يوفر ملاحظات مرئية عند اللمس لأسفل بنفسه.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.OnPointerUp">
            <summary>
      يتم هذا الحدث عندما يُحرر المستخدم ضغطة لأسفل داخل تحكم الإعلان باستخدام الماوس أو المؤشر أو اللمس. بإمكان التطبيق استخدام هذا الحدث لإظهار حركة تحكم الإعلان للحصول على تعليقات مرئية عند اللمس لأسفل. قد يُوقف الإعلان هذا الحدث إذا كان يوفر ملاحظات مرئية عند اللمس لأسفل بنفسه.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.OnBeforeAdRender">
            <summary>
      يتم هذا الحدث قبل أن يعرض <c>AdControl</c> الإعلان.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.IsEngagedChanged">
            <summary>
      يتم هذا الحدث عند نقر المستخدم على إعلان ويبدأ تجربة موسعة.
    </summary>
            <remarks>
      الغرض من هذا الحدث هو إعطاء المطورين الخيار لإيقاف تشغيل التطبيق مؤقتًا عند ظهور التراكب.
    </remarks>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.AdRefreshed">
            <summary>
      يتم هذا الحدث عند استلام <c>AdControl</c> إعلانًا جديدًا.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.ErrorOccurred">
            <summary>
      يتم هذا الحدث عندما يواجه <c>AdControl</c> خطأ أثناء استرداد إعلانات.
    </summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AdControl">
            <summary>
                <para>
        يعمل Microsoft <c>AdControl</c> على تمكين المطورين لإضافة إعلانات إلى تطبيقاتهم.
      </para>
            </summary>
            <remarks>
                <para>
        تم تكوين <c>AdControl</c> لعرض إعلان جديد كل 60 ثانية. هذا هو الإعداد الافتراضي. إذا كان هذا السلوك لا يناسب التطبيق، فيمكنك تعيين <c>IsAutoRefreshEnabled</c> على <c>خطأ</c> واستخدام طريقة <c>تحديث</c> لطلب أن يعرض <c>AdControl</c> الإعلان التالي المتوفر.
      </para>
                <para>
        لا تستخدم نفس مثيل <c>AdControl</c> في صفحات متعددة.
      </para>
                <para>
        بمجرد التعيين، يجب ألا يتم تغيير أصل <c>AdControl</c>.
      </para>
                <para>
        يلزم تعيين جميع الخصائص المطلوبة في <c>AdControl</c> قبل إضافة التحكم إلى الكائن الأصل. تتضمن هذه الخصائص المطلوبة <c>AdUnitId</c> و<c>ApplicationId</c>.
      </para>
            </remarks>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.AdInitialized">
            <summary>
event that is fired when an ad is rendered
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_isSuspended">
            <summary>
tracks if the ad is in the suspended state
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_ormma">
            <summary>
the Ormma handler
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_webView">
            <summary>
the webbrowser control responsible for rendering content
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_preExpandHeight">
            <summary>
holds the pre-expanded height
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_preExpandWidth">
            <summary>
holds the pre-expanded width
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.OnManipulationStateChanged">
            <summary>
Raised  OnManipulationStateChanged event from JS
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.OnPointerMove">
            <summary>
Raised OnPointerMove event from JS
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.OnMouseWheel">
            <summary>
Raised on MouseWheel event from JS
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.OnPointerDown">
            <summary>
Raised on PointerUp event from JS
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.OnPointerUp">
            <summary>
Raised on PointerUp event from JS
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.AdLoadFailed">
            <summary>
event that is fired when an ad fails to load due to timeout or other error
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.PolyAdState">
            <summary>
the state of the browser (default, expanded etc)
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_preExpandParent">
            <summary>
Parent control before expansion. Used for restore the control back
into the original visual tree after closing.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_adControlElement">
            <summary>
Parent Ad Control -- for viewability checks
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_webViewBrushDisplayRectangle">
            <summary>
rectangle for painting the webviewbrush to
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_lastPerformanceScrollingDisplaySwitchTimestamp">
            <summary>
time the previousOriginOffset was recorded 
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_previousOrientation">
            <summary>
stores the previous orientation to determine if the position change
was caused by a screen rotation
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_previousOriginOffset">
            <summary>
stores the WebViews previous location 
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_navigateUri">
            <summary>
stores the uri to navigate to for the expand to url scenario
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_popupLock">
            <summary>
controls access to the popup
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_popupHost">
            <summary>
container for expanded ad experience
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.ManipulationStateChangedEventArgs.LastState">
            <summary>
MS_MANIPULATION_STATE_STOPPED - 0
The content has stopped moving and there is no active manipulation.
MS_MANIPULATION_STATE_ACTIVE - 1
A contact is touching the surface and interacting with content.
MS_MANIPULATION_STATE_INERTIA -	2
The content is still moving, but contact with the surface has ended(finger, pen, mouse lifted).
MS_MANIPULATION_STATE_PRESELECT - 3
A contact has initiated a cross - slide interaction.
MS_MANIPULATION_STATE_SELECTING - 4
A cross - slide interaction has crossed the selection distance threshold; selection is activated.
MS_MANIPULATION_STATE_DRAGGING - 5
A cross - slide interaction has crossed the drag distance threshold; dragging is activated.
MS_MANIPULATION_STATE_CANCELLED - 6
A cross - slide interaction has been cancelled.This can happen for any of the following reasons :
The user hits the Esc key
The window lost focus
The associated pointer was cancelled(for example, due to a digitizer issue)
The drag was cancelled via script(for example, by calling preventDefault on a dragstart or drag event)
MS_MANIPULATION_STATE_COMMITTED - 7
The touch pointer was released and the manipulation has completed.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.ManipulationStateChangedEventArgs.CurrentState">
            <summary>
MS_MANIPULATION_STATE_STOPPED - 0
The content has stopped moving and there is no active manipulation.
MS_MANIPULATION_STATE_ACTIVE - 1
A contact is touching the surface and interacting with content.
MS_MANIPULATION_STATE_INERTIA -	2
The content is still moving, but contact with the surface has ended(finger, pen, mouse lifted).
MS_MANIPULATION_STATE_PRESELECT - 3
A contact has initiated a cross - slide interaction.
MS_MANIPULATION_STATE_SELECTING - 4
A cross - slide interaction has crossed the selection distance threshold; selection is activated.
MS_MANIPULATION_STATE_DRAGGING - 5
A cross - slide interaction has crossed the drag distance threshold; dragging is activated.
MS_MANIPULATION_STATE_CANCELLED - 6
A cross - slide interaction has been cancelled.This can happen for any of the following reasons :
The user hits the Esc key
The window lost focus
The associated pointer was cancelled(for example, due to a digitizer issue)
The drag was cancelled via script(for example, by calling preventDefault on a dragstart or drag event)
MS_MANIPULATION_STATE_COMMITTED - 7
The touch pointer was released and the manipulation has completed.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.MouseWheelEventArgs.CtrlKeyPressed">
            <Summary>
If Ctrl key was pressed
</Summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PointerDownEventArgs.PointerType">
            <Summary>
Possible values are Mouse, Touch, Pen
</Summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.OrmmaImpl.AdRendered">
raised when we're notified by the renderer that the ad has been rendered, ie all assets etc have been downloaded
</member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.DoRequest(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Issue request for the uri resource
</summary>
            <param name="parameters">dictionary of parameters. URL is the resource to request. Display is Ormma parameter to specify how to handle response</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.RaiseRichMediaActionEvent(Microsoft.Advertising.WinRT.UI.RichMediaActionType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Fires an event if there are any handlers.
Currently this is a no-op. We previously thought we might report to server when ormma was used to make a call or send sms.
We do not do this now. This can be removed completely if it is determined we will never need this event.
</summary>
            <param name="action">action that occurred</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetScreenSize">
            <summary>
sets the screensize to use in ormma in ormma
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.Resize(System.Double,System.Double,Microsoft.Advertising.WinRT.UI.RichMediaAdState)">
            <summary>
helper method for resizing, also updates state and size in the JS layer
which triggers the appropriate events
</summary>
            <param name="width" />
            <param name="height" />
            <param name="state" />
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.GetOrientation(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Updates the the web controls orientation variable or optional starts/stops listening
for the orientation changed event.
</summary>
            <param name="parameters">contains an optional parameter 'listener'. if 'start' it updates the 
the orientation value as it changes, if stop it stops updating, if not present it updates the 
orientation once.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetupViewableChangedHandler(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Starts the monitoring if the ad is viewable or not
</summary>
            <param name="parameters">contains an optional parameter 'listener'. if 'start' it raises the 
the viewable changed event as it changes, if stop it stops raising the event.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.StartShakeAccelerometer(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Starts monitoring and sending the shake events to client.
</summary>
            <param name="parameters">contains an optional parameter 'listener'. if 'start' it updates the 
the shake value as it changes, if stop it stops updating, if not present does nothing</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.StartTiltAccelerometer(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
updates the tilt value in the JS layer.
</summary>
            <param name="parameters">contains an optional parameter 'listener'. if 'start' it updates the 
the tilt value as it changes, if stop it stops updating, if not present it does nothing</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.Hide">
            <summary>
hides the add if it was in the default state.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.Show">
            <summary>
shows the ad if it was in the hidden state
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.Resize(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
resizes the web browser to the size specified
</summary>
            <param name="parameters">Dictionary containing required parameters (height, width) for expanding</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.Expand(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
expands the current ad to the specified size
</summary>
            <param name="parameters">Dictionary containing required parameters (url) for expanding.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetExpandProperties(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
sets the background properties to use during expand
</summary>
            <param name="parameters">Dictionary containing required parameters (width,height,useCustomClose,lockOrientation) for expanding.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetUserEngaged(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
sets the background properties to use during expand
</summary>
            <param name="parameters">Dictionary containing required parameters (width,height,useCustomClose,lockOrientation) for expanding.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.RaiseAdRenderedEvent">
            <summary>
raises the AdRendered event, this occurrs when the ad renderer sends a message telling
us that they've finished downloading all assets etc
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetUseCustomClose(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
sets whether to use close bands, SDK provided or a custom close button to
exit full screen ad.
</summary>
            <param name="prms">true</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.RaiseAdRenderedError">
            <summary>
processes the ad error message sent from ormma and raises the 
AdRenderError event, this will eventually raise the ErrorOccured event
on the ad sdk.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.FireViewableChange(System.Boolean)">
            <summary>
Fire the viewableChange event to Mraid.
</summary>
            <param name="isViewable">Is the current ad viewable.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.BrowseToUrl(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Initiates a WebBrowserTask with data from the rich media ad.
</summary>
            <param name="parameters">Dictionary containing required parameters (url) for browsing.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.FireClickEvent">
            <summary>
firest the "click" event in the renderer, this is typically only fired when
the developer has set UseStaticAnchor to true and allows us to notify the 
renderer that a user is interacting with the ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetToPreviousState">
            <summary>
updates the state of ormma and keeps track of the previous state
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetOrmmaAdContainerSize(System.Double,System.Double)">
            <summary>
Sets the size of the ad container.
</summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.Execute(System.String)">
            <summary>
Executes the ORMMA action encoded in actionInfo
</summary>
            <param name="actionInfo">string containing action name and parameters in the folowing format,
"actionName:param1=value1&amp;param2=value2"
</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetState(Microsoft.Advertising.WinRT.UI.RichMediaAdState)">
            <summary>
updates the state of ormma and keeps track of the previous state
</summary>
            <param name="state">that state to update to</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.Close">
            <summary>
changes the state of the rich media ad dependant on it's current state.
default: moves to hidden
resized: moves to default
expanded: moves to default if it had expanded from default, moves to resized if it was expanded from resized
hidden: no change
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.OnUnloaded">
            <summary>
performs any required cleanup
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.InitializeOrmma">
            <summary>
initialises ormma to a known state
</summary>
            <returns>true if initialisation was successful, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.#ctor(Microsoft.Advertising.WinRT.UI.ITaskInvoker,Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser,Microsoft.Advertising.WinRT.UI.RichMediaAdState,Microsoft.Advertising.WinRT.UI.AdPlacementType,System.Double,System.Double)">
            <summary>
constructor
</summary>
            <param name="taskInvoker">platform specific task invoker</param>
            <param name="state">the starting state of ormma</param>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AdPlacementType">
            <summary>
Ad Placement types.
</summary>
        </member>
        <member name="F:Interstitial">
            <summary>
interstitial placement.
</summary>
        </member>
        <member name="F:Inline">
            <summary>
inline placement.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.FireViewableChange(System.Boolean)">
            <summary>
Fire the viewableChange event to Mraid.
</summary>
            <param name="isViewable">Is the current ad viewable.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.Init">
            <summary>
Initialize task invoker
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.GetNetwork">
            <summary>
Get the network type
</summary>
            <returns>network type</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.DoRequest(System.String,System.String)">
            <summary>
Perform web request 
</summary>
            <param name="url">url to request</param>
            <param name="display">ormma display parameter to specify how to handle response</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.OnUnloaded">
            <summary>
cleans up resoureces used by the class
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.GetTilt">
            <summary>
Reports the current tilt coordinates to ormma once for GetTilt call.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.StopShakeTracking">
            <summary>
Stops the tracking of accelerometer shake data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.StartShakeTracking">
            <summary>
Starts the tracking of accelerometer shake data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.StopTiltTracking">
            <summary>
Stops the tracking of accelerometer tilt data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.StartTiltTracking">
            <summary>
Starts the tracking of accelerometer tilt data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.SetFullScreenSize(System.Double)">
            <summary>
sets the screen size to the device size
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.SetScreenSize(System.Double,System.Double)">
            <summary>
sets the screen size for the 
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.InvokeScript(System.String,System.String[])">
            <summary>
Invokes a javascript function
</summary>
            <param name="function">the function to call</param>
            <param name="parameters">parameters to pass to the function</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.ReportError(System.String,System.String)">
            <summary>
Reports an error to the ad in the web browser via javascript.
</summary>
            <param name="function">the ORMMA method the error occured in</param>
            <param name="message">the error message</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.StopOrientationMonitoring">
            <summary>
stops listening to the orientation changed event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.StartOrientationMonitoring">
            <summary>
starts listening to the orientation changed event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.UpdateOrientation">
            <summary>
updates the orientation in the WebView
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.BrowseToUrl(Windows.Foundation.Uri)">
            <summary>
initiates browsing to a url
</summary>
            <param name="uri">location to browse to</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IOrmmaImpl.Execute(System.String)">
            <summary>
Executes the ORMMA action encoded in actionInfo
</summary>
            <param name="actionInfo">string containing action name and parameters in the folowing format,
"actionName:param1=value1&amp;param2=value2"
</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IOrmmaImpl.SetState(Microsoft.Advertising.WinRT.UI.RichMediaAdState)">
            <summary>
updates the state of ormma and keeps track of the previous state
</summary>
            <param name="state">that state to update to</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IOrmmaImpl.Close">
            <summary>
changes the state of the rich media ad dependant on it's current state.
default: moves to hidden
resized: moves to default
expanded: moves to default if it had expanded from default, moves to resized if it was expanded from resized
hidden: no change
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IOrmmaImpl.OnUnloaded">
            <summary>
performs any required cleanup
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IOrmmaImpl.InitializeOrmma">
            <summary>
initialises ormma to a known state
</summary>
            <returns>true if initialisation was successful, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.IOrmmaImpl">
            <summary>
Ormma implementation for native interface.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.CloseExpandedView">
            <summary>
Handles the closing of an expanded ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.RaiseAdLoadFailedEvent(System.String)">
            <summary>
Raises the page load failed event to indicate that the ad did not load properly.
This could be due to a timeout, problem loading the renderer, problem interacting
with JavaScript using InvokeScript, etc.
</summary>
            <param name="message">page load failed message</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.SetUseCustomClose(System.Boolean)">
            <summary>
This set expanded view or interstitial ad view showing default close button or not.
</summary>
            <param name="useCustomClose">If true, hide default close button. The ad will show its own close button.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.UpdateExpandProperties(Microsoft.Advertising.WinRT.UI.ExpandProperties)">
            <summary>
This allows resizing an already-expanded ad. This is useful when screen size changes.
</summary>
            <param name="expandProps">updated ExpandProperties to use for the expanded ad</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.Resize(System.Double,System.Double)">
            <summary>
method passed as a delegate to the WP7TaskInvoked to handle the expand operation
</summary>
            <param name="width">width to resize to</param>
            <param name="height">height to resize to</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.Expand(Windows.Foundation.Uri,Microsoft.Advertising.WinRT.UI.ExpandProperties)">
            <summary>
method passed as a delegate to WP7TaskInvoker to handle expand operation
</summary>
            <param name="uri">url to expand to if specified</param>
            <param name="expandProperties">properties for the expand (whether to show background, it's colour etc)</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.GetContainerHeight">
            <summary>
Gets the current container height.
</summary>
            <returns>Container height.</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.GetContainerWidth">
            <summary>
Gets the current contained width.
</summary>
            <returns>Container width.</returns>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.ExpandProperties.LockOrientation">
            <summary>
Lock the orientation of the expansion, if it is not specified in the properties object a value
of false is assumed. 
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.ExpandProperties.IsModal">
            <summary>
 read-only property that identifies if the expanded container is modal or not. True, the SDK
 is providing a modal container for the expanded ad; false, the SDK is not providing a modal
 container for the expanded ad. 
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.ExpandProperties.UseCustomClose">
            <summary>
allows the ad designer to replace the default close graphic. True, stop showing the default
close graphic and rely on ad creative's custom close indicator; false (default), container
will display the default close graphic/
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.ExpandProperties.Height">
            <summary>
the height of creative in pixels, default is full screen height 
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.ExpandProperties.Width">
            <summary>
the width of creative in pixels, default is full screen width 
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ExpandProperties.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
ExpandProperties constructor
</summary>
            <param name="width">widht to expand to</param>
            <param name="height">height to expand to</param>
            <param name="useCustomClose">choose whether to use custom close</param>
            <param name="lockOrientation">choose whether to lock orientation</param>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.ExpandProperties">
            <summary>
holds the container properties used during expand
properties = {  
                "width`*`" : "nn",
                "height`*`" : "nn",   
                "useCustomClose`*`" :  "true|false",  
                "isModal`*`" : "true|false" (read-only),  
                "lockOrientation" : "true|false",  
              }
see http://code.google.com/p/ormma/wiki/ORMMA_JavaScript#getExpandProperties
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.CheckIfRefreshIntervalMetAndRaiseError">
            <summary>
returns true if the minimum time between manual refresh has passed,
this is 30 seconds when on an unmetered connection and 60 seconds on 
a metered connection, raises error if interval is not met
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.SetEngagedStates(System.Boolean,System.Boolean)">
            <summary>
updates the engaged state of the adcontrol
</summary>
            <param name="isExpandedNew">the new expanded state</param>
            <param name="isUserEngagedNew">the new user engaged state</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.StopTimerAfterEngaged">
            <summary>
Stop the timer, set the next timer interval to RotationTime
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.OnAdRotationTimer(System.Object,System.Object)">
            <summary>
Private event handler on Ad rotation timer event
</summary>
            <param name="state">state of the event receiver</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.PauseTimer">
            <summary>
Pause the timer and set the next timer interval to the remaining time
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.StartTimer">
            <summary>
Start the timer with whatever the interval is set.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.Unload">
            <summary>
Release AdControl resources when AdControl is removed from the application page.
This method detects whether this.Parent is null. If the parent is null, we need to
clean up the AdControl.

The cleanup will only occur when the Parent is null, unless forceUnload is true.
When the AdControl is being unloaded (see the AdControl_Unloaded event handler)
we force cleanup even if Parent is not null.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.OnRichMediaAction(System.Object,Microsoft.Advertising.WinRT.UI.RichMediaEventArgs)">
            <summary>
OnRichMediaAction handler
</summary>
            <param name="sender">this is the AdControl</param>
            <param name="e">rich media event argument</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.HasSizeChanged(System.Double,System.Double)">
            <summary>
Whether or not the placement size has changed.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.OnSizeChanged">
            <summary>
Operation needed when ad size changed (request a new ad with the new size).
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.DeactivateAdControl">
            <summary>
Steps that need to happen when the ad control gets deactivated or hides from view
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.ActivateAdControl">
            <summary>
Steps that need to happen when the ad control gets activated or comes in view
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.Resume">
            <summary>
Removes the static snapshot of the AdControl and replaces it with the dynamic display.
Resumes automatic refresh of the AdControl, if IsAutoRefreshEnable=true, and allows
manual refresh to occur again after Suspend.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.Suspend">
            <summary>
Suspends the current ad and replaces the current view of the ad with a snapshot of
what was currently being rendered. After calling Suspend the AdControl will not 
automatically refresh, if IsAutoRefreshEnabled=true, and you cannot manually 
refresh the AdControl until Resume has been called.
</summary>
            <param name="closeExpandedAd">If true and the ad was engaged, this action is cancelled
and the expaned ad is closed. If false no action is taken on the expanded ad.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.Initialize(System.Boolean,Microsoft.Advertising.WinRT.UI.IAdControlTimer)">
            <summary>
Initialize the AdController related.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_autoRefreshIntervalInSeconds">
            <summary>
Ad rotation interval used by ration timer
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.k_minAdRefreshIntervalInSecondsUnmetered">
            <summary>
Constant for minimum Ad refresh interval when on unmetered network
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.k_minAdRefreshIntervalInSecondsMetered">
            <summary>
Constant for Ad rotation time, currently is equal to one minute
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.k_adRotationTimeInSeconds">
            <summary>
Constant for Ad rotation time, currently is equal to one minute
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_previousIsEnabledState">
            <summary>
stores the previous IsEnabled state, this is used in preventing
focus from being stolen by the WebView
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_isSuspended">
            <summary>
tracks the suspended state of the AdControl
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_timeAtLastRotation">
            <summary>
time when ad was last refreshed
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_rotationTimer">
            <summary>
Ad rotation timer
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_isAutoRefreshChangeAllowed">
            <summary>
Flag that keeps track of if the app developer set the rotation or not
This property can be set just once, and cannot be set after the control is added to a parent
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_isAutoRefreshEnabled">
            <summary>
automatic (true) or manual (false) rotation
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_isUserEngaged">
            <summary>
Flag shows if the user is interacting with the ad inline (not expanded)
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_isExpanded">
            <summary>
Flag shows if the ad has been expanded
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.PostAsync(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_str">
            <summary>
Makes an asynchronous HTTP POST request
</summary>
            <param name="url">The url to Post</param>
            <param name="body">A body to send to in this request.</param>
            <param name="bodyLength">The length of the body</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to an ICancel token that lets you cancel the request</returns>
            <summary>
Makes an asynchronous HTTP POST request
</summary>
            <param name="url">The url to Post</param>
            <param name="body">A body to send to in this request.</param>
            <param name="bodyLength">The length of the body</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="decorators">A list of decorators to apply to the request</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to an ICancel token that lets you cancel the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.PostAsync(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,std.function&lt;(std.shared_ptr&lt;Microsoft.Advertising.Net.WebResponse&gt;)(std.shared_ptr&lt;Microsoft.Advertising.Net.WebResponse&gt;)&gt;)">
            <summary>
Makes an asynchronous HTTP POST request
</summary>
            <param name="url">The url to Post</param>
            <param name="body">A body to send to in this request.</param>
            <param name="bodyLength">The length of the body</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to an ICancel token that lets you cancel the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.Post(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;S">
            <summary>
Makes a synchronous HTTP POST request
</summary>
            <param name="url">The url to Post</param>
            <param name="body">A body to send to in this request.</param>
            <param name="bodyLength">The length of the body</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="ctg">The cancel token group used to cancel this request; optional</param>
            <returns>A shared pointer to a webresponse with the results of the request</returns>
            <summary>
Makes a synchronous HTTP POST request
</summary>
            <param name="url">The url to Post</param>
            <param name="body">A body to send to in this request.</param>
            <param name="bodyLength">The length of the body</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="decorators">A list of decorators to apply to the request</param>
            <param name="ctg">The cancel token group used to cancel this request; optional</param>
            <returns>A shared pointer to a webresponse with the results of the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.Post(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;Microsoft.Advertising.Concurrency.CancelTokenGroup&gt;)">
            <summary>
Makes a synchronous HTTP POST request
</summary>
            <param name="url">The url to Post</param>
            <param name="body">A body to send to in this request.</param>
            <param name="bodyLength">The length of the body</param>
            <param name="ctg">The cancel token group used to cancel this request; optional</param>
            <returns>A shared pointer to a webresponse with the results of the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.GetAsync(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.">
            <summary>
Makes an asynchronous HTTP GET request
</summary>
            <param name="url">The url to get</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to an ICancel token that lets you cancel the request</returns>
            <summary>
Makes an asynchronous HTTP GET request
</summary>
            <param name="url">The url to get</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="decorators">A list of decorators to apply to the request</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to an ICancel token that lets you cancel the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.GetAsync(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;(std.shared_ptr&lt;Microsoft.Advertising.Net.WebResponse&gt;)(std.shared_ptr&lt;Microsoft.Advertising.Net.WebResponse&gt;)&gt;)">
            <summary>
Makes an asynchronous HTTP GET request
</summary>
            <param name="url">The url to get</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to an ICancel token that lets you cancel the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.Get(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsCon">
            <summary>
Makes a synchronous HTTP GET request
</summary>
            <param name="url">The url to get</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="ctg">The cancel token group used to cancel this request; optional</param>
            <returns>A shared pointer to a webresponse with the results of the request</returns>
            <summary>
Makes a synchronous HTTP GET request
</summary>
            <param name="url">The url to get</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="decorators">A list of decorators to apply to the request</param>
            <param name="ctg">The cancel token group used to cancel this request; optional</param>
            <returns>A shared pointer to a webresponse with the results of the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.Get(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Concurrency.CancelTokenGroup&gt;)">
            <summary>
Makes a synchronous HTTP GET request
</summary>
            <param name="url">The url to get</param>
            <param name="ctg">The cancel token group used to cancel this request; optional</param>
            <returns>A shared pointer to a webresponse with the results of the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Net.IWebClient&gt;)">
            <summary>
Constructor. Allows user to pass in their own IWebClient.
</summary>
            <param name="impl">The IWebClientImpl to use to make http requests</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Net.WebClientFactory&gt;)">
            <summary>
Constructor.
</summary>
            <param name="factory">The web client factory to use</param>
        </member>
        <member name="T:Microsoft.Advertising.Net.WebClient">
            <summary>
This class makes http calls
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Strict.WinRt.EventsReporterExtractor">
            <summary>
This class exists to explicitly violate the data encapsulation of
events reporter in order to convert it to the current WinRt classes
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vmap.VmapResolverStrict.CheckAdBreakForError(std.shared_ptr&lt;Microsoft.Advertising.Documents.Vmap.AdBreak!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Check an ad break DOM for errors and fire them if it can
</summary>
            <param name="adbreak">The ad break DOM</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vmap.VmapResolverStrict.FireError(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,System.Int32,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vmap.AdBreak!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Fire an error for an ad break DOM
</summary>
            <param name="context">The context the use</param>
            <param name="errorCode">The error code to fire</param>
            <param name="errorMessage">The error message</param>
            <param name="adbreak">The ad break DOM</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vmap.VmapResolverStrict.FireError(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,System.Int32,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Fire an error for an error url
</summary>
            <param name="context">The context the use</param>
            <param name="errorCode">The error code to fire</param>
            <param name="errorMessage">The error message</param>
            <param name="url">The error url</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.CheckInLineAdForError(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Check an Ad DOM for errors in its InLine, if it has one.
</summary>
            <param name="context">The context to use</param>
            <param name="ad">The ad DOM to check</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.FireError(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,System.Int32,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Fire an error for an error url
</summary>
            <param name="context">The context to use</param>
            <param name="errorCode">The error code to fire</param>
            <param name="url">The error url</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.FireError(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,System.Int32,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Wrapper!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Fire an error for a wrapper
</summary>
            <param name="context">The context to use</param>
            <param name="errorCode">The error code to fire</param>
            <param name="wrapper">The wrapper the error occurred in</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.FillInResolvedAdWithBuffet(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary>
Attempt to fill in one specific failed resolvedAd with the given buffet ad
</summary>
            <param name="context">The context to use</param>
            <param name="flags">The wrapper flags to use</param>
            <param name="buffetAd">The buffet ad to use</param>
            <param name="resolvedAd">The resolved ad that failed and needs to be filled in</param>
            <param name="depth">The current wrapper depth</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.FillInFallbackAds(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;,std.allocator&lt;std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.share">
            <summary>
Go through the resolved ad packages and fill in failed / no ads with ads from the buffet.
The buffet ads have not been resolved yet, so they will need to be resolved.
</summary>
            <param name="context">The context to use</param>
            <param name="flags">The wrapper flags to use</param>
            <param name="resolvedPackages">The resolved packages that needs to be filled in</param>
            <param name="buffet">The buffet to use to fill in the ads with</param>
            <param name="depth">The current wrapper depth</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.AddWrapperToWrapperGroup(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,std.vector&lt;std.function&lt;(std.function&lt;(void)&gt;)(std.function&lt;(void)&gt;)&gt;,std.allocator&lt;std.function&lt;(std.function&lt;(void)&gt;)(std.function&lt;(void)&gt;)&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Wrapper!System.Runtime.CompilerServices.IsConst&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDere">
            <summary>
Generates a wrapper resolving callback and adds it into a wrapper group to be resolved asynchronously in parallel.
</summary>
            <param name="context">The context to use</param>
            <param name="wrapperGroup">The group of wrapper resolution callbacks to add to</param>
            <param name="packagesToMergeInto">The vector of packages to append the wrapper results into</param>
            <param name="wrapper">The wrapper to resolve</param>
            <param name="flags">The wrapper flags to use</param>
            <param name="depth">The current wrapper depth</param>
            <param name="lockObject">The mutex to protect access to the packages to merge into</param>
            <param name="timedOut">
A flag that represents whether the wrapper resolution request has timed out. 
If the request has timed out, the packagesToMergeInto reference is invalid and we shouldn't append
results into it.
</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.ResolveAllWrappers(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;System.Int32,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Wrapper!System.Runtime.CompilerServices.IsConst&gt;,std.less&lt;System.Int32&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Wrapper!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;&gt;,std.vector&lt;std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;,std.allocator&lt;std.vect">
            <summary>
Iterates through the map of wrappers to resolve and resolves them all into the resolvedPackages
</summary>
            <param name="context">The context to use</param>
            <param name="flags">The wrapper flags to use to resolve the packages with</param>
            <param name="wrappersToResolve">
The map of vectors to resolve. The key is the index of the resolved packages
vector to store the results into.
</param>
            <param name="resolvedPackages">The resolved packages to store the wrapper results into</param>
            <param name="depth">The current wrapper depth</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.HandleResolvedWrapperPackages(Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds the download, parsed, and resolved packages from a wrapper into a results vector.
If the wrapper's allow multiples flag is false, it only adds one of the
ad packages into the packagesToMergeInto; otherwise all of them arg
appended.
</summary>
            <param name="flags">The wrapper flags</param>
            <param name="packages">The packages resolved from the wrapper</param>
            <param name="packagesToMergeInto">The vector of packages to store the results into</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.RunPackageCallback(std.function&lt;(std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtim">
            <summary>
Helper to execute a callback if it's not null
</summary>
            <param name="callback">A callback to run if it's not null</param>
            <param name="args">The arguments to invoke the callback with</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.SetWrapperFlags(std.shared_ptr&lt;Microsoft.Advertising.Documents.UacWrapper!System.Runtime.CompilerServices.IsConst&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Create a WrapperFlags from a wrapper, using a wrapperFlags as a default
</summary>
            <param name="wrapper">The wrapper to pull flags from</param>
            <param name="flags">The flags to initialize the return value with</param>
            <returns>A wrapperflags created from the given wrapper</returns>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.FlattenPackages(std.vector&lt;std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;,std.allocator&lt;std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
The resolved packages is a vector of ad 'slots' that can end up as a vector of packages.
This is flattened out to a vector of packages
</summary>
            <param name="packages">A vector of vector of packages that have been resolved and need to be flattened</param>
            <returns>A vector of packages flattened out from the resolved packages</returns>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.ProcessWrapperResponse(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Wrapper!System.Runtime.CompilerServices.IsConst&gt;,std.function&lt;(std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;,std.shared_ptr&lt;Microsoft.Advertising.Net">
            <summary>
Parses the download VAST web response into a DOM. 
Recursively resolve the DOM into a set of ad packages.
Call the callback with the ad packages.
</summary>
            <param name="context">The context to use</param>
            <param name="wrapper">The wrapper that was requested</param>
            <param name="callback">The callback</param>
            <param name="response">The http response for the wrapper download</param>
            <param name="flags">The wrapper flags</param>
            <param name="depth">The current wrapper depth</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.ResolveWrapperIntoAdPackages(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Wrapper!System.Runtime.CompilerServices.IsConst&gt;,std.function&lt;(std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;,Microsoft.Advertising.Strict.Vast.">
            <summary>
Resolves a wrapper to a vector of ad packages, then calls the callback with those packages.
This can be invoked synchronously or asynchronously.
</summary>
            <param name="context">The context to use</param>
            <param name="wrapper">The wrapper to resolve</param>
            <param name="callback">The callback to execute once the wrapper has been resolved</param>
            <param name="flags">The wrapper flags to use when resolving this wrapper</param>
            <param name="depth">The current wrapper depth</param>
            <param name="async">True if this call needs to be run asynchronously; default false</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.ResolveInlines(std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;,std.vector&lt;std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;,std.allocator&lt;std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.MediaConstraints!System.Runtime.CompilerServices.IsConst&gt;,std.s">
            <summary>
Resolves any inline ads in the vector of ads to resolve and
returns a map of wrappers to resolve
</summary>
            <param name="adsToResolve">A vector of ads to resolve</param>
            <param name="resolvedPackages">When an ad package has been resolved, it is stored into this resolvedPackages</param>
            <returns>The map of wrappers to resolve</returns>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.GetAdsToResolve(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;System.Int64,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;,std.less&lt;System.Int64&gt;,std.allocator&lt;std.pair&lt;System.Int64!System.Runtime.CompilerServices.IsConst,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Document">
            <summary>
Based on the wrapper flags, figure out what ads need to be resolved
and return a vector of ads to resolve
</summary>
            <param name="ads">The set of input ads</param>
            <param name="pod">The pod ads to</param>
            <param name="buffet">The the buffet ads</param>
            <returns>The set of ads to resolve</returns>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.GetPodsAndBuffet(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;System.Int64,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;,std.less&lt;System.Int64&gt;,std.allocator&lt;std.pair&lt;System.Int64!System.Runtime.CompilerServices.">
            <summary>
Splits a given set of Ads into pod and buffet ads.
</summary>
            <param name="ads">The set of input ads</param>
            <param name="pod">The pod to add the pod ads to</param>
            <param name="buffet">The buffet to add the buffet ads to</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.ResolveIntoAdPackagesInternal(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.VAST!System.Runtime.CompilerServices.IsConst&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.MediaConstraints!System.Runtime.CompilerServices.IsConst&gt;,System.Int32)">
            <summary>
The internal method for resolving a VAST. This is called recursively when
resolving wrappers so it returns mutable packages to allow merging.
The public ResolveIntoPackages returns immutable IAdPackages, so they
cannot be modified.
</summary>
            <param name="context">The context to use</param>
            <param name="VAST">The VAST DOM to resolve</param>
            <param name="flags">The wrapper flags to use when resolving this VAST</param>
            <param name="depth">The current wrapper depth; defaults to zero</param>
            <returns>A vector of mutable AdPackages</returns>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.ResolveIntoAdPackages(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.VAST!System.Runtime.CompilerServices.IsConst&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.MediaConstraints!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Resolves a VAST DOM into a set of ad packages
</summary>
            <param name="context">The context to use</param>
            <param name="VAST">The VAST DOM to resolve</param>
            <param name="flags">The wrapper flags to use when resolving this VAST</param>
            <returns>A vector of immutable IAdPackages</returns>
        </member>
        <member name="T:Microsoft.Advertising.Strict.Vast.VastResolverStrict">
            <summary>
VastResolver takes a given VAST dom and converts it to a set of ad package boms.
it will resolve all wrappers and fire errors.
The methods are mostly static to make threading easier and safer.
Various timeout scenarios can cause the threads to run after the request may have expired
which would lead to access violations.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.WrapperFlags.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Constructor, sets the flags to the given values
</summary>
            <param name="follow">The value for the followAdditionalWrappers flag</param>
            <param name="allow">The value for the allowMultipleAds flag</param>
            <param name="fallback">The value for the fallbackOnNoAd flag</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.WrapperFlags.#ctor">
            <summary>
Constructor, sets all flags to true
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Strict.Vast.WrapperFlags">
            <summary>
WrapperFlags holds the three flags for resolving wrappers
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.UacDomFactory.GetVastVmapAutodetectVAST">
Link VAST/VMAP autodetect to our full Vast3 DOMs
</member>
        <member name="M:Microsoft.Advertising.Documents.UacDomFactory.GetVmapVAST">
Link the Vmap DOM "VAST" to Vast3 DOM.
</member>
        <member name="M:Microsoft.Advertising.Documents.UacDomFactory.GetVmapVASTAdData_type">
Override the Vmap::VASTAdData handler.
</member>
        <member name="M:Microsoft.Advertising.Documents.UacDomFactory.GetVmapAdSource">
Override the Vmap::AdSource handler.
</member>
        <member name="M:Microsoft.Advertising.Documents.UacDomFactory.GetVast3Extensions_type">
Link the Vast3 DOM "Extensions_type" to VastExtensions DOM.
</member>
        <member name="T:Microsoft.Advertising.Documents.UacDomFactory">
            <summary>
Override the default codegen'd behavior.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.UacVASTAdData">
            <summary>
Link the VMAP xsd codgen to the VAST3 xsd codegen. (Requires UacVmapFactory)
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.UacAdSource">
            <summary>
Mitigate VAST 3.0 specification bug, VASTData and VASTAdData are used in different parts of the spec
to refer to the same element. Some vendors have chosen to follow different parts. We treat the two names
as equal.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.CustomExtensions">
            <summary>
Custom extensions DOM connected.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.UacCreative">
            <summary>
Allow the Creative element to have no "Linear" elements (many unit tests currently require it).
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.UacWrapper">
            <summary>
Allow the Wrapper element to have no "Creatives" element
(many unit tests currently require it, but is not desirable for production).
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastVmapAutodetect.VastVmapAutodetectSchema.m_VastOrVmap">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastVmapAutodetect.VastVmapAutodetectSchema.GetVastOrVmap">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastVmapAutodetect.VastOrVmap.m_VMAP">
            <summary>
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
VMAP is a member of a choice group containing [VAST, VMAP] exactly 1 time
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastVmapAutodetect.VastOrVmap.m_VAST">
            <summary>
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
VAST is a member of a choice group containing [VAST, VMAP] exactly 1 time
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastVmapAutodetect.VastOrVmap.GetVMAP">
            <summary>
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
VMAP is a member of a choice group containing [VAST, VMAP] exactly 1 time
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastVmapAutodetect.VastOrVmap.GetVAST">
            <summary>
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
VAST is a member of a choice group containing [VAST, VMAP] exactly 1 time
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.VastExtensionsSchema.m_Extension">
            <summary>
UAC SDK supported extensions.
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.VastExtensionsSchema.GetExtension">
            <summary>
UAC SDK supported extensions.
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Extension.m_TrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
TrackingEvents is a member of a choice group containing [NuAd, Renderers, TrackingEvents] between 0 and 3 times
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Extension.m_Renderers">
            <summary>
The list of renderer URLs.
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
Renderers is a member of a choice group containing [NuAd, Renderers, TrackingEvents] between 0 and 3 times
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Extension.m_NuAd">
            <summary>
Represents a NuAd
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
NuAd is a member of a choice group containing [NuAd, Renderers, TrackingEvents] between 0 and 3 times
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Extension.m_type">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Extension.m_CreativeId">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Extension.GetTrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
TrackingEvents is a member of a choice group containing [NuAd, Renderers, TrackingEvents] between 0 and 3 times
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Extension.GetRenderers">
            <summary>
The list of renderer URLs.
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
Renderers is a member of a choice group containing [NuAd, Renderers, TrackingEvents] between 0 and 3 times
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Extension.GetNuAd">
            <summary>
Represents a NuAd
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
NuAd is a member of a choice group containing [NuAd, Renderers, TrackingEvents] between 0 and 3 times
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Extension.GetType">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Extension.GetCreativeId">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.TrackingEvents.m_Tracking">
            <summary>
The name of the event to track for the element. The creativeView should always be requested when present.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.TrackingEvents.GetTracking">
            <summary>
The name of the event to track for the element. The creativeView should always be requested when present.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Tracking.m_offset">
            <summary>
The time during the video at which this URL should be pinged. Must be present for progress event.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Tracking.m_event">
            <summary>
The name of the event to track. For nonlinear ads these events should be recorded on the video within the ad.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Tracking.GetOffset">
            <summary>
The time during the video at which this URL should be pinged. Must be present for progress event.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Tracking.GetEvent">
            <summary>
The name of the event to track. For nonlinear ads these events should be recorded on the video within the ad.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Renderers.m_Renderer">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Renderers.GetRenderer">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Renderer.m_platform">
            <summary>
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Renderer.GetPlatform">
            <summary>
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.NuAd.m_type">
            <summary>
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.NuAd.GetType">
            <summary>
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.VmapSchema.m_VMAP">
            <summary>
IAB VMAP, Video Multiple AD Playlist, Version 1.0, xml schema prepared by FreeWheel
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.VmapSchema.GetVMAP">
            <summary>
IAB VMAP, Video Multiple AD Playlist, Version 1.0, xml schema prepared by FreeWheel
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.VMAP.m_AdBreak">
            <summary>
Top-level element, represents a single ad break, but may allow for multiple ads
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.VMAP.m_version">
            <summary>
Current version is 1.0.1
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.VMAP.GetAdBreak">
            <summary>
Top-level element, represents a single ad break, but may allow for multiple ads
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.VMAP.GetVersion">
            <summary>
Current version is 1.0.1
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdBreak.m_TrackingEvents">
            <summary>
Container for tracking URIs for events specific to VMAP
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdBreak.m_Extensions">
            <summary>
Container for Extensions that express additional information not supported by VMAP
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdBreak.m_AdSource">
            <summary>
Represents the ad data that will be used to fill the ad break
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdBreak.m_timeOffset">
            <summary>
Represent the timing for the ad break. Expressed in one of four ways: (1)time format HH:MM:SS[.mmm], (2)n% (n is an integer from 0-100 and represents percentage of total duration from start to that point), (3)â€œstartâ€ or â€œendâ€, or (4) #m (m is an integer &gt; 0 and represents the position of the ad break opportunity)
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdBreak.m_repeatAfter">
            <summary>
Optional indicator that instructs the video player to repeat the same AdBreak and AdSource at time offsets equal to the duration value of this attribute. Expresssed in time format HH.MM.SS[.mmm]
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdBreak.m_breakType">
            <summary>
The type of ads allowed by the ad break: "linear", "nonlinear" or "display" (multiple types can be entered using a comma separator with no spaces). Intended to provide a "hint" to the player
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdBreak.m_breakId">
            <summary>
Optional identifier for the ad break
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdBreak.GetTrackingEvents">
            <summary>
Container for tracking URIs for events specific to VMAP
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdBreak.GetExtensions">
            <summary>
Container for Extensions that express additional information not supported by VMAP
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdBreak.GetAdSource">
            <summary>
Represents the ad data that will be used to fill the ad break
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdBreak.GetTimeOffset">
            <summary>
Represent the timing for the ad break. Expressed in one of four ways: (1)time format HH:MM:SS[.mmm], (2)n% (n is an integer from 0-100 and represents percentage of total duration from start to that point), (3)â€œstartâ€ or â€œendâ€, or (4) #m (m is an integer &gt; 0 and represents the position of the ad break opportunity)
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdBreak.GetRepeatAfter">
            <summary>
Optional indicator that instructs the video player to repeat the same AdBreak and AdSource at time offsets equal to the duration value of this attribute. Expresssed in time format HH.MM.SS[.mmm]
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdBreak.GetBreakType">
            <summary>
The type of ads allowed by the ad break: "linear", "nonlinear" or "display" (multiple types can be entered using a comma separator with no spaces). Intended to provide a "hint" to the player
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdBreak.GetBreakId">
            <summary>
Optional identifier for the ad break
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.TrackingEvents_type.m_Tracking">
            <summary>
URI to track for specified event type
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.TrackingEvents_type.GetTracking">
            <summary>
URI to track for specified event type
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.Tracking.m_event">
            <summary>
The name of the VMAP ad break level event to track
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.Tracking.GetEvent">
            <summary>
The name of the VMAP ad break level event to track
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.Extensions_type.m_Extension">
            <summary>
The XML content of the Extension. Extension XML must use its own namespace
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.Extensions_type.GetExtension">
            <summary>
The XML content of the Extension. Extension XML must use its own namespace
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.Extension.m_type">
            <summary>
The type of the extension. The type value must be globally unique. A URI is recommended
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.Extension.GetType">
            <summary>
The type of the extension. The type value must be globally unique. A URI is recommended
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdSource.m_VASTAdData">
            <summary>
A VAST 3.0 document that comprises the ad response document. Not contained within a CDATA. (There were are a couple of places where the VMAP 1.0 pdf incorrectly references both VASTData and VASTAdData but VASTAdData is the correct element per VMAP 1.0.1)
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
VASTAdData is a member of a choice group containing [AdTagURI, CustomAdData, VASTAdData] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdSource.m_CustomAdData">
            <summary>
An ad response document (included inline) that is not VAST 3.0
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
CustomAdData is a member of a choice group containing [AdTagURI, CustomAdData, VASTAdData] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdSource.m_AdTagURI">
            <summary>
URL to a secondary ad server that will provide the ad response. URL must be contained within a CDATA block
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
AdTagURI is a member of a choice group containing [AdTagURI, CustomAdData, VASTAdData] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdSource.m_id">
            <summary>
Identifier for the ad source
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdSource.m_followRedirects">
            <summary>
Whether the player should follow wrappers/redirects in the ad response document. If not specified, left to the video playerâ€™s discretion
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdSource.m_allowMultipleAds">
            <summary>
Indicates whether the player should select and play only a single ad from the ad response document, or play multiple ads. If not specified, video player accepts playing multiple ads in an ad break
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdSource.GetVASTAdData">
            <summary>
A VAST 3.0 document that comprises the ad response document. Not contained within a CDATA. (There were are a couple of places where the VMAP 1.0 pdf incorrectly references both VASTData and VASTAdData but VASTAdData is the correct element per VMAP 1.0.1)
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
VASTAdData is a member of a choice group containing [AdTagURI, CustomAdData, VASTAdData] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdSource.GetCustomAdData">
            <summary>
An ad response document (included inline) that is not VAST 3.0
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
CustomAdData is a member of a choice group containing [AdTagURI, CustomAdData, VASTAdData] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdSource.GetAdTagURI">
            <summary>
URL to a secondary ad server that will provide the ad response. URL must be contained within a CDATA block
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
AdTagURI is a member of a choice group containing [AdTagURI, CustomAdData, VASTAdData] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdSource.GetId">
            <summary>
Identifier for the ad source
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdSource.GetFollowRedirects">
            <summary>
Whether the player should follow wrappers/redirects in the ad response document. If not specified, left to the video playerâ€™s discretion
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdSource.GetAllowMultipleAds">
            <summary>
Indicates whether the player should select and play only a single ad from the ad response document, or play multiple ads. If not specified, video player accepts playing multiple ads in an ad break
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.VASTAdData_type.m_VAST">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.VASTAdData_type.GetVAST">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.CustomAdData_type.m_templateType">
            <summary>
The ad response template employed by the ad response document
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.CustomAdData_type.GetTemplateType">
            <summary>
The ad response template employed by the ad response document
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdTagURI_type.m_templateType">
            <summary>
The ad response template employed by the ad response document
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdTagURI_type.GetTemplateType">
            <summary>
The ad response template employed by the ad response document
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Vast3Schema.m_VAST">
            <summary>
IAB VAST, Video Ad Serving Template, video xml ad response, Version 3.0.0, xml schema prepared by Google
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Vast3Schema.GetVAST">
            <summary>
IAB VAST, Video Ad Serving Template, video xml ad response, Version 3.0.0, xml schema prepared by Google
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.VAST.m_Ad">
            <summary>
Top-level element, wraps each ad in the response
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.VAST.m_version">
            <summary>
Current version is 3.0.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.VAST.GetAd">
            <summary>
Top-level element, wraps each ad in the response
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.VAST.GetVersion">
            <summary>
Current version is 3.0.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Ad.m_Wrapper">
            <summary>
Second-level element surrounding wrapper ad pointing to Secondary ad server.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
Wrapper is a member of a choice group containing [InLine, Wrapper] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Ad.m_InLine">
            <summary>
Second-level element surrounding complete ad data for a single ad
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
InLine is a member of a choice group containing [InLine, Wrapper] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Ad.m_sequence">
            <summary>
Identifies the sequence of multiple Ads and defines an Ad Pod.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Ad.m_id">
            <summary>
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Ad.GetWrapper">
            <summary>
Second-level element surrounding wrapper ad pointing to Secondary ad server.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
Wrapper is a member of a choice group containing [InLine, Wrapper] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Ad.GetInLine">
            <summary>
Second-level element surrounding complete ad data for a single ad
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
InLine is a member of a choice group containing [InLine, Wrapper] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Ad.GetSequence">
            <summary>
Identifies the sequence of multiple Ads and defines an Ad Pod.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Ad.GetId">
            <summary>
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Wrapper.m_VASTAdTagURI">
            <summary>
URL of ad tag of downstream Secondary Ad Server
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Wrapper.m_Impression">
            <summary>
URL to request to track an impression
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Wrapper.m_Extensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Wrapper.m_Error">
            <summary>
URL to request if ad does not play due to error
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Wrapper.m_Creatives">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Wrapper.m_AdSystem">
            <summary>
Indicates source ad server
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Wrapper.GetVASTAdTagURI">
            <summary>
URL of ad tag of downstream Secondary Ad Server
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Wrapper.GetImpression">
            <summary>
URL to request to track an impression
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Wrapper.GetExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Wrapper.GetError">
            <summary>
URL to request if ad does not play due to error
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Wrapper.GetCreatives">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Wrapper.GetAdSystem">
            <summary>
Indicates source ad server
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creatives1.m_Creative">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creatives1.GetCreative">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative1.m_NonLinearAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
NonLinearAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative1.m_Linear">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
Linear is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative1.m_CompanionAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
CompanionAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative1.m_sequence">
            <summary>
The preferred order in which multiple Creatives should be displayed
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative1.m_id">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative1.m_AdID">
            <summary>
Ad-ID for the creative (formerly ISCI)
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative1.GetNonLinearAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
NonLinearAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative1.GetLinear">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
Linear is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative1.GetCompanionAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
CompanionAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative1.GetSequence">
            <summary>
The preferred order in which multiple Creatives should be displayed
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative1.GetId">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative1.GetAdID">
            <summary>
Ad-ID for the creative (formerly ISCI)
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearAds1.m_TrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearAds1.m_NonLinear">
            <summary>
Any number of companions in any desired pixel dimensions.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearAds1.GetTrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearAds1.GetNonLinear">
            <summary>
Any number of companions in any desired pixel dimensions.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_NonLinearClickTracking">
            <summary>
URLs to ping when user clicks on the the non-linear ad unit.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_CreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_width">
            <summary>
Pixel dimensions of companion
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_scalable">
            <summary>
Whether it is acceptable to scale the image.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_minSuggestedDuration">
            <summary>
Suggested duration to display non-linear ad, typically for animation to complete. Expressed in standard time format hh:mm:ss
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_maintainAspectRatio">
            <summary>
Whether the ad must have its aspect ratio maintained when scales
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_id">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_height">
            <summary>
Pixel dimensions of companion
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_expandedWidth">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_expandedHeight">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_apiFramework">
            <summary>
The apiFramework defines the method to use for communication with the nonlinear element
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetNonLinearClickTracking">
            <summary>
URLs to ping when user clicks on the the non-linear ad unit.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetCreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetWidth">
            <summary>
Pixel dimensions of companion
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetScalable">
            <summary>
Whether it is acceptable to scale the image.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetMinSuggestedDuration">
            <summary>
Suggested duration to display non-linear ad, typically for animation to complete. Expressed in standard time format hh:mm:ss
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetMaintainAspectRatio">
            <summary>
Whether the ad must have its aspect ratio maintained when scales
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetId">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetHeight">
            <summary>
Pixel dimensions of companion
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetExpandedWidth">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetExpandedHeight">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetApiFramework">
            <summary>
The apiFramework defines the method to use for communication with the nonlinear element
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear1.m_VideoClicks">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear1.m_TrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear1.m_Icons">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear1.m_CreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear1.GetVideoClicks">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear1.GetTrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear1.GetIcons">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear1.GetCreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.VideoClicks.m_CustomClick">
            <summary>
URLs to request on custom events such as hotspotted video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.VideoClicks.m_ClickTracking">
            <summary>
URL to request for tracking purposes when user clicks on the video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.VideoClicks.GetCustomClick">
            <summary>
URLs to request on custom events such as hotspotted video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.VideoClicks.GetClickTracking">
            <summary>
URL to request for tracking purposes when user clicks on the video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionAds1.m_Companion">
            <summary>
Definition of Companion ad, if served separately
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionAds1.GetCompanion">
            <summary>
Definition of Companion ad, if served separately
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_StaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] between 0 and 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_IFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] between 0 and 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_HTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] between 0 and 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_TrackingEvents">
            <summary>
The creativeView should always be requested when present. For Companions creativeView is the only supported event.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_CreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_CompanionClickTracking">
            <summary>
URLs to ping when user clicks on the the companion banner ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_CompanionClickThrough">
            <summary>
URL to open as destination page when user clicks on the the companion banner ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_AltText">
            <summary>
Alt text to be displayed when companion is rendered in HTML environment.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_AdParameters">
            <summary>
Data to be passed into the companion ads. The apiFramework defines the method to use for communication (e.g. â€œFlashVarâ€)
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_width">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_id">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_height">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_expandedWidth">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_expandedHeight">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_assetWidth">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_assetHeight">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_apiFramework">
            <summary>
The apiFramework defines the method to use for communication with the companion
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_adSlotId">
            <summary>
Used to match companion creative to publisher placement areas on the page.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetTrackingEvents">
            <summary>
The creativeView should always be requested when present. For Companions creativeView is the only supported event.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetStaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] between 0 and 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetIFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] between 0 and 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetHTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] between 0 and 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetCreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetCompanionClickTracking">
            <summary>
URLs to ping when user clicks on the the companion banner ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetCompanionClickThrough">
            <summary>
URL to open as destination page when user clicks on the the companion banner ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetAltText">
            <summary>
Alt text to be displayed when companion is rendered in HTML environment.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetAdParameters">
            <summary>
Data to be passed into the companion ads. The apiFramework defines the method to use for communication (e.g. â€œFlashVarâ€)
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetWidth">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetId">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetHeight">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetExpandedWidth">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetExpandedHeight">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetAssetWidth">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetAssetHeight">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetApiFramework">
            <summary>
The apiFramework defines the method to use for communication with the companion
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetAdSlotId">
            <summary>
Used to match companion creative to publisher placement areas on the page.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Survey">
            <summary>
URL of request to survey vendor
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Pricing">
            <summary>
The price of the ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Impression">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Extensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Error">
            <summary>
URL to request if ad does not play due to error
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Description">
            <summary>
Longer description of ad
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Creatives">
            <summary>
Contains all creative elements within an InLine or Wrapper Ad
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Advertiser">
            <summary>
Common name of advertiser
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_AdTitle">
            <summary>
Common name of ad
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_AdSystem">
            <summary>
Indicates source ad server
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetSurvey">
            <summary>
URL of request to survey vendor
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetPricing">
            <summary>
The price of the ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetImpression">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetError">
            <summary>
URL to request if ad does not play due to error
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetDescription">
            <summary>
Longer description of ad
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetCreatives">
            <summary>
Contains all creative elements within an InLine or Wrapper Ad
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetAdvertiser">
            <summary>
Common name of advertiser
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetAdTitle">
            <summary>
Common name of ad
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetAdSystem">
            <summary>
Indicates source ad server
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Pricing.m_model">
            <summary>
The pricing model used.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Pricing.m_currency">
            <summary>
The currency of the pricing.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Pricing.GetModel">
            <summary>
The pricing model used.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Pricing.GetCurrency">
            <summary>
The currency of the pricing.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Impression_type.m_id">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Impression_type.GetId">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Extensions_type.m_Extension">
            <summary>
Any valid XML may be included in the Extensions node
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Extensions_type.GetExtension">
            <summary>
Any valid XML may be included in the Extensions node
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Extension.m_type">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Extension.m_CreativeId">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Extension.GetType">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Extension.GetCreativeId">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creatives.m_Creative">
            <summary>
Wraps each creative element within an InLine or Wrapper Ad
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creatives.GetCreative">
            <summary>
Wraps each creative element within an InLine or Wrapper Ad
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative.m_NonLinearAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
NonLinearAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative.m_Linear">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
Linear is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative.m_CompanionAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
CompanionAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative.m_sequence">
            <summary>
The preferred order in which multiple Creatives should be displayed
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative.m_id">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative.m_AdID">
            <summary>
Ad-ID for the creative (formerly ISCI)
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative.GetNonLinearAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
NonLinearAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative.GetLinear">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
Linear is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative.GetCompanionAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
CompanionAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative.GetSequence">
            <summary>
The preferred order in which multiple Creatives should be displayed
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative.GetId">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative.GetAdID">
            <summary>
Ad-ID for the creative (formerly ISCI)
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearAds.m_TrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearAds.m_NonLinear">
            <summary>
Any number of companions in any desired pixel dimensions.
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearAds.GetTrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearAds.GetNonLinear">
            <summary>
Any number of companions in any desired pixel dimensions.
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_StaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_IFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_HTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_NonLinearClickTracking">
            <summary>
URLs to ping when user clicks on the the non-linear ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_NonLinearClickThrough">
            <summary>
URL to open as destination page when user clicks on the non-linear ad unit.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_CreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_AdParameters">
            <summary>
Data to be passed into the video ad. 
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_width">
            <summary>
Pixel dimensions of companion
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_scalable">
            <summary>
Whether it is acceptable to scale the image.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_minSuggestedDuration">
            <summary>
Suggested duration to display non-linear ad, typically for animation to complete. Expressed in standard time format hh:mm:ss
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_maintainAspectRatio">
            <summary>
Whether the ad must have its aspect ratio maintained when scales
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_id">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_height">
            <summary>
Pixel dimensions of companion
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_expandedWidth">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_expandedHeight">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_apiFramework">
            <summary>
The apiFramework defines the method to use for communication with the nonlinear element
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetStaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetNonLinearClickTracking">
            <summary>
URLs to ping when user clicks on the the non-linear ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetNonLinearClickThrough">
            <summary>
URL to open as destination page when user clicks on the non-linear ad unit.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetIFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetHTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetCreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetAdParameters">
            <summary>
Data to be passed into the video ad. 
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetWidth">
            <summary>
Pixel dimensions of companion
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetScalable">
            <summary>
Whether it is acceptable to scale the image.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetMinSuggestedDuration">
            <summary>
Suggested duration to display non-linear ad, typically for animation to complete. Expressed in standard time format hh:mm:ss
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetMaintainAspectRatio">
            <summary>
Whether the ad must have its aspect ratio maintained when scales
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetId">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetHeight">
            <summary>
Pixel dimensions of companion
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetExpandedWidth">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetExpandedHeight">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetApiFramework">
            <summary>
The apiFramework defines the method to use for communication with the nonlinear element
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_VideoClicks">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_TrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_MediaFiles">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_Icons">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_Duration">
            <summary>
Duration in standard time format, hh:mm:ss
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_CreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_AdParameters">
            <summary>
Data to be passed into the video ad
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_skipoffset">
            <summary>
The time at which the ad becomes skippable, if absent, the ad is not skippable.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetVideoClicks">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetTrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetMediaFiles">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetIcons">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetDuration">
            <summary>
Duration in standard time format, hh:mm:ss
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetCreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetAdParameters">
            <summary>
Data to be passed into the video ad
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetSkipoffset">
            <summary>
The time at which the ad becomes skippable, if absent, the ad is not skippable.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.VideoClicks_type.m_CustomClick">
            <summary>
URLs to request on custom events such as hotspotted video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.VideoClicks_type.m_ClickTracking">
            <summary>
URL to request for tracking purposes when user clicks on the video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.VideoClicks_type.m_ClickThrough">
            <summary>
URL to open as destination page when user clicks on the video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.VideoClicks_type.GetCustomClick">
            <summary>
URLs to request on custom events such as hotspotted video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.VideoClicks_type.GetClickTracking">
            <summary>
URL to request for tracking purposes when user clicks on the video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.VideoClicks_type.GetClickThrough">
            <summary>
URL to open as destination page when user clicks on the video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CustomClick.m_id">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CustomClick.GetId">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.ClickTracking.m_id">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.ClickTracking.GetId">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.ClickThrough.m_id">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.ClickThrough.GetId">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFiles.m_MediaFile">
            <summary>
Location of linear file
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFiles.GetMediaFile">
            <summary>
Location of linear file
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_width">
            <summary>
Pixel dimensions of video
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_type">
            <summary>
MIME type. Popular MIME types include, but are not limited to â€œvideo/x-ms-wmvâ€ for Windows Media, and â€œvideo/x-flvâ€ for Flash Video. Image ads or interactive ads can be included in the MediaFiles section with appropriate Mime                                                          types
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_scalable">
            <summary>
Whether it is acceptable to scale the image.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_minBitrate">
            <summary>
Minimum bitrate of an adaptive stream in Kbps. If minBitrate is supplied, maxBitrate must be supplied and bitrate should not be supplied.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_maxBitrate">
            <summary>
Maximum bitrate of an adaptive stream in Kbps. If maxBitrate is supplied, minBitrate must be supplied and bitrate should not be supplied.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_maintainAspectRatio">
            <summary>
Whether the ad must have its aspect ratio maintained when scales
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_id">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_height">
            <summary>
Pixel dimensions of video
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_delivery">
            <summary>
Method of delivery of ad
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_codec">
            <summary>
The codec used to produce the media file.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_bitrate">
            <summary>
Bitrate of encoded video in Kbps. If bitrate is supplied, minBitrate and maxBitrate should not be supplied.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_apiFramework">
            <summary>
The apiFramework defines the method to use for communication if the MediaFile is interactive. Suggested values for this element are â€œVPAIDâ€, â€œFlashVarsâ€ (for Flash/Flex), â€œinitParamsâ€ (for Silverlight) and â€œGetVariablesâ€                                                          (variables placed in key/value pairs on the asset request).
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetWidth">
            <summary>
Pixel dimensions of video
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetType">
            <summary>
MIME type. Popular MIME types include, but are not limited to â€œvideo/x-ms-wmvâ€ for Windows Media, and â€œvideo/x-flvâ€ for Flash Video. Image ads or interactive ads can be included in the MediaFiles section with appropriate Mime                                                          types
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetScalable">
            <summary>
Whether it is acceptable to scale the image.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetMinBitrate">
            <summary>
Minimum bitrate of an adaptive stream in Kbps. If minBitrate is supplied, maxBitrate must be supplied and bitrate should not be supplied.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetMaxBitrate">
            <summary>
Maximum bitrate of an adaptive stream in Kbps. If maxBitrate is supplied, minBitrate must be supplied and bitrate should not be supplied.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetMaintainAspectRatio">
            <summary>
Whether the ad must have its aspect ratio maintained when scales
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetId">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetHeight">
            <summary>
Pixel dimensions of video
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetDelivery">
            <summary>
Method of delivery of ad
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetCodec">
            <summary>
The codec used to produce the media file.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetBitrate">
            <summary>
Bitrate of encoded video in Kbps. If bitrate is supplied, minBitrate and maxBitrate should not be supplied.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetApiFramework">
            <summary>
The apiFramework defines the method to use for communication if the MediaFile is interactive. Suggested values for this element are â€œVPAIDâ€, â€œFlashVarsâ€ (for Flash/Flex), â€œinitParamsâ€ (for Silverlight) and â€œGetVariablesâ€                                                          (variables placed in key/value pairs on the asset request).
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icons.m_Icon">
            <summary>
Any number of icons representing advertising industry initiatives.
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icons.GetIcon">
            <summary>
Any number of icons representing advertising industry initiatives.
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_StaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_IFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_HTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_IconViewTracking">
            <summary>
URLs to ping when icon is shown.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_IconClicks">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_yPosition">
            <summary>
The vertical alignment location (in pixels) or a specific alignment.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_xPosition">
            <summary>
The horizontal alignment location (in pixels) or a specific alignment.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_width">
            <summary>
Pixel dimensions of icon.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_program">
            <summary>
Identifies the industry initiative that the icon supports.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_offset">
            <summary>
Start time at which the player should display the icon. Expressed in standard time format hh:mm:ss.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_height">
            <summary>
Pixel dimensions of icon.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_duration">
            <summary>
The duration for which the player must display the icon. Expressed in standard time format hh:mm:ss.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_apiFramework">
            <summary>
The apiFramework defines the method to use for communication with the icon element
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetStaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetIFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetIconViewTracking">
            <summary>
URLs to ping when icon is shown.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetIconClicks">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetHTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetYPosition">
            <summary>
The vertical alignment location (in pixels) or a specific alignment.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetXPosition">
            <summary>
The horizontal alignment location (in pixels) or a specific alignment.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetWidth">
            <summary>
Pixel dimensions of icon.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetProgram">
            <summary>
Identifies the industry initiative that the icon supports.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetOffset">
            <summary>
Start time at which the player should display the icon. Expressed in standard time format hh:mm:ss.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetHeight">
            <summary>
Pixel dimensions of icon.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetDuration">
            <summary>
The duration for which the player must display the icon. Expressed in standard time format hh:mm:ss.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetApiFramework">
            <summary>
The apiFramework defines the method to use for communication with the icon element
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.IconClicks.m_IconClickTracking">
            <summary>
URLs to ping when user clicks on the the icon.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.IconClicks.m_IconClickThrough">
            <summary>
URL to open as destination page when user clicks on the icon.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.IconClicks.GetIconClickTracking">
            <summary>
URLs to ping when user clicks on the the icon.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.IconClicks.GetIconClickThrough">
            <summary>
URL to open as destination page when user clicks on the icon.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionAds.m_Companion">
            <summary>
Any number of companions in any desired pixel dimensions.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionAds.m_required">
            <summary>
Provides information about which companion creative to display. All means that the player must attempt to display all. Any means the player must attempt to play at least one. None means all companions are optional.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionAds.GetCompanion">
            <summary>
Any number of companions in any desired pixel dimensions.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionAds.GetRequired">
            <summary>
Provides information about which companion creative to display. All means that the player must attempt to display all. Any means the player must attempt to play at least one. None means all companions are optional.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_StaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_IFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_HTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_TrackingEvents">
            <summary>
The creativeView should always be requested when present. For Companions creativeView is the only supported event.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_CreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_CompanionClickThrough">
            <summary>
URL to open as destination page when user clicks on the the companion banner ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_AltText">
            <summary>
Alt text to be displayed when companion is rendered in HTML environment.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_AdParameters">
            <summary>
Data to be passed into the companion ads. The apiFramework defines the method to use for communication (e.g. â€œFlashVarâ€)
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_width">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_id">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_height">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_expandedWidth">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_expandedHeight">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_assetWidth">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_assetHeight">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_apiFramework">
            <summary>
The apiFramework defines the method to use for communication with the companion
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_adSlotId">
            <summary>
Used to match companion creative to publisher placement areas on the page.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetTrackingEvents">
            <summary>
The creativeView should always be requested when present. For Companions creativeView is the only supported event.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetStaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetIFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetHTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetCreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetCompanionClickThrough">
            <summary>
URL to open as destination page when user clicks on the the companion banner ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetAltText">
            <summary>
Alt text to be displayed when companion is rendered in HTML environment.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetAdParameters">
            <summary>
Data to be passed into the companion ads. The apiFramework defines the method to use for communication (e.g. â€œFlashVarâ€)
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetWidth">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetId">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetHeight">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetExpandedWidth">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetExpandedHeight">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetAssetWidth">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetAssetHeight">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetApiFramework">
            <summary>
The apiFramework defines the method to use for communication with the companion
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetAdSlotId">
            <summary>
Used to match companion creative to publisher placement areas on the page.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.TrackingEvents_type.m_Tracking">
            <summary>
The name of the event to track for the element. The creativeView should always be requested when present.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.TrackingEvents_type.GetTracking">
            <summary>
The name of the event to track for the element. The creativeView should always be requested when present.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Tracking.m_offset">
            <summary>
The time during the video at which this url should be pinged. Must be present for progress event.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Tracking.m_event">
            <summary>
The name of the event to track. For nonlinear ads these events should be recorded on the video within the ad.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Tracking.GetOffset">
            <summary>
The time during the video at which this url should be pinged. Must be present for progress event.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Tracking.GetEvent">
            <summary>
The name of the event to track. For nonlinear ads these events should be recorded on the video within the ad.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.StaticResource.m_creativeType">
            <summary>
Mime type of static resource
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.StaticResource.GetCreativeType">
            <summary>
Mime type of static resource
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.HTMLResource_type.m_xmlEncoded">
            <summary>
Specifies whether the HTML is XML-encoded
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.HTMLResource_type.GetXmlEncoded">
            <summary>
Specifies whether the HTML is XML-encoded
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CreativeExtensions_type.m_CreativeExtension">
            <summary>
Any valid XML may be included in the Extensions node
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CreativeExtensions_type.GetCreativeExtension">
            <summary>
Any valid XML may be included in the Extensions node
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.AdParameters_type.m_xmlEncoded">
            <summary>
Specifies whether the parameters are XML-encoded
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.AdParameters_type.GetXmlEncoded">
            <summary>
Specifies whether the parameters are XML-encoded
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.AdSystem_type.m_version">
            <summary>
Internal version used by ad system
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.AdSystem_type.GetVersion">
            <summary>
Internal version used by ad system
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.SAXParser.EscapeToXml(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Escapes a given string for to XML
</summary>
            <param name="value">The string to convert</param>
            <returns>The escaped string</returns>
        </member>
        <member name="T:Microsoft.Advertising.Documents.NullSAXParserHandler">
            <summary>
This is a concrete implementation of ISAXParserHandler that doesn't do anything in its callback handlers
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.ISAXParserHandler">
            <summary>
This interface handles parsing events from SAXParser
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleStrictAsync(System.String,System.UInt32,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Microsoft.Advertising.Shared.WinRT.ProjectedMediaConstraints)">
            <summary>
Retrieves an ad delivery schedule using strict VAST 3 rules
</summary>
            <param name="serviceUrl">Url to use to request manifest</param>
            <param name="timeoutMS">milliseconds to wait before cancelling opteration</param>
            <param name="context">context to use for requests</param>
            <param name="mediaConstraints">media constraints to be applied to the returned media files</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleAsync(System.String,System.UInt32,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Retreives an ad delivery schedule with ability to pass in context.
<param name="serviceUrl">Url to use to request manifest</param><param name="timeoutMS">milliseconds to wait before cancelling opteration</param><param name="adTags">appeneded to the ad request url</param><param name="context">the context to use for requests</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleStrictAsync(System.String,System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.SdkType,Microsoft.Advertising.Shared.WinRT.AdTagCollection,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Microsoft.Advertising.Shared.WinRT.ProjectedMediaConstraints)">
            <summary>
Retrieves an ad delivery schedule using strict VAST 3 rules
<param name="appId">Application Id</param><param name="adId">Ad Unit Id</param><param name="timeoutMS">milliseconds to wait before cancelling opteration</param><param name="sdkType">the type of the SDK.</param><param name="adTags">appeneded to the ad request url</param><param name="context">the context to use for requests</param><param name="mediaConstraints">media constraints to be applied to the returned media files</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleAsync(System.String,System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.SdkType,Microsoft.Advertising.Shared.WinRT.AdTagCollection,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Retreives an ad delivery schedule with ability to pass in context.
<param name="appId">Application Id</param><param name="adId">Ad Unit Id</param><param name="timeoutMS">milliseconds to wait before cancelling opteration</param><param name="sdkType">the type of the SDK.</param><param name="adTags">appeneded to the ad request url</param><param name="context">the context to use for requests</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleStrictAsync(System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.ProjectedMediaConstraints)">
            <summary>
Retrieves an ad delivery schedule using strict VAST 3 rules
<param name="serviceUrl">Url to use to request manifest</param><param name="timeoutMS">milliseconds to wait before cancelling opteration</param><param name="mediaConstraints">media constraints to be applied to the returned media files</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleAsync(System.String,System.UInt32)">
            <summary>
Retrieves an ad delivery schedule 
<param name="serviceUrl">Url to use to request manifest</param><param name="timeoutMS">milliseconds to wait before cancelling operation</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleStrictAsync(System.String,System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.SdkType,Microsoft.Advertising.Shared.WinRT.AdTagCollection,Microsoft.Advertising.Shared.WinRT.ProjectedMediaConstraints)">
            <summary>
Retrieves an ad delivery schedule using strict VAST 3 rules
<param name="appId">Application Id</param><param name="adId">Ad Unit Id</param><param name="timeoutMS">milliseconds to wait before cancelling opteration</param><param name="sdkType">the type of the SDK.</param><param name="adTags">appended to the ad request url</param><param name="mediaConstraints">media constraints to be applied to the returned media files</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleAsync(System.String,System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.SdkType,Microsoft.Advertising.Shared.WinRT.AdTagCollection)">
            <summary>
Retrieves an ad delivery schedule 
<param name="appId">Application Id</param><param name="adId">Ad Unit Id</param><param name="timeoutMS">milliseconds to wait before cancelling opteration</param><param name="sdkType">the type of the SDK.</param><param name="adTags">appended to the ad request url</param></summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.AdScheduler">
            <summary>
Entry point for a schedule based Ad response
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdScheduleResult.Value">
            <summary>
The ad schedule if the operation was successful
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdScheduleResult.Error">
            <summary>
The error that occurred, if any
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.AdScheduleResult">
            <summary>
Holds any error that occurred getting an AdSchedule or 
the AdSchedule if the operation was successful
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AdSchedulePlacement.CreateAdPackageFromInLineElement(Microsoft.Advertising.Vast.InLine,Microsoft.Advertising.Vast.AdSource)">
            <summary>
Create an ad package from a given inline Ad
</summary>
            <param name="inLine">The inline xml node</param>
            <param name="adSource">The adsource vast element to create the package from</param>
            <returns>
nullptr if the adsource was valid VAST but had no ad information. 
Throws an exception if there was an error with the VAST.
Otherwise returns an adpackage to be added to the pod.
</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AdSchedulePlacement.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Microsoft.Advertising.Shared.AdType,Microsoft.Advertising.Shared.WinRT.SdkType,Windows.Foundation.Collections.IMap`2{System.String^,System.String^},std.shared_ptr&lt;Micro">
Private constructor - the public interface exposes a static create method.
</member>
        <member name="T:Microsoft.Advertising.Shared.AdSchedulePlacement">
The AdSchedulePlacement class represents an ad schedule within an application
</member>
        <member name="P:Microsoft.Advertising.Vast.VMAP.Version">
            <summary>
Version of the manifest
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.VMAP.Breaks">
            <summary>
List of AdBreaks
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VMAP.#ctor(System.String)">
            <summary>
Constructor
<param name="version">VMAP version</param></summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.VMAP">
            <summary>
Class representing a VMAP Manifest
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdBreak.TrackingEvents">
            <summary>
Tracking events, [0..*]
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.AdBreak.#ctor(System.String,System.String,System.String)">
            <summary>
Constructor
<param name="timeOffset">Time to start playing break</param><param name="breakId">Id of the break</param><param name="repeatAfter">Time to wait before repeating break</param></summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdBreak.AdSource">
            <summary>
List of AdSources
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdBreak.RepeatAfter">
            <summary>
Time to wait before repeating break
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdBreak.BreakId">
            <summary>
Id of the break
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdBreak.TimeOffset">
            <summary>
Time to start playing break
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.AdBreak">
            <summary>
Class representing an AdBreak element of a VMAP
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdSource.VastData">
            <summary>
Vast data
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.AdSource.#ctor(System.String)">
            <summary>
                <param name="id">Id of Source</param>
            </summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.AdSource.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
                <param name="id">Id of Source</param>
                <param name="allowMultiple">Flag to allow multiple ads to play</param>
                <param name="followRedirects">Flag to allow redirects</param>
            </summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdSource.FollowRedirects">
            <summary>
Flag to allow redirects
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdSource.AllowMultipleAds">
            <summary>
Flag to allow multiple ads to play
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdSource.Id">
            <summary>
Id of Source
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.AdSource">
            <summary>
Class representing an AdSource element of an AdBreak
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.VAST.Version">
            <summary>
vast version, this field is required
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.VAST.Ad">
            <summary>
There may be [0..*] child 'Ad' elements of a vast document
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VAST.#ctor">
            <summary>
constructor for vast object,
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.VAST">
            <summary>
class that represents the root element of a vast document
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Ad.Sequence">
            <summary>
Identifies the sequence of multiple Ads and defines an Ad Pod, optional.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Ad.Id">
            <summary>
ad element id, optional
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Ad.InLine">
            <summary>
An InLine element
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.Ad">
            <summary>
Top-level element, wraps each ad in the response
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdSchedule.Pods">
            <summary>
AdPods in the AdScheduler
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.AdSchedule">
            <summary>
Class representing an AdSchedule which contains a list of AdPods
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.InLine.NUad">
            <summary>
A NUad object
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.InLine.Extensions">
            <summary>
Information about extentions, [0..1]
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.InLine.Creatives">
            <summary>
TODO: is this [1..*] or [0..*]?!
Contains all creative elements within an InLine or Wrapper Ad, [1..*] 
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.InLine.Impression">
            <summary>
Contains all impression elements within an InLine or Wrapper Ad, [1..*]
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.InLine.Error">
            <summary>
Optional URL to request if ad does not play due to error
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.InLine.AdTitle">
            <summary>
Common name of ad, will treat as optional even though IAB Spec says required
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.InLine.AdSystem">
            <summary>
Indicates source ad server, will treat as optional even though IAB Spec says required
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.InLine.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.InLine">
            <summary>
Second-level element surrounding complete ad data for a single ad
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.ImpressionType.Value">
            <summary>
impression url, required
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.ImpressionType.Id">
            <summary>
id for the impression url, optional
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.ImpressionType">
            <summary>
container for impression urls
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.LinearCreative.ClickThroughUrl">
            <summary>
The click through url for the video clicks tag, should it exist
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.LinearCreative.Duration">
            <summary>
Duration in standard time format, hh:mm:ss, required
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.LinearCreative.Skipoffset">
            <summary>
The time at which the ad becomes skippable, if absent, the ad is not skippable, optional
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.LinearCreative.TrackingEvents">
            <summary>
Tracking events, [0..*]
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.LinearCreative.MediaFiles">
            <summary>
Media files [0..*]
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.LinearCreative.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.LinearCreative">
            <summary>
Container for Linear creative ads
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.MaintainAspectRatio">
            <summary>
Whether the ad must have its aspect ratio maintained when scales, optional, defaults to false
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Scalable">
            <summary>
Sepcifies whether the media is meant to scale to large dimensions, Optional, Defaults to true
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Codec">
            <summary>
Codec used to encode the file
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Value">
            <summary>
URI to the media file
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.ApiFramework">
            <summary>
The apiFramework defines the method to use for communication if the MediaFile
is interactive. Suggested values for this element are "VPAID", "FlashVars" (for 
Flash/Flex), "initParams" (for Silverlight) and "GetVariables" (variables placed
in key/value pairs on the asset request), optional.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.MaxBitrate">
            <summary>
Maximum bitrate of an adaptive stream in Kbps. If maxBitrate is supplied, minBitrate must be
supplied and bitrate should not be supplied, optional
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.MinBitrate">
            <summary>
Minimum bitrate of an adaptive stream in Kbps. If minBitrate is supplied, maxBitrate must be
supplied and bitrate should not be supplied, optional
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Bitrate">
            <summary>
Bitrate of encoded video in Kbps. If bitrate is supplied, minBitrate and maxBitrate should not be 
supplied, optional
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Id">
            <summary>
Optional identifier
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Type">
            <summary>
MIME type. Popular MIME types include, but are not limited to "video/x-ms-wmv" for Windows Media,
and "video/x-flv" for Flash Video. Image ads or interactive ads can be included in the MediaFiles
section with appropriate Mime types, required.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Delivery">
            <summary>
Method of delivery of ad, required
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Height">
            <summary>
Pixel dimensions of video, required
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Width">
            <summary>
Pixel dimensions of video, required
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.MediaFile">
            <summary>
Location of linear file
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Creative.AdID">
            <summary>
Ad-ID for the creative (formerly ISCI), optional.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Creative.Sequence">
            <summary>
The preferred order in which multiple Creatives should be displayed, optional
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Creative.Id">
            <summary>
id of the creative, optional.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Creative.Item">
            <summary>
container for either a Linear, CompanionAds or NonLinearAds, optionals(?)
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.Creative">
            <summary>
Wraps each creative element within an InLine or Wrapper Ad
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdSystemType.Value">
            <summary>
value of the ad system
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdSystemType.Version">
            <summary>
Internal version used by ad system, optional
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.AdSystemType">
            <summary>
Indicates source ad server
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPod.AddPackage(Microsoft.Advertising.Shared.WinRT.AdPackage)">
            <summary>
Add an AdPackage to the list
</summary>
            <param name="package">The packages to add to this pod</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPod.#ctor(System.String,System.String,System.String,System.Collections.Vector&lt;Microsoft.Advertising.Vast.TrackingEvent^,std.equal_to&lt;Microsoft.Advertising.Vast.TrackingEvent^&gt;,true&gt;,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Constructor
<param name="breakId">Id of the ad break</param><param name="time">Start time of the ad break</param><param name="m_repeatAfter">Optional parameter to specify when to repeat the ad break</param><param name="events">The tracking events for this pod</param><param name="context">The context for this request</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPod.ReportAsync(System.String,Windows.Foundation.Collections.IMapView`2{System.String^,System.Object^})">
            <summary>
Report an activity, JS version
</summary>
            <param name="activity">Type of activity to report on</param>
            <param name="macros">The macros for this activity</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPod.ReportAsync(System.String,Windows.Foundation.Collections.IMapView`2{System.String^,System.String^})">
            <summary>
Report an activity
</summary>
            <param name="activity">Type of activity to report on</param>
            <param name="macros">The macros for this activity</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPod.ReportAsync(System.String)">
            <summary>
Report an activity
</summary>
            <param name="activity">Type of activity to report on</param>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPod.Packages">
            <summary>
AdPackages in the AdPod
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPod.RepeatAfter">
            <summary>
Time to repeat the same AdBreak, Optional.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPod.Id">
            <summary>
The id of the Break
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPod.Time">
            <summary>
The time to start displaying package
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.AdPod">
            <summary>
Class representing an AdPod which contains a list of AdPackages
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPackage.AddExtension(Microsoft.Advertising.Shared.WinRT.AdExtension)">
            <summary>
Add an AdExtension to the AdPackage
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPackage.AddVideoResource(Microsoft.Advertising.Shared.WinRT.VideoResource)">
            <summary>
Add a Video Resource to the AdPackage
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPackage.#ctor(System.String,System.String,System.String,System.Collections.Vector&lt;Microsoft.Advertising.Vast.TrackingEvent^,std.equal_to&lt;Microsoft.Advertising.Vast.TrackingEvent^&gt;,true&gt;,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Constructor
<param name="duration">Duration of media</param><param name="skipOffset">Length the media must be played before it can be skipped</param><param name="clickThroughUrl">The clickthrough url, if any</param><param name="events">List of activity events</param><param name="context">The context for this request</param></summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPackage.FollowRedirects">
            <summary>
Flag to allow redirects
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPackage.AllowMultipleAds">
            <summary>
Flag to allow multiple ads to play
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPackage.ReportAsync(System.String,Windows.Foundation.Collections.IMapView`2{System.String^,System.Object^})">
            <summary>
Report an activity, JS version
</summary>
            <param name="activity">Type of activity to report on</param>
            <param name="macros">The macros for this activity</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPackage.ReportAsync(System.String,Windows.Foundation.Collections.IMapView`2{System.String^,System.String^})">
            <summary>
Report an activity
</summary>
            <param name="activity">Type of activity to report on</param>
            <param name="macros">The macros for this activity</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPackage.ReportAsync(System.String)">
            <summary>
Report an activity
</summary>
            <param name="activity">Type of activity to report on</param>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPackage.SkipOffset">
            <summary>
Length the media must be played before it can be skipped
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPackage.Duration">
            <summary>
Duration of the Media
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPackage.AdExtensions">
            <summary>
Ad Extensions in the Package
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPackage.Video">
            <summary>
Video Resources in the Package
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.AdPackage">
            <summary>
Class representing an AdPackage
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.Extension.#ctor(Microsoft.Advertising.Vast.ExtensionsType,System.String)">
            <summary>
Constructor
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Extension.XmlData">
            <summary>
Xml data contained within the extension element
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Extension.Type">
            <summary>
Type of extension
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.Extension">
            <summary>
Vast Extension data
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.ExtensionsType">
            <summary>
Enumeration of valid Extension types
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.NUad.ExpectedHash">
            <summary>
This is the expected SHA512 hash of the renderer
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.NUad.#ctor(System.String,System.String,System.String,System.Collections.Vector&lt;Microsoft.Advertising.Vast.TrackingEvent^,std.equal_to&lt;Microsoft.Advertising.Vast.TrackingEvent^&gt;,true&gt;,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Constructor
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.NUad.RendererUrl">
            <summary>
This is the url for the nuad renderer
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.NUad.ReportAsync(System.String,Windows.Foundation.Collections.IMapView`2{System.String^,System.Object^})">
            <summary>
Report an activity, JS version
</summary>
            <param name="activity">Type of activity to report on</param>
            <param name="macros">The macros for this activity</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.NUad.ReportAsync(System.String,Windows.Foundation.Collections.IMapView`2{System.String^,System.String^})">
            <summary>
Report an activity
</summary>
            <param name="activity">Type of activity to report on</param>
            <param name="macros">The macros for this activity</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.NUad.ReportAsync(System.String)">
            <summary>
Report an activity
</summary>
            <param name="activity">Type of activity to report on</param>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.NUad.JsonData">
            <summary>
The NUad JSON data
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.NUad.Type">
            <summary>
Type of NUad
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.NUad">
            <summary>
Class representing a NUad
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.NUadResolver.GetRenderer(System.String,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Concurrency.cancellation_token_source)">
            <summary>
Gets the payload of a NUad renderer
</summary>
            <param name="url">The url of the renderer</param>
            <param name="expectedHash">The expected SHA512 hash of the renderer</param>
            <returns>
The payload if it's successfully downloaded and it's hash matches the expected hash. 
Null otherwise.
</returns>
        </member>
        <member name="M:Microsoft.Advertising.Vast.NUadResolver.Resolve(System.String,Concurrency.cancellation_token_source)">
            <summary>
Resolve a url into a NUad object
</summary>
            <param name="XML">Url to resolve</param>
            <return>Populated VAST object</return>
        </member>
        <member name="M:Microsoft.Advertising.Vast.NUadResolver.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Constructor
</summary>
            <param name="context">The context for this ad call</param>
        </member>
        <member name="T:Microsoft.Advertising.Vast.NUadResolver">
            <summary>
NUad Resolver class
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ActivityReporter.GetUrlsForActivity(System.String)">
            <summary>
Gets a list of reporting urls for a given activity
</summary>
            <param name="activity">activity to get reporting urls for.</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ActivityReporter.ReportAsync(System.String,Windows.Foundation.Collections.IMapView`2{System.String^,System.Object^})">
            <summary>
Iterates through list of uris for the specified activity attempting to call
each of them; this form is for JS
</summary>
            <param name="activity">Type of activity to report on</param>
            <param name="macros">A set of macros to replace in the activity urls</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ActivityReporter.ReportAsync(System.String,Windows.Foundation.Collections.IMapView`2{System.String^,System.String^})">
            <summary>
Iterates through list of uris for the specified activity attempting to call
each of them
</summary>
            <param name="activity">Type of activity to report on</param>
            <param name="macros">A set of macros to replace in the activity urls</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ActivityReporter.AddActivity(Microsoft.Advertising.Vast.TrackingEvent)">
            <summary>
Adds an activity event name and Url to the list
</summary>
            <param name="ev">An Event</param>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.ActivityReporter.TrackingEvents">
            <summary>
List of tracking events
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.ActivityReporter">
            <summary>
 Class for Reporting Activity 
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.TrackingEvent.Value">
            <summary>
Tracking url
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.TrackingEvent.EventName">
            <summary>
The name of the event to track. For nonlinear ads these events should be recorded on the video within the ad, required
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.TrackingEvent.#ctor(System.String,System.String)">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.TrackingEvent">
            <summary>
A TrackingEvent
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdExtension.JsonData">
            <summary>
The xml data of the extension converted into JSON
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdExtension.XmlData">
            <summary>
The xml data of the extension
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdExtension.Type">
            <summary>
Type of Extension
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdExtension.#ctor(System.String,System.String)">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.AdExtension">
            <summary>
Class representing an AdExtension
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.XmlToJson">
            <summary>
Class for converting XML to JSON
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.VideoResource.#ctor(System.UInt32,System.UInt32,System.String,System.String,System.String,System.String,System.UInt32,System.String,System.String,System.Boolean,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
Constructor
<param name="width">Width</param><param name="height">Height</param><param name="delivery">Delivery method</param><param name="type">MIME type</param><param name="url">Media Url</param><param name="apiFramework">API framework</param><param name="bitrate">Bitrate</param><param name="codec">Codec</param><param name="id">Media Id</param><param name="maintainAspectRaio">Flag to maintain aspect ratio</param><param name="maxBitrate">Maximum bitrate</param><param name="minBitrate">Minimum bitrate</param><param name="scalable">Flag to allow scaling</param></summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Scalable">
            <summary>
Allow the ad to scale
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.MaintainAspect">
            <summary>
Maintain aspect ratio flag
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Height">
            <summary>
Height
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Width">
            <summary>
Width
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.MaxBitrate">
            <summary>
Maximum bitrate
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.MinBitrate">
            <summary>
Minimum bitrate
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Bitrate">
            <summary>
Bitrate
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Codec">
            <summary>
Codec of the Media
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Uri">
            <summary>
Media Uri
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.ApiFramework">
            <summary>
API Framework
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Type">
            <summary>
MIME type
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Delivery">
            <summary>
Delivery method
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Id">
            <summary>
Package Id
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.VideoResource">
            <summary>
Class representing a video resource, corresponds to a VAST MediaFile element
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd.State">
            <summary>
Returns the state of the interstitial ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd.RequestAd">
            <summary>
Attempts to request an ad
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd.Close">
            <summary>
Closes the interstitial ad if showing.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd.Show">
            <summary>
Shows the interstitial ad if in the ready state.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd.RequestAd(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
 Attempts to request an ad with ability to pass in a context object to help enable testing.
</summary>
            <param name="context">Context object to use for the request</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd.BroadcastErrorEvent(Microsoft.Advertising.ErrorCode,System.String)">
            <summary>
Helper method that broadcasts error events to any listeners 
and discard current ad.
</summary>
            <param name="error">the exception</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd.#ctor(Microsoft.Advertising.Shared.WinRT.AdTagCollection,Microsoft.Advertising.WinRT.UI.AdRequestParameters,System.String,System.String,System.String)">
            <summary>
Constructor.
</summary>
            <param name="applicationId">applicationId to use for the interstitial ad request.</param>
            <param name="adUnitId">adUnitId to use for the interstitial ad request.</param>
            <param name="url">Location to request the ad from.</param>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd">
            <summary>
Represents an interstitial display ad and is responsible for requesting the video ad,
showing any UI elements and closing any UI element.
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.IInterstitialWebBrowser.AdInitialized">
            <summary>
event that is fired when an ad is rendered
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IInterstitialWebBrowser.Close">
            <summary>
Close the popup view.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IInterstitialWebBrowser.Show">
            <summary>
Show the popup view in full screen mode.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IInterstitialWebBrowser.LoadAd(Microsoft.Advertising.Shared.WinRT.Advertisement)">
            <summary>
Load Ad content and put it into a popup view.
</summary>
            <param name="ad">The ad to be loaded into popup view.</param>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.IInterstitialWebBrowser">
            <summary>
Interface for displaying an interstitial mraid ad content.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdRequestParameters.PostalCode">
            <summary>
Postal code of the user.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdRequestParameters.CountryOrRegion">
            <summary>
Country or region of the user.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdRequestParameters.Keywords">
            <summary>
Keywords to be used in targeting.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AdRequestParameters">
            <summary>
Represents an interstitial display ad and is responsible for requesting the video ad,
showing any UI elements and closing any UI element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.m_isRequestInProgress">
            <summary>
Tracks if the interstitial ad has a request in progress.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.m_adTags">
            <summary>
Ad Tags associated with this interstitial ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.m_requestTimeout">
            <summary>
Request Timeout associated with this interstitial ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.m_serviceUrl">
            <summary>
Service Url associated with this interstitial ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.m_adUnitId">
            <summary>
Ad Unit Id associated with this interstitial ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.m_applicationId">
            <summary>
Application Id associated with this interstitial ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.FireErrorOccurredEvent(Microsoft.Advertising.ErrorCode,System.String)">
            <summary>
Fires the ErrorOccurred event with the give data
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.AdTags">
            <summary>
AdTags associated with this interstitial ad.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.RequestTimeout">
            <summary>
Request Timeout associated with this interstitial ad.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.ServiceUrl">
            <summary>
Service Url associated with this interstitial ad.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.AdUnitId">
            <summary>
Ad Unit Id associated with this interstitial ad.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.ApplicationId">
            <summary>
Application Id associated with this interstitial ad.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.IsRequestInProgress">
            <summary>
Tracks if a request is in progress.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.AdType">
            <summary>
Returns the type of the derived instance.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.RequestAd(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Attempts to request an ad
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.ErrorOccurred">
            <summary>
Fired when an error has occurred retrieving an ad.
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.Cancelled">
            <summary>
Fired when an interstitial ad has been cancelled by the user, for example before
a video ad has reached its natural end.
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.Completed">
            <summary>
Fired when an interstitial ad has finished displaying.
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.AdReady">
            <summary>
Fired when an interstitial ad is ready to be shown.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.State">
            <summary>
Returns the state of the interstitial ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.RequestAd">
            <summary>
Attempts to request an ad
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.Close">
            <summary>
Closes the interstitial ad if showing.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.Show">
            <summary>
Shows the interstitial ad if in the ready state.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd">
            <summary>
Common interface to be implemented by different interstitial ad types and comsumed 
by the public interstitial ad.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AdCenter">
            <summary>
  Singleton class to manage the data across ads (banner/interstitial, display/video)
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.BroadcastAdRefreshedEvent">
            <summary>
Helper method that broadcasts ad refreshed events to any listeners
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.BroadcastErrorEvent(Microsoft.Advertising.ErrorCode,System.String)">
            <summary>
Helper method that broadcasts error events to any listeners 
and discard current ad.
</summary>
            <param name="error">the exception</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.BroadcastErrorEvent(Microsoft.Advertising.ErrorCode,System.String,System.Boolean)">
            <summary>
Helper method that broadcasts error events to any listeners
and can choose to discard ad.
</summary>
            <param name="error">the exception</param>
            <param name="discardAd">true to discard ad, false not to</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.AdRequestCompletedHandler(Windows.Foundation.IAsyncOperation`1{Microsoft.Advertising.Shared.WinRT.Advertisement^},Windows.Foundation.AsyncStatus)">
            <summary>
This handles the completed ad request and displays the new ad.
</summary>
            <param name="asyncInfo" />
            <param name="asyncStatus" />
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.StartAdRequest(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
starts the next ad request
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.RefreshCommon(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
checks ad state and raises errors if not in a state that allows ad refresh
otherwise initiates an ad refresh.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.AdInitializedHandler(System.Object,System.Object)">
            <summary>
Handles the case when an ad has initialized
</summary>
            <param name="sender">state of the event receiver</param>
            <param name="e">Event argumnets</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.RemoveAdTag(System.String)">
            <summary>
Remove an ad tag from the ad control. This has no effect if the tag name does not exist.
</summary>
            <param name="tagName">The name of the tag to remove.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.AddAdTag(System.String,System.String)">
            <summary>
Add an ad tag to the ad control. The maximum is 10 tags per ad control. If maximum is exceeded an errorOccurred event will be fired. 
</summary>
            <param name="tagName">The name of the tag. Maximum of 16 characters, if exceeded an errorOccurred event will be fired.</param>
            <param name="tagValue">The value of the tag. Maximum of 128 characters, if exceeded an errorOccurred event will be fired.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.GetRendererOptions">
            <summary>
Return the renderer options in JSON string format.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.Refresh">
            <summary>
                <para>
    A call to this method directs the <c>AdControl</c> to show the next ad as soon as an ad
    becomes available.
  </para>
                <para />
            </summary>
            <remarks>
  A new ad might not be available because of an error that occurred while trying to contact the ad platform.
</remarks>
            <exception>The IsAutoRefreshEnabled property is set to true.</exception>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdController.m_requestInProgress">
            <summary>
Flag shows if the ad has been expanded
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdController.m_isInitialized">
            <summary>
Tracks if the adcontrol has been initialised yet, this could happend from two
different code paths, OnApplyTemplate or Loaded
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.Init">
            <summary>
Common initialization called from the constructor.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.RecordError(System.String,Microsoft.Advertising.NativeErrorCode)">
            <summary>
Actual implementaiton that records the error
</summary>
            <param name="context">The context for this ad request</param>
            <param name="msg">The message for this error</param>
            <param name="errorCode">The code for this error</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.SetContext(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Set the context used for web requests and error reporting. This is used 
for testing. 
</summary>
            <param name="context">Context for this object to use.</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.ReportEvent(System.String)">
            <summary>
This projected method allows the js layer to report interaction events to the native layer
</summary>
            <param name="eventName">The name of the event</param>
        </member>
        <member name="M:Microsoft.Advertising.StringUtils.CalculateHash(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Utility function; calculates the hash of a given string
</summary>
            <param name="payload">The payload to calculate</param>
        </member>
        <member name="M:Microsoft.Advertising.StringUtils.ExtractUrlArgValue(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Utility function; gets the value of a given key from a url's query parameters
</summary>
            <param name="url">The url to check</param>
            <param name="arg">The query arg to look up</param>
            <returns>The value of the arg if it exists; empty string if it doesn't</returns>
        </member>
        <member name="M:Microsoft.Advertising.StringUtils.StrNull(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Utility function; checks if a string is null or not for printing
</summary>
            <param name="str">The string to print</param>
            <returns>the string or "NULL" if the string is null</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetDeviceId">
Client / Device ID, must be in GUID format.
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.Init(Concurrency.cancellation_token_source)">
Initializes members used for making ad requests.
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetIsDownloading">
gets if the ad placement is in the downloading state
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetAdTypes">
Ad types supported by this placement
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetContext">
Context
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetPostalCode">
Postal code
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetCountryOrRegion">
Country or Region
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetKeywords">
Keywords
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetServiceURL">
Ad Server Url Override
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetAdUnitId">
Placement Id
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetApplicationId">
Application Id
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplici">
Constructor

Private constructor - the public interface exposes a static create method.
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_instanceLockObj">
Lock for synchronizing access to instance data.
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_location">
GeoCordinate Location
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_isDownloadingAd">
Flag to check if an ad is being downloaded or not.
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_adTypes">
Ad types the placement supports.
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_serviceURL">
Ad Server Service URL
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_adTags">
Ad tags to send with ad request
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_postalCode">
Postal Code for targeting
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_countryOrRegion">
Country or Region for targeting
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_keywords">
Keywords for targeting
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_appId">
Pub center ID
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_adUnitId">
Placement ID.
</member>
        <member name="M:Microsoft.Advertising.Shared.Context.GetAdCallTraceLogger">
            <summary>
Gets the XCE Logger
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.SetAdCallTraceLogger(std.shared_ptr&lt;Microsoft.Advertising.AdCallTraceLogger&gt;)">
            <summary>
Sets the XCE logger to use.
</summary>
            <param name="logger">The logger to use</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.GetGeoLocatorFactory">
            <summary>
Gets the geo locator factory
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.SetGeoLocatorFactory(std.shared_ptr&lt;Microsoft.Advertising.Shared.GeoLocatorFactory&gt;)">
            <summary>
Sets the geo locator factory to use.
</summary>
            <param name="factory">The geo locator factory to use </param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.GetWebClientFactory">
            <summary>
Gets the web client factory
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.SetWebClientFactory(std.shared_ptr&lt;Microsoft.Advertising.Net.WebClientFactory&gt;)">
            <summary>
Sets the web client factory to use.
</summary>
            <param name="factory">The web client factory to use </param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.#ctor">
            <summary>
Constructor. Uses default factories
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.Context">
            <summary>
A class that holds all context information for an ad request
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClientFactory.#ctor(Microsoft.Advertising.Net.WebClientFactoryMode,std.shared_ptr&lt;Microsoft.Advertising.Net.IWebClientFactoryConstructorParam&gt;)">
            <summary>
Constructor. Sets the mode.
</summary>
            <param name="mode">The new mode</param>
            <param name="param">The constructor param</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClientFactory.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClientFactory.GetClient">
            <summary>
Gets an implementation of IWebClient based on the factory mode.
</summary>
            <returns>A shared pointer to an IWebClient</returns>
        </member>
        <member name="T:Microsoft.Advertising.Net.WebClientFactory">
            <summary>
This factory class returns a concrete implementation of IWebClient
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.WebClientFactoryMode">
            <summary>
An enum representing the type of web client to instantiate
</summary>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.GetPlayerCount">
            <summary>
Gets the signed in player count
</summary>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.InitMicrosoftId">
            <summary>
Initializes the Microsoft Id member by scanning the signed in users
</summary>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.StartResponseTimer(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Starts the response timer. Used to determine latency for the LogAdCallSuccess message.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.StartInteractionTimer">
            <summary>
Starts the interaction timer. This is used by LogAdInteraction fill in the duration field.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.LogError(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Logs an error to Trace
</summary>
            <param name="Code">The error code</param>
            <param name="Message">The error message</param>
            <returns>0 if no error</returns>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.LogNUISummary">
            <summary>
Logs a NUI summary event for each user to Trace
</summary>
            <returns>0 if no error</returns>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.LogAdInteraction(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Logs an Ad Interaction event to Trace
</summary>
            <param name="EndReason">Enumerates the reason for interaction end, e.g. deeplinked out to
advertising web site, collapsed back to tile, switched/terminated app, snapped.</param>
            <returns>0 if no error</returns>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.LogAdCallSuccess(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Logs an Ad Call to Trace
</summary>
            <param name="Method">The api method invoked</param>
            <returns>0 if no error</returns>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.ExtractIDsFromImpressionUrl(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Extracts the order id and creative id from a polymorphic ad's impression url.
</summary>
            <param name="url">The impression url</param>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.SetASID(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the ASID
</summary>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.SetAdActionId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the ad action id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.SetOrderId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the order id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.SetCreativeId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the Creative Id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.SetAdServed(Microsoft.Advertising.TraceAdServed)">
            <summary>
Sets the Ad Served state
</summary>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.SetAdUnitId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the Ad Unit Id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.SetPublisherId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the Publisher Id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.SetMicrosoftAccountId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the Microsoft Account Id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.SetSourceUrl(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the source url
</summary>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.GetASID">
            <summary>
Gets the ASID
</summary>
            <returns>The ASID</returns>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.GetOrderId">
            <summary>
Gets the Order Id
</summary>
            <returns>The order id</returns>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.GetAdActionId">
            <summary>
gets the ad action id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.GetCreativeId">
            <summary>
Gets the Creative Id
</summary>
            <returns>The creative id</returns>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.GetAdServed">
            <summary>
Gets whether the ad has been served
</summary>
            <returns>The ad served state</returns>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.GetAdUnitId">
            <summary>
Gets the Ad Unit Id
</summary>
            <returns>The ad unit id</returns>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.GetPublisherId">
            <summary>
Gets the Publisher Id
</summary>
            <returns>The publisher id</returns>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.GetMicrosoftAccountId">
            <summary>
Gets the Microsoft Account Id
</summary>
            <returns>The Microsoft account id</returns>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.GetSourceUrl">
            <summary>
Gets the source url
</summary>
            <returns>The source url</returns>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructor for RapidAds
</summary>
            <param name="PublisherId">The provisioned PubCenter identifier for the app.</param>
            <param name="AdUnitId">The ad placement code.</param>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructor for URL ads
</summary>
            <param name="sourceUrl">The url to the requested ad experience</param>
        </member>
        <member name="M:Microsoft.Advertising.AdCallTraceLogger.#ctor">
            <summary>
Default constructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.AdCallTraceLogger">
            <summary>
Helper class that tries to automatically fill in as much of the Trace messages as it can.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.TraceLogging.Error(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,Microsoft.Advertising.TraceAdServed!System.Runtime.CompilerServices.IsConst,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
This is the implementation for sending an Trace message indicating an error has occurred
</summary>
            <param name="PublisherId">The provisioned PubCenter identifier for the app.</param>
            <param name="AdUnitId">The ad placement code.</param>
            <param name="AdServed">Whether this error means the user didn't get an ad.</param>
            <param name="ASID">A transaction ID, as GUID, generated with each ad request</param>
            <param name="Source">Host name if an http call, else internal component name</param>
            <param name="Code">The error code</param>
            <param name="Message">The error message</param>
            <returns>0 if successful</returns>
        </member>
        <member name="M:Microsoft.Advertising.TraceLogging.AdInteraction(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerSe">
            <summary>
This is the implementation for sending an Trace message indicating a user interacted with an ad.
</summary>
            <param name="UserId">XUID with context of the event</param>
            <param name="ActionTypeId">Type of action. Which button pressed, swipe, etc.</param>
            <param name="ActionInputMethodId">Type of input method</param>
            <param name="PageUri">Unique ID of the page action was taken on. I.e. URL/URI indicating the page the action was taken on</param>
            <param name="PageName">Canonical name of the displayed page</param>
            <param name="PageTypeId">Page layout id</param>
            <param name="TemplateId">Id of template used to layout the page.</param>
            <param name="DestPageUri">Unique ID of the page action invokes. I.e. URL/URI indicating the destination page of the action</param>
            <param name="DestPageTypeId">Type ID of page shown</param>
            <param name="CampaignId">Campaign page is part of</param>
            <param name="GroupId">Group/Segment/Treatment ID for this content</param>
            <param name="Content">JSON of asset/content on which action was taken</param>
            <param name="PublisherId">The provisioned PubCenter identifier for the app.</param>
            <param name="AdUnitId">The ad placement code.</param>
            <param name="CreativeId">The identifier for the matched ad creative from CAM</param>
            <param name="OrderId">The order id from AdEx</param>
            <param name="ASID">A transaction ID, as GUID, generated with each ad request</param>
            <param name="Duration">Time between expand/close, measuring the interaction time with full screen ad experience, in milliseconds.</param>
            <param name="EndReason">Enumerates the reason for interaction end, e.g. deeplinked out to advertising web site, collapsed back to tile, switched/terminated app, snapped.</param>
            <param name="PlayerCount">The number of signed in users</param>
            <returns>0 if successful</returns>
        </member>
        <member name="M:Microsoft.Advertising.TraceLogging.AdCallSuccess(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int64!System.Runtime.CompilerServices.IsConst,System.Int64!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int64!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int64!System.Runtime.CompilerServices.IsConst,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerS">
            <summary>
This is the implementation for sending an Trace message indicating an ad call was successful.
</summary>
            <param name="Method">The api method invoked</param>
            <param name="Module">The module (dll, API, etc) from which the method was called</param>
            <param name="RequestUrl">Captures the Xbox service request's full URL, including query string paramters (null if not applicable)</param>
            <param name="ContractVersion">Captures the Xbox service request's or API's version</param>
            <param name="ResponseContent">The content of the response provided by the API or service</param>
            <param name="RequestContentLength">The length of the request content in bytes</param>
            <param name="ResponseContentLength">The length of the response content in bytes</param>
            <param name="HttpStatusCode">HTTP Status Code returned by service if service call was made (null if not applicable)</param>
            <param name="ServiceErrorCode">The error code (hresult) returned by the xbox service via the x-err header (null if not applicable)</param>
            <param name="LatencyMs">Latency of response to be returned (in milliseconds)</param>
            <param name="Retries">The number of retries before a response was received</param>
            <param name="ClientCorrelationId">
An identifier used by the client to help associated client activity with server activity.
This value is pulled from the "X-ClientCorrelationId" header
</param>
            <param name="PublisherId">The provisioned PubCenter identifier for the app.</param>
            <param name="AdUnitId">The ad placement code.</param>
            <param name="CreativeId">The identifier for the matched ad creative from CAM</param>
            <param name="OrderId">The order id from AdEx</param>
            <param name="ASID">A transaction ID, as GUID, generated with each ad request</param>
            <returns>0 if successful</returns>
        </member>
        <member name="M:Microsoft.Advertising.TraceLogging.GetInstance">
            <summary>
Gets the singleton instance
</summary>
            <returns>A pointer to the TraceLogging singleton instance</returns>
        </member>
        <member name="M:Microsoft.Advertising.TraceLogging.Dispose">
            <summary>
Private destructor.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.TraceLogging.#ctor">
            <summary>
Private constructor. This is a singleton.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.TraceLogging">
            <summary>
Class that wraps Trace logging. Automatically fills in a few fields
Singleton.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.TraceAdServed">
            <summary>
Enum representing whether an ad was served or not
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Stopwatch.Restart">
            <summary>
Restarts the timer. Starts the timer if it isn't started.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Stopwatch.ElapsedMs">
            <summary>
Gets the elapsed time
</summary>
            <returns>The time elapsed in milliseconds</returns>
        </member>
        <member name="M:Microsoft.Advertising.Stopwatch.Stop">
            <summary>
Stop the stopwatch
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Stopwatch.Start">
            <summary>
Start the stopwatch
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Stopwatch.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Stopwatch">
            <summary>
This class is used for timing things.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.TaskHelper.FinishTask{System.Void}(Concurrency.task{System.Void},std.function&lt;(Microsoft.Advertising.WException)(Microsoft.Advertising.WException)&gt;,std.function&lt;(void)&gt;)">
            <summary>
This is a void specialization of the FinishTask method
</summary>
            <param name="previousTask">The task to finish</param>
            <param name="exceptionHandler">A callback to execute if an exception was thrown on the task chain</param>
            <param name="cancelHandler">A callback to execute if the task chain was canceled</param>
            <returns>The return value of the task</returns>
http://msdn.microsoft.com/en-us/library/Windows/Apps/hh699896.aspx
In Win8, the message only exists in the debugger; only the HRESULT is preserved.
In Win8.1, the message is also preserved.
</member>
        <member name="M:Microsoft.Advertising.Concurrency.TaskHelper.ChainTokenSourceToToken(Concurrency.cancellation_token)">
            <summary>
This creates a new cancellation token source that triggers cancel when a 
given cancel token cancels. This is useful for create_async, which only gives a token.
</summary>
            <param name="token">The token to chain to</param>
            <returns>A new cancellation token source</returns>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.TaskHelper.CancellableDelay(System.Int32,Concurrency.cancellation_token)">
            <summary>
Helper function that attempts to wait for a given amount of time. The delay will properly abort early if canceled.
</summary>
            <param name="milliseconds">Time to wait in milliseconds</param>
            <param name="cancellationToken">Token used for checking if the task has been cancelled.</param>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.TaskHelper.CheckAndHandleCancel(Concurrency.cancellation_token,std.function&lt;(void)&gt;)">
            <summary>
Checks to see if the currently executing task has been canceled and handles it.
</summary>
            <param name="cancellationToken">Token used for checking if the task has been cancelled.</param>
            <param name="cancelHandler">A callback to be executed when a task is canceled manually (not through timeout). Optional.</param>
        </member>
        <member name="F:Microsoft.Advertising.Concurrency.TaskHelper.k_waitTime">
            <summary>
This constant defines the number of milliseconds to wait
before checking for cancels in methods that require polling spin-waits
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Concurrency.TaskHelper">
            <summary>
This class provides convenience functions for using the ppltasks library
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.SignalEvent.Wait(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Waits for the event to be signalled.
</summary>
            <param name="dwMilliseconds">The length of time (in milliseconds) to wait.</param>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.SignalEvent.Wait">
            <summary>
Waits for the event to be signalled.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.SignalEvent.Signal">
            <summary>
Signals the event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.SignalEvent.Dispose">
            <summary>
Destructor. Closes the event handle.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.SignalEvent.#ctor">
            <summary>
Constructor. Creates an event.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Concurrency.SignalEvent">
            <summary>
Concrete implementation of the SignalEvent
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.ISignalEvent.Wait">
            <summary>
Waits until the event is in the signalled state
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.ISignalEvent.Signal">
            <summary>
Sets the event to the signalled state
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Concurrency.ISignalEvent">
            <summary>
This interface represents a waitable event
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdErrorEventArgs.ErrorCodeEnum">
            <summary>
      يشير <c>ErrorCode</c> إلى نوع الخطأ الذي حدث.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdErrorEventArgs.ErrorCode">
            <summary>
      تشير سلسلة ErrorCode إلى نوع الخطأ الذي حدث.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdErrorEventArgs.ErrorMessage">
            <summary>
                <c>الاستثناء</c> الذي قام بتشغيل حدث الخطأ.
    </summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.AdErrorEventArgs">
            <summary>
      يشتمل فصل <c>AdErrorEventArgs</c> على معلومات حول الأخطاء التي تحدث عند استرداد الإعلانات من خادم الإعلان.
    </summary>
        </member>
        <member name="T:Microsoft.Advertising.ErrorCode">
            <summary>
      قائمة تعداد رموز الخطأ التي تُعرف أسبابًا متعددة لتعذر تنزيل الإعلانات.
    </summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.JSONWrapper.ExtractNamedJsonArray(Windows.Data.Json.IJsonValue,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,System.Boolean)">
Retrieves the string value from jsonNode. 
</member>
        <member name="T:Microsoft.Advertising.WinRT.UI.InterstitialAdState">
            <summary>
Interstial ad types.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialAdState.Closed">
            <summary>
Already displayed to user.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialAdState.Showing">
            <summary>
Currently being shown.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialAdState.Ready">
            <summary>
Ready to show.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialAdState.NotReady">
            <summary>
Not ready to show.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AdType">
            <summary>
Interstial ad types.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdType.Video">
            <summary>
Video Interstitial ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.AppendBuffer(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
            <summary>
Appends a byte buffer to the response
</summary>
            <param name="response">The body of the http response</param>
            <param name="responseLength">The length of the body</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.GetHeader(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets a header value if it exists in the response.
</summary>
            <param name="headerName">The name of the header to get</param>
            <returns>The header's value if it exists; an empty string if it doesn't</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.ContainsHeader(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Checks to see if a header exists in the response.
</summary>
            <param name="headerName">The name of the header to check</param>
            <returns>True if the header exists; false if not.</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.GetResponse(System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Accessor to get the response body as a byte array
</summary>
            <param name="length">The length of the body</param>
            <returns>The response body as a pointer</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.GetResponseAsVector">
            <summary>
Accessor to get the response body as a vector of bytes
</summary>
            <returns>The response body</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.GetResponseAsString">
            <summary>
Accessor to get the response body as a wstring
</summary>
            <returns>The response body</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.GetStatus">
            <summary>
Accessor to get the http status code
</summary>
            <returns>The status code</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.WasSuccessful">
            <summary>
Checks to see if the status isn't an HRESULT and the status code is 200
</summary>
            <returns>True if status code is 200</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.IsDataAvailable">
            <summary>
Checks to see if the status isn't an HRESULT and the status code is 200 and the body isn't empty
</summary>
            <returns>True if status code is 200 and the body isn't empty</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.#ctor(Microsoft.Advertising.Net.HttpStatusCode,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServi">
            <summary>
Constructor. Initializes a status and response and the response headers
</summary>
            <param name="status">The status code of the http response</param>
            <param name="response">The body of the http response</param>
            <param name="responseLength">The length of the body</param>
            <param name="headers">The headers of the http response</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.#ctor(Microsoft.Advertising.Net.HttpStatusCode,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
            <summary>
Constructor. Initializes a status and response.
</summary>
            <param name="status">The status code of the http response</param>
            <param name="response">The body of the http response</param>
            <param name="responseLength">The length of the body</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.#ctor(Microsoft.Advertising.Net.HttpStatusCode)">
            <summary>
Constructor. Initializes a status. Useful for when there is only a status and no response
</summary>
            <param name="status">The status code of the http response</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.#ctor(Microsoft.Advertising.WException)">
            <summary>
Constructor. Initializes a webresponse with a given exception.
</summary>
            <param name="status">The exception</param>
        </member>
        <member name="T:Microsoft.Advertising.Net.WebResponse">
            <summary>
This class holds the data from an http response.
</summary>
        </member>
        <member name="D:Microsoft.Advertising.Net.WebClientHeaders">
            <summary>
A typedef defining a collection of WebClientHeaders
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WException">
            <summary>
This class is an exception that holds a message as a wide string.
</summary>
        </member>
        <member name="F:ValidationFailure">
            <summary>
      حدث خطأ أثناء التحقق من صحة حمولة الإعلان.
    </summary>
        </member>
        <member name="F:ParseToBOMFailure">
            <summary>
      حدث خطأ أثناء استخراج البيانات من حمولة الإعلان.
    </summary>
        </member>
        <member name="F:FileOperationFailure">
            <summary>
      حدث خطأ أثناء إجراء عملية ملف.
    </summary>
        </member>
        <member name="F:Cancelled">
            <summary>
      تم إلغاء الإجراء.
    </summary>
        </member>
        <member name="F:Success">
            <summary>
      تم الإجراء بنجاح.
    </summary>
        </member>
        <member name="F:MraidOperationFailure">
            <summary>
      حدث خطأ أثناء إجراء عملية MRAID تم تشغيلها بواسطة الإعلان.
    </summary>
        </member>
        <member name="F:CreativeError">
            <summary>
      واجه مبدع الإعلان خطأ.
    </summary>
        </member>
        <member name="F:RefreshNotAllowed">
            <summary>
      تمت محاولة التحديث لكن غير مسموح بها بسبب الحالة الحالية لتحكم الإعلان (على سبيل المثال، غير مرئي على الشاشة).
    </summary>
        </member>
        <member name="F:Other">
            <summary>
      رمز الخطأ للأخطاء التي لا تغطيها الرموز الأخرى.
    </summary>
        </member>
        <member name="F:InvalidServerResponse">
            <summary>
      أظهر الخادم استجابة لا يمكن تحليلها أو تشتمل على بيانات إعلانات غير صالحة.
    </summary>
        </member>
        <member name="F:ServerSideError">
            <summary>
      حدث خطأ على الخادم أثناء معالجة طلب الإعلان.
    </summary>
        </member>
        <member name="F:ClientConfiguration">
            <summary>
      إحدى المعلمات المطلوبة التي تم تعيينها بواسطة مطور التطبيق غير صالحة أو لم يتم تعيينها.
    </summary>
        </member>
        <member name="F:NetworkConnectionFailure">
            <summary>
      حدث خطأ أثناء إجراء طلب شبكة.
    </summary>
        </member>
        <member name="F:NoAdAvailable">
            <summary>
      تعذر على الخادم العثور على إعلان يتوافق مع الطلب.
    </summary>
        </member>
        <member name="F:Unknown">
            <summary>
      القيمة الافتراضية. سبب الخطأ غير معروف.
    </summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockByteResponder.GetResponse(Microsoft.Advertising.Net.HttpRequestMethodType!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;Syste">
            <summary>
Get the response.
</summary>
            <param name="method">The http method</param>
            <param name="url">The url to match</param>
            <param name="headers">The headers to match</param>
            <returns>A shared pointer to a mock response if the url matches. Nullptr if it doesn't</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockByteResponder.#ctor(Microsoft.Advertising.Net.HttpRequestMethodType,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte[])">
            <summary>
Constructor.
</summary>
            <param name="url">The url to match</param>
            <param name="payload">The payload to return</param>
        </member>
        <member name="T:Microsoft.Advertising.Net.MockByteResponder">
            <summary>
Simple mock responder that returns a response to a given url with a given byte payload.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockWebClient.SendRequest(Microsoft.Advertising.Net.HttpRequestMethodType!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Ch">
            <summary>
This method sends a mock http request.
</summary>
            <param name="method">The http verb to use for this request.</param>
            <param name="url">The url to request</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="body">A body to send to in this request. Currently not used</param>
            <param name="bodyLength">The length of the body</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to a cancel token to the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockWebClient.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Net.IWebClientFactoryConstructorParam&gt;)">
            <summary>
Constructor; uses the passed in factory
</summary>
            <param name="param">The WebClientFactoryConstructor param, cast into the MockWebClientResponse</param>
        </member>
        <member name="T:Microsoft.Advertising.Net.MockWebClient">
            <summary>
An implementation of IWebClient that mocks responses
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockWebClientICancelToken.IsCompleted">
            <summary>
Returns true if the async operation is completed
</summary>
            <returns>Returns true if the async operation is completed</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockWebClientICancelToken.IsCancelled">
            <summary>
Returns true if the async operation is cancelled
</summary>
            <returns>Returns true if the async operation is cancelled</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockWebClientICancelToken.Cancel">
            <summary>
Cancel the async operation
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.MockWebClientICancelToken">
            <summary>
A concrete class implementing ICancelToken for MockWebClient
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockWebClientResponse.GetDelay">
            <summary>
The delay for this reponse
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockWebClientResponse.GetResponse(Microsoft.Advertising.Net.HttpRequestMethodType!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;S">
            <summary>
Iterates through the list of response generators and returns the first non-null response
</summary>
            <param name="method">The http verb to use for this request.</param>
            <param name="url">The url to request</param>
            <param name="headers">Any extra headers to set in this request</param>
            <returns>A mock response if a generator in the list created a non-null one</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockWebClientResponse.ClearGenerators">
            <summary>
Clear the generators list
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockWebClientResponse.AddResponseGenerator(std.shared_ptr&lt;Microsoft.Advertising.Net.IMockResponseGenerator&gt;)">
            <summary>
Add a response generator to the list
</summary>
            <param name="generator">The generator to add</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockWebClientResponse.#ctor(System.Int32)">
            <summary>
Constructor
</summary>
            <param name="delay">
The number of milliseconds to delay the response. 
If milliseconds is zero, the web call becomes synchronous
</param>
        </member>
        <member name="T:Microsoft.Advertising.Net.MockWebClientResponse">
            <summary>
A singleton class that holds a set of IMockResponseGenerators to generate a response for the MockWebClient
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.IMockResponseGenerator.SetParams(std.shared_ptr&lt;Microsoft.Advertising.Net.MockWebClientResponseParameters&gt;)">
            <summary>
Sets the mock response parameters to use with this response generator
</summary>
            <param name="params">The parameters to use with this request</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.IMockResponseGenerator.GetResponse(Microsoft.Advertising.Net.HttpRequestMethodType!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;">
            <summary>
Gets a response based on the method, url, and headers if this response generator handles it.
</summary>
            <param name="method">The http verb to use for this request.</param>
            <param name="url">The url to request</param>
            <param name="headers">Any extra headers to set in this request</param>
            <returns>A shared pointer to the response - nullptr if not handled</returns>
        </member>
        <member name="T:Microsoft.Advertising.Net.IMockResponseGenerator">
            <summary>
An interface to getting a mock response
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockResponse.GetResponse">
            <summary>
Gets the response
</summary>
            <returns>A shared pointer to the response</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockResponse.GetParams">
            <summary>
Gets the parameters
</summary>
            <returns>A shared pointer to the parameters</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockResponse.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Net.MockWebClientResponseParameters&gt;,std.shared_ptr&lt;Microsoft.Advertising.Net.WebResponse&gt;)">
            <summary>
Constructor
</summary>
            <param name="parameters">The parameters to use</param>
            <param name="response">The response to send</param>
        </member>
        <member name="T:Microsoft.Advertising.Net.MockResponse">
            <summary>
This class holds a response and a set of parameters
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockWebClientResponseParameters.SetValue(Microsoft.Advertising.Net.MockWebClientValue,System.Int32)">
            <summary>
Sets an integer feature
</summary>
            <param name="valueName">The value to set</param>
            <param name="value">The value to set the feature to</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockWebClientResponseParameters.SetFeature(Microsoft.Advertising.Net.MockWebClientResponseFeature,System.Boolean)">
            <summary>
Sets a boolean feature
</summary>
            <param name="featureName">The feature to set</param>
            <param name="value">The value to set the feature to</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockWebClientResponseParameters.GetValues">
            <summary>
Gets the map of integer values set for this request
</summary>
            <returns>A const map of value to integer value</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockWebClientResponseParameters.GetFeatures">
            <summary>
Gets the map of boolean features set for this request
</summary>
            <returns>A const map of feature to boolean value</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.MockWebClientResponseParameters.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.MockWebClientResponseParameters">
            <summary>
A set of parameters controlling a mock response
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.MockWebClientValue">
            <summary>
Enum of integer values for the mock web client
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.MockWebClientResponseFeature">
            <summary>
Enum of boolean features for the mock web client
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.CancelTokenGroup.RegisterCancelToken(std.shared_ptr&lt;Microsoft.Advertising.Concurrency.ICancelToken&gt;)">
            <summary>
Add a cancel token to this group
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.CancelTokenGroup.Cancel">
            <summary>
Cancel all tokens
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Concurrency.CancelTokenGroup">
            <summary>
This class holds a group of cancel tokens and can cancel them all at once
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.ICancelToken.IsCompleted">
            <summary>
Get the completion state of the action
</summary>
            <returns>True if completed</returns>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.ICancelToken.IsCancelled">
            <summary>
Get the cancel state of the action
</summary>
            <returns>True if cancelled</returns>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.ICancelToken.Cancel">
            <summary>
Cancel the action.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Concurrency.ICancelToken">
            <summary>
Interface that allows a user to cancel an asynchronous action.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.IWebClientFactoryConstructorParam">
            <summary>
A dummy interface for restricting the types input to WebClient constructor
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.IWebClient.SendRequest(Microsoft.Advertising.Net.HttpRequestMethodType!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,">
            <summary>
This method sends an http request.
</summary>
            <param name="method">The http verb to use for this request.</param>
            <param name="url">The url to request</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="body">A body to send to in this request. Currently not used</param>
            <param name="bodyLength">The length of the body</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to an ICancel token that lets you cancel the request</returns>
        </member>
        <member name="T:Microsoft.Advertising.Net.IWebClient">
            <summary>
This interface describes methods that send http requests
</summary>
        </member>
    </members>
</doc>