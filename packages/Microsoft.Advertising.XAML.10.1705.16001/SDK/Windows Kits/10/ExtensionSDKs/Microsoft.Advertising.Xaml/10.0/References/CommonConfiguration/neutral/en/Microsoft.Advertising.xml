<?xml version="1.0"?>
<doc>
    <assembly>
        "MicrosoftAdvertising"
    </assembly>
    <members>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetLocale">
Locale targeting param shared by all Ad Placements.
</member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.GetInterstitialAdTags">
            <summary>
This method is for testing/internal purposes only.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.SetAd(Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd)">
            <summary>
This method is for testing/internal purposes only.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.RequestAdByUrl(Microsoft.Advertising.WinRT.UI.AdType,System.String,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Requests an interstitial ad based on the supplied url. The AdReady event
will fire when the request completes successfully. The ErrorOccurred event will fire if
there was an issue getting the ad. This is for testing purposes
</summary>
            <param name="url">Location to request the ad from.</param>
            <param name="context">Context object to use for the request.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.RequestAd(Microsoft.Advertising.WinRT.UI.AdType,System.String,System.String,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Requests an interstitial ad based on the supplied applicationId/adUnitId. The AdReady event
will fire when the request completes successfully. The ErrorOccurred event will fire if
there was an issue getting the ad.
</summary>
            <param name="adType">The type of interstitial ad to request.</param>
            <param name="applicationId">applicationId to use for the interstitial ad request.</param>
            <param name="adUnitId">adUnitId to use for the interstitial ad request.</param>
            <param name="context">Context object to use for the request.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.RequestAdByUrl(Microsoft.Advertising.WinRT.UI.AdType,System.String)">
            <summary>
Requests an interstitial ad based on the supplied url. The AdReady event
will fire when the request completes successfully. The ErrorOccurred event will fire if
there was an issue getting the ad. This is for testing purposes
</summary>
            <param name="url">Location to request the ad from.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.FireErrorOccurredEvent(Microsoft.Advertising.WinRT.UI.AdErrorEventArgs)">
            <summary>
Helper method for raising the ErrorOccurred event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.OnErrorOccurred(System.Object,Microsoft.Advertising.WinRT.UI.AdErrorEventArgs)">
            <summary>
Event handler for child m_ad ErrorOccurred event. Calls Close() and passes through event to own ErrorOccurred event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.OnCancelled(System.Object,System.Object)">
            <summary>
Event handler for child m_ad Cancelled event. Calls Close() and passes through event to own Cancelled event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.OnCompleted(System.Object,System.Object)">
            <summary>
Event handler for child m_ad Completed event. Calls Close() and passes through event to own Completed event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.OnAdReady(System.Object,System.Object)">
            <summary>
Event handler for child m_ad AdReady event. Passes through event to own AdReady event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.RequestDisplayAd(System.String,System.String,System.String,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Begins a request for a display ad using supplied appplicationId/adUnitId pair OR url. Url must be null/empty
if appplicationId/adUnitId are present, appplicationId/adUnitId must be null/empty if url is present.
</summary>
            <param name="applicationId">Application id to use for request.</param>
            <param name="adUnitId">Ad unit id to use for request.</param>
            <param name="url">Url to use for request.</param>
            <param name="context">Context object to use for the request.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.RequestVideoAd(System.String,System.String,System.String,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Begins a request for a video ad using supplied appplicationId/adUnitId pair OR url. Url must be null/empty
if appplicationId/adUnitId are present, appplicationId/adUnitId must be null/empty if url is present.
</summary>
            <param name="applicationId">Application id to use for request.</param>
            <param name="adUnitId">Ad unit id to use for request.</param>
            <param name="url">Url to use for request.</param>
            <param name="context">Context object to use for the request.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.UnsubscribeFromEvents">
            <summary>
Unsubscribes from events (AdReady, Completed, Cancelled, Error) in the member AbstractInterstitialAd.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.SubscribeToEvents">
            <summary>
Subscribes to events (AdReady, Completed, Cancelled, Error) in the member AbstractInterstitialAd.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialAd.k_adRequestTimeoutInMilliSeconds">
            <summary>
Constant for Ad Request Timeout
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.InterstitialAd.ErrorOccurred">
            <summary>
      This event occurs when the <c>InterstitialAd</c> encounters an error while retrieving ads.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.InterstitialAd.Cancelled">
            <summary>
      This event occurs if the user cancels the ad before it is considered complete.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.InterstitialAd.Completed">
            <summary>
      This event occurs when the ad has been closed and the ad experience is considered complete.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.InterstitialAd.AdReady">
            <summary>
      This event occurs when an interstitial ad is ready to be shown.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialAd.PostalCode">
            <summary>
      Postal code of the user.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialAd.CountryOrRegion">
            <summary>
      Country or region where the user is located.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialAd.Keywords">
            <summary>
      Keywords to be used in targeting.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialAd.RequestTimeout">
            <summary>
      The number of milliseconds to wait for an ad request to complete before timing out. The default is 30000ms or 30 seconds.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialAd.State">
            <summary>
      The current state of the interstitial ad. See <c>InterstitialAdState</c> enumeration.
    </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.RemoveAdTag(System.String)">
            <summary>
      Remove an ad tag.
    </summary>
            <param name="tagName">The name of the tag to remove.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.AddAdTag(System.String,System.String)">
            <summary>
      Add an ad tag for use in the ad request. The maximum is 10 tags. If maximum is exceeded an error event will be fired.
    </summary>
            <param name="tagName">The name of the tag. Maximum of 16 characters, if exceeded an errorOccurred event will be fired.</param>
            <param name="tagValue">The value of the tag. Maximum of 128 characters, if exceeded an errorOccurred event will be fired.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.Close">
            <summary>
      Closes the interstitial ad if showing. Once closed, the same ad may not be shown again. App may request a new ad after prior ad is closed.
    </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.Show">
            <summary>
      Shows the interstitial ad if in the ready state.
    </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.RequestAd(Microsoft.Advertising.WinRT.UI.AdType,System.String,System.String)">
            <summary>
      Requests an interstitial ad from the server. The AdReady event will fire when the request completes successfully.
      The ErrorOccurred event will fire if there was an problem getting an ad. 
      The ad will not be shown to the user until <c>Show</c> is called.
    </summary>
            <param name="adType">The type of interstitial ad to request.</param>
            <param name="applicationId">The application ID of the app. This value is provided to you when you register the app with PubCenter.</param>
            <param name="adUnitId">The adUnitId as provisioned on pubCenter.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialAd.#ctor">
            <summary>
      Initializes a new <c>InterstitialAd</c>.
    </summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.InterstitialAd">
            <summary>
      InterstitialAd allows developers to add full-screen interstitial ads to their apps.
    </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.OnWindowActivated(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState&gt;,Windows.UI.Core.CoreWindow,Windows.UI.Core.WindowActivatedEventArgs)">
            <summary>
Event handler for app being activated or deactivated (gaining or losing focus). This handler is used for viewability data.
</summary>
            <param name="weakState">A weak pointer to the ViewabilityState object to be updated.</param>
            <param name="sender">The CoreWindow sending the event.</param>
            <param name="e">Details about the event.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.UnsubscribeFromWebViewNavigationCompleted">
            <summary>
Unsubscribes from the WebView's navigation completed event, e.g. after ad loads and is initialized.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.SubscribeToWindowActivatedEvent">
            <summary>
Subscribes to the window activated event. This event is used to determine when the app gains or loses focus.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.UpdateIsViewable(System.Boolean)">
            <summary>
Updates the isViewable property based on the ad percentage-on-screen and sends the value into the WebView if changed.
</summary>
            <param name="forceSendMessage">When true, the viewability data is sent into the WebView even if no change. Defaults to false.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.UpdateViewableData(System.Boolean)">
            <summary>
Updates the viewability data and sends the data into the WebView if changed.
</summary>
            <param name="forceSendMessage">When true, the viewability data is sent into the WebView even if no change. Defaults to false.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.StopViewableDataChangedMonitoring">
            <summary>
Stop monitoring of the viewability properties.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.StartViewableDataChangedMonitoring">
            <summary>
Start monitoring of the viewability properties.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.OnSizeChanged(System.Object,Windows.UI.Xaml.SizeChangedEventArgs)">
            <summary>
When VpaidControl is resized, resize the WebView also.
</summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Arguments for the event</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.OnTimeoutTimerTick(System.Object,System.Object)">
            <summary>
This is called by the timeout timer when the VPAID ad has not responded.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.StopTimeoutTimer(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Stops a previously-started timer when the VPAID ad responds as expected.
</summary>
            <param name="action">identifying string indicating action being performed</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.StartTimeoutTimer(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,System.Int64)">
            <summary>
Start a timer to ensure that the VPAID ad responds to calls in a reasonable time.
If ad does not respond, an AdError event is fired.
Only one timer may be running at a time. Secondary calls to this function will have no effect.
</summary>
            <param name="action">identifying string indicating action being performed</param>
            <param name="timeoutTicks">how long to wait for response, in ticks</param>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VpaidControl.m_timeoutTickToken">
            <summary>
Token for unsubscribing from Tick event for the timeout timer.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VpaidControl.m_timeoutAction">
            <summary>
The action for which we are currently checking for timeout.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VpaidControl.m_timeoutTimer">
            <summary>
Timer used for determining if the ad has not responded.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VpaidControl.m_isViewable">
            <summary>
This tracks whether the ad is considered viewable considering only percentage-on-screen.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VpaidControl.m_lastResize">
            <summary>
Time when app window was last resized. We track this because during resize the webview size and app size
can briefly get out of sync, which can cause the viewability detection to not recognize the ad
as full screen and cause it to report the ad as occluded.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.ProcessScriptNotifyMessage(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Handles the message received from inside the WebView.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VpaidControl.m_viewableDataChangeTimer">
            <summary>
Timer used for periodically checking if the viewability metrics have changed.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.HandleViewableDataChangeMessage(Windows.Data.Json.JsonValue)">
            <summary />
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.HandleViewableChangeMessage(Windows.Data.Json.JsonValue)">
            <summary />
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VpaidControl.m_isPaused">
            <summary>
This tracks whether the ad is currently paused. If we try to resume the ad, for instance when we regain
focus, the ad may not respond with AdPlaying event if it is not actually paused. Keep track of whether
the ad is paused so we know whether to apply a timeout to receiving the AdPlaying response.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.ResizeAd(System.Double,System.Double,System.String)">
            <summary>
When the video container is resized, this notifies the creative that the size is changed so that
it can adjust rendering to the new size.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.ResumeAd">
            <summary>
This notifies the creative that it should resume playback.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.PauseAd">
            <summary>
This notifies the creative that it should pause playback.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.StopAd">
            <summary>
This notifies the creative that it should stop permanently.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.StartAd">
            <summary>
This notifies the creative that it should start playback.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.VpaidControl.Focus">
            <summary>
Set focus on the webview
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.VpaidControl">
            <summary>
This class is used to display a VPAID ad. It is not public and currently only intended to be used by 
the InterstitialVideoAd class.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_defaultWindowSize">
            <summary>
Default window size to use in the event we can't get it from system calls.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_defaultVpaidBackButtonOpacity">
            <summary>
Default back button opacity to use when playing VPAID content.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_defaultVastBackButtonOpacity">
            <summary>
Default back button opacity to use when playing VAST content.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_backButtonStrokeThickness">
            <summary>
Thickness of the lines drawn in the back button.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_backButtonCoordSmall">
            <summary>
Small coordinate used for drawing the arrow in the back button.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_backButtonCoordBig">
            <summary>
Big coordinate used for drawing the arrow in the back button.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_backButtonEllipseSize">
            <summary>
Size of the circle draw in the back button.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_backButtonSize">
            <summary>
Overall size of the back button.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_100NanosecondsInQuarterSecond">
            <summary>
Frequency at which the progress bar is updated.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_marginOffsetPx">
            <summary>
Margin offset used for the Advertisement (top), Click Through (bottom, right) and
countdown (bottom, left), close button (top, left).
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_clickThroughFontSize">
            <summary>
Font size used for the click-through.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_labelFontSize">
            <summary>
Font size used for the countdown and "Advertisement" labels.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_progressTimeoutSeconds">
            <summary>
Progress timeout duration.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.k_mediaTimeoutTicks">
            <summary>
Media timeout duration in ticks.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.s_isMediaPlaybackSupported">
            <summary>
True if media playback is supported, false otherise. This is determined by a call to 
Media foundation api MFStartUp(...).
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.s_isInitialized">
            <summary>
Tracks if initialize has been called.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_adPod">
            <summary>
The selected ad pod from the vast response for Interstitial ads. Contains all the information for the package
to be played.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaSrc">
            <summary>
Media source to be played, parsed from the vast response media element
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_secondsSinceLastProgress">
            <summary>
Number of seconds since we last progressed.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_previousProgress">
            <summary>
Previous progress, used to check if ad content is stuck.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_skipOffsetParsed">
            <summary>
Parsed skipoffset into equivalent number of seconds
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_skipOffset">
            <summary>
skipoffset returned from the vast response linear element to allow user to skip the ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaIntermediate">
            <summary>
Is set to true when the content is in the playing state and is 
false if the media has not played or has played through to 
the end.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_cancelOnPopupClose">
            <summary>
Tracks if we should raise the cancelled event when closing the popup.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaTimeoutTimer">
            <summary>
Timer used for determining if the media has timed out.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_countdownTimer">
            <summary>
Timer used for updating the time remaining UI.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_backButtonFadeOutAnimation">
            <summary>
Storyboard for fading out the back button.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_backButtonFadeInAnimation">
            <summary>
Storyboard for fading in the back button, this is 
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_bufferingProgressBar">
            <summary>
Progress bar displayed while buffering.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_backButtonCanvas">
            <summary>
Transparent overlay canvas of size 50*50 that provides close functionality and holds back button.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_grid">
            <summary>
Grid element that is added to the PopupView, this hosts the MediaElement used to
play the video ad as well as the advertisement text, back button, progress bar
and optionally a click through link.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_countdownText">
            <summary>
Used to display the time remaining to the user if m_showCountdownTimer is set to true;
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaElement">
            <summary>
MediaElement used to play the video.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_vpaidControl">
            <summary>
VpaidControl used to play a VPAID video.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_context">
            <summary>
Context.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_popup">
            <summary>
PopupView that will host the MediaElement playing the video.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_state">
            <summary>
State of the interstitial ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_popupClosedToken">
            <summary>
Token for unsubscribing from PopupView's Closed event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_OnPointerExitedToken">
            <summary>
Token for unsubscribing from BackButton OnPointerExited event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_OnPointerEnteredToken">
            <summary>
Token for unsubscribing from BackButton OnPointerEntered event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_vpaidEventToken">
            <summary>
Token for unsubscribing from VpaidControl OnVpaidEvent event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_keyPressEventToken">
            <summary>
Token for unsubscribing from key pressed event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_windowActivatedToken">
            <summary>
Token for unsubscribing from window activated event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_unloadedToken">
            <summary>
Token for unsubscribing from MediaElements unloaded event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaStateChangedToken">
            <summary>
Token for unsubscribing from StateChanged event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_markerReachedToken">
            <summary>
Token for unsubscribing from MarkerReached event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaEndedToken">
            <summary>
Token for unsubscribing from MediaEnded event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaOpenedToken">
            <summary>
Token for unsubscribing from MediaOpened event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaFailedToken">
            <summary>
Token for unsubscribing from MediaFailed event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_mediaTimeoutTickToken">
            <summary>
Token for unsubscribing from Tick event for the countdown timer.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_countdownTickToken">
            <summary>
Token for unsubscribing from Tick event for the countdown timer.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_currentRequestLock">
            <summary>
Lock for controlling access to the m_currentRequest object.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_currentRequest">
            <summary>
Stores the current reuqest for an ad so that it can be cancelled later.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnPopupClosedToRestoreFocus(System.WeakReference,System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
When the PopupView is closed, this will restore focus to the element that had focus prior to the ad taking it.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.Initialize">
            <summary>
Initializes statics used by this class, currently this is just s_isMediaPlaybackSupported.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.CheckContentProgress">
            <summary>
Called in the countdown timer tick, checks to see if content has progressed and if it doesn't
for five seconds it fires the error occurred event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnAdRequestComplete(Windows.Foundation.IAsyncOperation`1{Microsoft.Advertising.Shared.WinRT.AdScheduleResult^},Windows.Foundation.AsyncStatus)">
            <summary>
Handler for the AdRequestComplete event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnVpaidEvent(System.Object,Microsoft.Advertising.WinRT.UI.VpaidEventArgs)">
            <summary>
Event handler for VpaidControl's OnVpaidEvent.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnWindowActivated(System.Object,Windows.UI.Core.WindowActivatedEventArgs)">
            <summary>
Event handler for app being activated or deactivated (gaining or losing focus). This handler is used for pausing/resuming the ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnPointerExited(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
Event handler for the back button losing the mouse hover. This handles the opacity of the button, so it fades.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnPointerEntered(System.Object,Windows.UI.Xaml.Input.PointerRoutedEventArgs)">
            <summary>
Event handler for the back button being hovered over. This handles the opacity of the button, so it is visible.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnBackButtonTapped(System.Object,Windows.UI.Xaml.Input.TappedRoutedEventArgs)">
            <summary>
Event handler for the back button being tapped. This tells the popup to close.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnKeyPressed(Windows.UI.Core.CoreWindow,Windows.UI.Core.KeyEventArgs)">
            <summary>
Event handler for pressing a key when ad is shown. This is used to determine when we should show/hide the back button.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnAdTapped(System.Object,Windows.UI.Xaml.Input.TappedRoutedEventArgs)">
            <summary>
Event handler for tapping the Ad. This is used to determine when we should show/hide the back button.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnClickThroughClicked(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
Event handler for Click-Through Clicked event Closed event. This is used to fire the click through tracking
event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.ReportErrorTrackingEvent(Microsoft.Advertising.WinRT.UI.VastErrorCode)">
            <summary>
Reports Vast/Vmap error activity reporting url along with the vast error code
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnPopupClosed(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
Event handler for PopupView Closed event. If this is triggered before the content reaches natural content
duration end we fire the cancelled event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnUnloaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
Event handler for Unloaded event, performs cleanup of PreRollAd.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnMediaStateChanged(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
Event handler for the MediaStateChanged event. Unsubscribed from the first time "Playing" state is reached.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnMarkerReached(System.Object,Windows.UI.Xaml.Media.TimelineMarkerRoutedEventArgs)">
            <summary>
Event handler for MarkerReached event. Triggers firing of VAST/VMAP reporting urls if present.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnMediaEnded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
Event handler for MediaEnded event. Triggers firing of the Completed event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnMediaOpened(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
Event handler for MediaOpened event. Triggers updating the layout of the MediaElement and adding of time line markers.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnMediaFailed(System.Object,Windows.UI.Xaml.ExceptionRoutedEventArgs)">
            <summary>
Event handler for the MediaFailed event. Triggers closing of the popup and raising of the InterstitialAds
ErrorOccurred event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnMediaTimeoutTimerTick(System.Object,System.Object)">
            <summary>
Callback for the media timeout timer. If called it indicates that the media has 
timedout and we need to close the interstitial ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.OnCountdownTimerTick(System.Object,System.Object)">
            <summary>
Callback for the countdown timer, used to update the time remaining in the UI.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.UpdateRemainingTime">
            <summary>
Updates the countdown timer with the remaining time.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.DrawBackButton(Windows.UI.Xaml.Controls.Canvas)">
            <summary>
Helper method for drawing the back button, an arrow pointing left in a circle.
</summary>
            <param name="c">Canvas to draw the back button on.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.CreateTimelineMarker(System.Int64,System.String)">
            <summary>
Helper method for creating timeline markers.
</summary>
            <param name="time">Point to put the marker in 100-nanosecond units of total duration.</param>
            <param name="name">Human readable name for the marker to aid in firing events.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.ConvertToSeconds(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Converts a string in format hh:mm:ss.sss to the number of seconds
<param name="skipOffset">skipoffset in the format hh:mm:ss or hh:mm:ss.sss</param><param name="mediaDuration">the total length of the media, if an invalid skipoffset is encountered, we return the max value i.e. 
media duration to not allow the user to skip the ad</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.LogApiUsage(System.String,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Log API usage data
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.ReportVpaidEvent(System.String,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary />
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.UnsubscribeFromAllEvents">
            <summary>
Unsubscribes from all events.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.UnsubscribeFromMediaStateChangedEvent">
            <summary>
Unsubscribes from media elements state changed event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.UnsubscribeFromCloseButtonVisibilityEvent">
            <summary>
Unsubscribes from the close button show hide events
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.UnsubscribeFromWindowActivatedEvent">
            <summary>
Unsubscribes from the window activated event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.SubscribeToWindowActivatedEvent">
            <summary>
Subscribes to the window activated event. This event is used to determine when the app hosting an
interstitial ad gains or loses focus.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.UnsubscribeFromMediaElementEvents">
            <summary>
Unsubscribes handlers to the MediaElement events MediaFailed, MediaOpened, MediaEnded, MarkerReached.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.UnsubscribeFromVpaidControlEvents">
            <summary>
Unsubscribes handlers from the VpaidControl events.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.SubscribeToVpaidControlEvents">
            <summary>
Adds handlers to the VpaidControl events.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.SubscribeToMediaElementEvents">
            <summary>
Adds handlers to the MediaElement events MediaFailed, MediaOpened, MediaEnded, MarkerReached.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AddMarkersToMediaElement">
            <summary>
Adds start, firstQuartlie, midPoint, thirdQuartile and complete markers to the MediaElement
to be used for VAST/VMAP reporting.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.Resume">
            <summary>
Performs resume tasks, this includes starting the media playing, firing the resume event and restarting
the countdown timer.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.ShowHideCloseButton">
            <summary>
Show hide close buttons	
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.Pause">
            <summary>
Performs pause tasks, this includes pausing the media, firing the pause event and pausing
the countdown timer.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.CleanupMediaTimeoutTimer">
            <summary>
Stops the media timeout timer if it is running and unsubscribes it's events.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.StartMediaTimeoutTimer">
            <summary>
Starts the media timeout timer. The timer is stopped if the media element
moves into the 'Playing' state.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.CleanupCountdownTimer">
            <summary>
Stops the countdown timer if it is running and unsubscribes from it's events.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.StartCountdownTimer">
            <summary>
Starts the countdown timer if m_showCountdownTimer is set to true.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.CreateOpacityStoryboard(System.Double,System.Double,Windows.UI.Xaml.UIElement)">
            <summary>
Helper method for creating back button opacity animations.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AddBufferingProgressBar">
            <summary>
Adds a progress bar to the popup which is displayed until the MediaElement moves into the Playing state.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AddBackButtonToGrid(System.Double)">
            <summary>
Adds the back button to the main grid, initialising handlers for tap and the fade in/out animations which
are triggered when the ad popup is tapped.
<param name="startOpacity">Initial Opacity for the back button on an ad popup</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AddClickThroughTextToGrid(System.String)">
            <summary>
Adds the Click-Through element to the center top of the popup.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AddAdvertisementTextToGrid">
            <summary>
Adds the "Advertisement" indicator to center bottom of the popup.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AddCountdownTextblockToGrid">
            <summary>
Adds the count down time text block to m_grid if m_showCountdownTimer is set to true.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AddVpaidControlToGrid">
            <summary>
Initializes and adds a VpaidControl used for playing a VPAID video ad to m_grid.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AddMediaElementToGrid">
            <summary>
Initializes and adds a MediaElement used for playing the video to m_grid.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.CreatePopup">
            <summary>
Creates the popup and adds a child element to it, m_grid, which contains
a media player, advertisement notification, back button, progress bar and optionally
a click through link
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.PositionAndSizeChildren(System.Double,System.Double)">
            <summary>
Method passed as a delegate to the PopupView used to notify the IntersitialVideoAd
that it has to update it's layout
</summary>
            <param name="width">Width of the hosting control.</param>
            <param name="height">Height of the hosting control.</param>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.MediaConstraints">
            <summary>
Indicates which mime-types are suppported.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.m_clickThroughButton">
            <summary>
Reference to the clickthrough Button displayed in the interstitial AD
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.AdType">
            <summary>
Returns the type of the derived instance derived from the AbstractInterstitialAd base class.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.IsRequestInProgress">
            <summary>
Tracks if a request is in progress.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.State">
            <summary>
Returns the state of the interstitial ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.SelectMedia(Windows.Foundation.Collections.IVectorView`1{Microsoft.Advertising.Shared.WinRT.VideoResource^})">
            <summary>
Selects the media files based on bitrate and format 
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.CanPlayType(System.String)">
            <summary>
Checks if the media file MIME type is in the list of supported MIME types.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.IsNetworkMetered">
            <summary>
Returns whether the network connection is Metered or not
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.IsPreroll(System.String)">
            <summary>
Checks if the timeoffset in the ad package suggests that ad is preroll
<param name="timeoffset">the timeoffset in percentage, start, 00:00:00 or 00:00:00.000 format for the current ad break</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.GetPrerollAdPod(Microsoft.Advertising.Shared.WinRT.AdScheduleResult)">
            <summary>
Parses the vast response and returns the first PreRoll AdPod it encounters
<param name="vastResponse">the parsed vast response obtained from RequestAd</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.SelectAdAndCreatePopUp(Microsoft.Advertising.Shared.WinRT.AdScheduleResult)">
            <summary>
Selects the first PreRoll video ad from the parsed Vast/Vmap response
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.RequestAd">
            <summary>
Attempts to request an ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.Close">
            <summary>
Closes the interstitial ad if showing.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.Show">
            <summary>
Shows the interstitial ad if in the ready state.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.#ctor(System.String,System.String,System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.AdTagCollection,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Constructor.
</summary>
            <param name="applicationId">applicationId to use for the interstitial ad request.</param>
            <param name="adUnitId">adUnitId to use for the interstitial ad request.</param>
            <param name="url">Location to request the ad from.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.InterstitialVideoAd">
            <summary>
Represents an interstitial video ad and is responsible for requesting the video ad,
showing any UI elements and closing any UI element.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Utils.TraceAdServed">
            <summary>
Enum representing whether an ad was served or not
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.Tokens.AdBroker.AdBrokerAppHeightToken">
            <summary>
Converts the height app to a string in the format vah=0.00 (2 decimal places)
for use in the adbroker query string
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.Tokens.AdBroker.AdBrokerAppWidthToken">
            <summary>
Converts the width app to a string in the format vaw=0.00 (2 decimal places)
for use in the adbroker query string
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.Tokens.AdBroker.AdBrokerIsAppInFocusToken">
            <summary>
Converts the app's focus state to a string in the format vhf=1 (0 or 1)
for use in the adbroker query string
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.Tokens.AdBroker.AdBrokerAdOpacityToken">
            <summary>
Converts the ad's opacity to a string in the format vop=1.00 (2 decimal places)
for use in the adbroker query string
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.Tokens.AdBroker.AdBrokerAdOccludedToken">
            <summary>
Converts the ad's occlusion state to a string in the format vocc=1 (0 or 1)
for use in the adbroker query string
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.Tokens.AdBroker.AdBrokerPercentInViewToken">
            <summary>
Converts the ad's percent in view to a string in the format vosp=1.00 (2 decimal places)
for use in the adbroker query string
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.Tokens.AdBroker.AdBrokerAdYPositionInAppToken">
            <summary>
Converts the y position of the ad to a string in the format vy=0.00 (2 decimal places)
for use in the adbroker query string
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.Tokens.AdBroker.AdBrokerAdXPositionInAppToken">
            <summary>
Converts the x position of the ad to a string in the format vx=0.00 (2 decimal places)
for use in the adbroker query string
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.Tokens.OptToken">
            <summary>
BasicTemplateToken holds a token name and value
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.Decorators.DeviceInfoDecorator.ConvertHexToDotNetVersion(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
returns standard .NET version from ULONGLONG
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.Decorators.DeviceInfoDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDerefe">
            <summary>
appends the device form, family, and family version to the request parameter
<param name="url">the request url to be decorated with device info</param><param name="headers">the header to be decorated if need be</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.Decorators.AdvertisingIdDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDer">
            <summary>
appends the advertising id to the request parameter
<param name="url">the request url to be decorated with advertising id info</param><param name="headers">the header to be decorated if need be</param></summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Decorators.LocationDecorator.m_postalCode">
            <summary>
Postal Code used to decorate url.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Decorators.LocationDecorator.m_countryOrRegion">
            <summary>
Country or region used to decorate url.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Decorators.LocationDecorator.m_geoLocation">
            <summary>
GeoLocation information used to decorate url.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.Decorators.LocationDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDerefere">
            <summary>
Appends the location request parameters to the request url, eg:
"loc=47.6313~-122.15822&amp;loptin=1&amp;geoacc=10&amp;geosrc=WiFi&amp;ctry=AU&amp;zip=6024"
<param name="url">The request url to be decorated with location information.</param><param name="headers">The header to be decorated if need be.</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.Decorators.LocationDecorator.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Shared.GeoLocation&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Constructor
<param name="geoLocation">GeoLocation to decorate URL with, this contains latitude, longitude and 
source of location.</param><param name="countryOrRegion">Country or Region to decorate URL with, this is a 2 letter country or region code.</param><param name="postalCode">Postal Code to decorate URL with.</param></summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Decorators.LocationDecorator.k_httpRequestValueConstantLocationOptIn">
            <summary>
GeoLocation infromation opt-in value "1"
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Decorators.LocationDecorator.k_httpRequestParameterLocationOptIn">
            <summary>
GeoLocation infromation opt-in key "loptin"
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Decorators.LocationDecorator.k_httpRequestValueLocationSeparator">
            <summary>
Separator of latitude and longitude values "~"
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Decorators.LocationDecorator.k_httpRequestParameterGeoPostitionSource">
            <summary>
GeoLocation source key "geosrc"
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Decorators.LocationDecorator.k_httpRequestParameterGeoAccuracy">
            <summary>
Accuracy of the GeoLocation information key "geoacc"
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Decorators.LocationDecorator.k_httpRequestParameterLocation">
            <summary>
Geolocation parameter key "loc"
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Decorators.LocationDecorator.k_httpRequestParameterPostalCode">
            <summary>
Postal code key "zip"
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Decorators.LocationDecorator.k_httpRequestParameterCountryOrRegion">
            <summary>
Country or Region key "ctry"
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.Decorators.StoreInfoDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDerefer">
            <summary>
appends the store id to the request parameter
<param name="url">the request url to be decorated with store info</param><param name="headers">the header to be decorated if need be</param></summary>
        </member>
        <member name="F:Microsoft.Advertising.Shared.ArcRequestBuilder.m_postalCode">
            <summary>
Postal Code to be used by the LocationDecorator.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Shared.ArcRequestBuilder.m_countryOrRegion">
            <summary>
Country or region to be used by the LocationDecorator.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Shared.ArcRequestBuilder.m_geoLocation">
            <summary>
GeoLocation to be used by the LocationDecorator.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Shared.ArcRequestBuilder.m_adUnitId">
            <summary>
AdUnitId to be used by the AdUnitIdDecorator.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Shared.ArcRequestBuilder.m_appId">
            <summary>
ApplicationID to be used by the AppIdDecorator.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.ArcRequestBuilder.SetAdUnitId(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Sets the adUnitId to be used by the AdUnitIdDecorator.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.ArcRequestBuilder.SetApplicationId(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Sets the applicationId to be used by the AppIdDecorator.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.ArcRequestBuilder.SetPostalCode(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Sets the postal code to be used by the LocationDecorator.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.ArcRequestBuilder.SetCountryOrRegion(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Sets the country or region to be used by the LocationDecorator.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.ArcRequestBuilder.SetGeoLocation(std.shared_ptr&lt;Microsoft.Advertising.Shared.GeoLocation&gt;)">
            <summary>
Sets the GeoLocation to be used by the LocationDecorator.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.ArcRequestBuilder.BuildRequest">
            <summary>
builds the request url and adds the decorators for the request url params
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AdPercentOnScreen.ToJson">
            <summary>
Returns the percent the uielement is on screen as a JSON string ("key":value)
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AdPercentOnScreen.Update">
            <summary>
Calculates the percent the ad is on screen. If the value has changed since the last check, it flags itself as changed.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AdPercentOnScreen.#ctor(Microsoft.Advertising.WinRT.UI.WindowWrapper,Windows.UI.Xaml.FrameworkElement,std.shared_ptr&lt;Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState&gt;)">
            <summary>
Constructor
</summary>
            <param name="currentWindow">The current window of the application</param>
            <param name="uiElement">The framework element that will be used in the percentonscreen calculation</param>
            <param name="viewabilityState">If not null, the viewable property will publish its value to the viewabilityState</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ProjectedIAdLogger.SetASID(System.String)">
            <summary>
Wrapper for AdCallTraceLogger to set asid
</summary>
            <param name="asid">asid</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ProjectedIAdLogger.SetSdkType(Microsoft.Advertising.Shared.WinRT.SdkType)">
            <summary>
Wrapper for AdCallTraceLogger to set sdk type
</summary>
            <param name="sdkType">sdktype</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ProjectedIAdLogger.SetSourceUrl(System.String)">
            <summary>
Wrapper for AdCallTraceLogger to set source url
</summary>
            <param name="sourceUrl">source url</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ProjectedIAdLogger.SetAdUnitId(System.String)">
            <summary>
Wrapper for AdCallTraceLogger to set adunit id
</summary>
            <param name="adUnitId">adunit id</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ProjectedIAdLogger.SetPublisherId(System.String)">
            <summary>
Wrapper for AdCallTraceLogger to set publisher id
</summary>
            <param name="publisherId">publisher id</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ProjectedIAdLogger.LogError(System.UInt32,System.String)">
            <summary>
Wrapper for AdCallTraceLogger to log error scenarios
</summary>
            <param name="code">error code</param>
            <param name="message">error message</param>
        </member>
        <member name="T:Microsoft.Advertising.Vast.XmlUtils">
            <summary>
Class for Xml Utilities
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewablePropertyCollectionCreator.CreateViewablePropertyCollection(Microsoft.Advertising.WinRT.UI.WindowWrapper,Windows.UI.Xaml.FrameworkElement,std.shared_ptr&lt;Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState&gt;)">
            <summary>
Creates a collection of viewable properties. This currently adds all available
viewable properties to a collection and returns them.
</summary>
            <param name="currentWindow">The current window of the application</param>
            <param name="uiElement">The framework element that will be used for all viewable properties</param>
            <param name="viewabilityState">The viewability state to monitor</param>
        </member>
        <member name="T:Microsoft.Advertising.Utils.WRL.WRLUtils">
            <summary>
This class has some utility functions to make WRL easier to use
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AdPlacement.RequestAdAsync(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Concurrency.cancellation_token_source)">
Returns the current valid ad and if needed, starts the web request for fetching the next ad.
</member>
        <member name="M:Microsoft.Advertising.Shared.AdPlacement.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDeref">
Private constructor - the public interface exposes a static create method.
</member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser.WebBrowserLoadCompletedHandler(Windows.UI.Xaml.Controls.WebView,Windows.UI.Xaml.Controls.WebViewNavigationCompletedEventArgs)">
            <summary>
Overriding medthod so that the logic for null check for AdControl can be handled only in AdvertisingWebBrowser
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser.CleanUp">
            <summary>
Cleanup any resources used.
</summary>
            <summary>
Cleanup any resources used.
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser.AdInitialized">
            <summary>
event that is fired when an ad is rendered
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser.Close">
            <summary>
Close the popup view.
</summary>
            <summary>
Close the popup view.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser.Show">
            <summary>
Show the popup view in full screen mode.
</summary>
            <summary>
Show the popup view in full screen mode.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser.LoadAd(Microsoft.Advertising.Shared.WinRT.Advertisement)">
            <summary>
Load Ad content and put it into a popup view.
</summary>
            <param name="ad">The ad to be loaded into popup view.</param>
            <summary>
Load Ad content and put it into a popup view.
</summary>
            <param name="ad">The ad to be loaded into popup view.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Constructor.
</summary>
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.InterstitialWebBrowser">
            <summary>
Class for displaying an interstitial mraid ad content.
It mainly uses a webview control to display html/js content and provide its with Mraid support.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AdOccluded.ToJson">
            <summary>
Returns whether or not the uielement is occluded as a JSON string ("key":value)
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AdOccluded.Update">
            <summary>
Checks to see if the ad is occluded. If so, flags itself as changed.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AdOccluded.#ctor(Microsoft.Advertising.WinRT.UI.WindowWrapper,Windows.UI.Xaml.FrameworkElement,std.shared_ptr&lt;Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState&gt;)">
            <summary>
Constructor
</summary>
            <param name="currentWindow">The current window of the application</param>
            <param name="uiElement">The framework element to check occlusion on in the currentWindow</param>
            <param name="viewabilityState">If not null, the viewable property will publish its value to the viewabilityState</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.SdkInfoProvider.GetSdkInfo">
            <summary>
Retrieve the sdk info
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Shared.WinRT.SdkInfo.runtimeType">
            <summary>
Current runtime type
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Shared.WinRT.SdkInfo.client">
            <summary>
SDK client
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Shared.WinRT.SdkInfo.sdkVersion">
            <summary />
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.SdkInfo">
            <summary>
structure containing information about the SDK and runtime
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VMAPResolver.CreateVmapNoadResponse">
Freewheel no-ad response (empty VAST or empty VMAP)
</member>
        <member name="M:Microsoft.Advertising.Vast.VASTResolver.ExtractWrapperEventsIntoAd(Microsoft.Advertising.Vast.Ad,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Wrapper!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Extract the tracking events from an parsed Wrapper DOM element.
</summary>
            <param name="ad">Ad object where the tracking events will be added.</param>
            <param name="wrapper">Parsed DOM object potentially containing tracking events for merging.</param>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VASTResolver.ResolveUrl(System.String,Concurrency.cancellation_token_source)">
            <summary>
Resolve a url into a VAST object
</summary>
            <param name="url">Url to resolve</param>
            <param name="cts">The cancellation token source for the returned task</param>
            <return>Populated VAST object</return>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VASTResolver.Resolve(std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.VAST!System.Runtime.CompilerServices.IsConst&gt;,Concurrency.cancellation_token_source)">
            <summary>
Resolve a string of xml into a VAST object
</summary>
            <param name="xml">String to resolve</param>
            <param name="cts">The cancellation token source for the returned task</param>
            <return>Populated VAST object</return>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VASTResolver.#ctor(System.Boolean,System.Boolean,System.UInt32,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Constructor
<param name="followRedirects">Follow wrappers and redirects</param><param name="allowMultipleAds">Allow multiple ads in an adBreak</param><param name="currentWrapperCount">The wrapper count of this resolver</param><param name="context">The context to use for this ad call</param></summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.VASTResolver">
            <summary>
VAST Resolver class
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Strict.WinRt.EventsReporterExtractor">
            <summary>
This class exists to explicitly violate the data encapsulation of
events reporter in order to convert it to the current WinRt classes
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vmap.VmapResolverStrict.CheckAdBreakForError(std.shared_ptr&lt;Microsoft.Advertising.Documents.Vmap.AdBreak!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Check an ad break DOM for errors and fire them if it can
</summary>
            <param name="adbreak">The ad break DOM</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vmap.VmapResolverStrict.FireError(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,System.Int32,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vmap.AdBreak!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Fire an error for an ad break DOM
</summary>
            <param name="context">The context the use</param>
            <param name="errorCode">The error code to fire</param>
            <param name="errorMessage">The error message</param>
            <param name="adbreak">The ad break DOM</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vmap.VmapResolverStrict.FireError(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,System.Int32,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Fire an error for an error url
</summary>
            <param name="context">The context the use</param>
            <param name="errorCode">The error code to fire</param>
            <param name="errorMessage">The error message</param>
            <param name="url">The error url</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.CheckInLineAdForError(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Check an Ad DOM for errors in its InLine, if it has one.
</summary>
            <param name="context">The context to use</param>
            <param name="ad">The ad DOM to check</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.FireError(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,System.Int32,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Fire an error for an error url
</summary>
            <param name="context">The context to use</param>
            <param name="errorCode">The error code to fire</param>
            <param name="url">The error url</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.FireError(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,System.Int32,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Wrapper!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Fire an error for a wrapper
</summary>
            <param name="context">The context to use</param>
            <param name="errorCode">The error code to fire</param>
            <param name="wrapper">The wrapper the error occurred in</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.FillInResolvedAdWithBuffet(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary>
Attempt to fill in one specific failed resolvedAd with the given buffet ad
</summary>
            <param name="context">The context to use</param>
            <param name="flags">The wrapper flags to use</param>
            <param name="buffetAd">The buffet ad to use</param>
            <param name="resolvedAd">The resolved ad that failed and needs to be filled in</param>
            <param name="depth">The current wrapper depth</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.FillInFallbackAds(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;,std.allocator&lt;std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.share">
            <summary>
Go through the resolved ad packages and fill in failed / no ads with ads from the buffet.
The buffet ads have not been resolved yet, so they will need to be resolved.
</summary>
            <param name="context">The context to use</param>
            <param name="flags">The wrapper flags to use</param>
            <param name="resolvedPackages">The resolved packages that needs to be filled in</param>
            <param name="buffet">The buffet to use to fill in the ads with</param>
            <param name="depth">The current wrapper depth</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.AddWrapperToWrapperGroup(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,std.vector&lt;std.function&lt;(std.function&lt;(void)&gt;)(std.function&lt;(void)&gt;)&gt;,std.allocator&lt;std.function&lt;(std.function&lt;(void)&gt;)(std.function&lt;(void)&gt;)&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Wrapper!System.Runtime.CompilerServices.IsConst&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDere">
            <summary>
Generates a wrapper resolving callback and adds it into a wrapper group to be resolved asynchronously in parallel.
</summary>
            <param name="context">The context to use</param>
            <param name="wrapperGroup">The group of wrapper resolution callbacks to add to</param>
            <param name="packagesToMergeInto">The vector of packages to append the wrapper results into</param>
            <param name="wrapper">The wrapper to resolve</param>
            <param name="flags">The wrapper flags to use</param>
            <param name="depth">The current wrapper depth</param>
            <param name="lockObject">The mutex to protect access to the packages to merge into</param>
            <param name="timedOut">
A flag that represents whether the wrapper resolution request has timed out. 
If the request has timed out, the packagesToMergeInto reference is invalid and we shouldn't append
results into it.
</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.ResolveAllWrappers(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;System.Int32,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Wrapper!System.Runtime.CompilerServices.IsConst&gt;,std.less&lt;System.Int32&gt;,std.allocator&lt;std.pair&lt;System.Int32!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Wrapper!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;&gt;,std.vector&lt;std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;,std.allocator&lt;std.vect">
            <summary>
Iterates through the map of wrappers to resolve and resolves them all into the resolvedPackages
</summary>
            <param name="context">The context to use</param>
            <param name="flags">The wrapper flags to use to resolve the packages with</param>
            <param name="wrappersToResolve">
The map of vectors to resolve. The key is the index of the resolved packages
vector to store the results into.
</param>
            <param name="resolvedPackages">The resolved packages to store the wrapper results into</param>
            <param name="depth">The current wrapper depth</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.HandleResolvedWrapperPackages(Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds the download, parsed, and resolved packages from a wrapper into a results vector.
If the wrapper's allow multiples flag is false, it only adds one of the
ad packages into the packagesToMergeInto; otherwise all of them arg
appended.
</summary>
            <param name="flags">The wrapper flags</param>
            <param name="packages">The packages resolved from the wrapper</param>
            <param name="packagesToMergeInto">The vector of packages to store the results into</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.RunPackageCallback(std.function&lt;(std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtim">
            <summary>
Helper to execute a callback if it's not null
</summary>
            <param name="callback">A callback to run if it's not null</param>
            <param name="args">The arguments to invoke the callback with</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.SetWrapperFlags(std.shared_ptr&lt;Microsoft.Advertising.Documents.UacWrapper!System.Runtime.CompilerServices.IsConst&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Create a WrapperFlags from a wrapper, using a wrapperFlags as a default
</summary>
            <param name="wrapper">The wrapper to pull flags from</param>
            <param name="flags">The flags to initialize the return value with</param>
            <returns>A wrapperflags created from the given wrapper</returns>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.FlattenPackages(std.vector&lt;std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;,std.allocator&lt;std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
The resolved packages is a vector of ad 'slots' that can end up as a vector of packages.
This is flattened out to a vector of packages
</summary>
            <param name="packages">A vector of vector of packages that have been resolved and need to be flattened</param>
            <returns>A vector of packages flattened out from the resolved packages</returns>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.ProcessWrapperResponse(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Wrapper!System.Runtime.CompilerServices.IsConst&gt;,std.function&lt;(std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;,std.shared_ptr&lt;Microsoft.Advertising.Net">
            <summary>
Parses the download VAST web response into a DOM. 
Recursively resolve the DOM into a set of ad packages.
Call the callback with the ad packages.
</summary>
            <param name="context">The context to use</param>
            <param name="wrapper">The wrapper that was requested</param>
            <param name="callback">The callback</param>
            <param name="response">The http response for the wrapper download</param>
            <param name="flags">The wrapper flags</param>
            <param name="depth">The current wrapper depth</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.ResolveWrapperIntoAdPackages(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Wrapper!System.Runtime.CompilerServices.IsConst&gt;,std.function&lt;(std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;,Microsoft.Advertising.Strict.Vast.">
            <summary>
Resolves a wrapper to a vector of ad packages, then calls the callback with those packages.
This can be invoked synchronously or asynchronously.
</summary>
            <param name="context">The context to use</param>
            <param name="wrapper">The wrapper to resolve</param>
            <param name="callback">The callback to execute once the wrapper has been resolved</param>
            <param name="flags">The wrapper flags to use when resolving this wrapper</param>
            <param name="depth">The current wrapper depth</param>
            <param name="async">True if this call needs to be run asynchronously; default false</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.ResolveInlines(std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;,std.vector&lt;std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;,std.allocator&lt;std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.AdPackage&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.MediaConstraints!System.Runtime.CompilerServices.IsConst&gt;,std.s">
            <summary>
Resolves any inline ads in the vector of ads to resolve and
returns a map of wrappers to resolve
</summary>
            <param name="adsToResolve">A vector of ads to resolve</param>
            <param name="resolvedPackages">When an ad package has been resolved, it is stored into this resolvedPackages</param>
            <returns>The map of wrappers to resolve</returns>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.GetAdsToResolve(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;System.Int64,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;,std.less&lt;System.Int64&gt;,std.allocator&lt;std.pair&lt;System.Int64!System.Runtime.CompilerServices.IsConst,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Document">
            <summary>
Based on the wrapper flags, figure out what ads need to be resolved
and return a vector of ads to resolve
</summary>
            <param name="ads">The set of input ads</param>
            <param name="pod">The pod ads to</param>
            <param name="buffet">The the buffet ads</param>
            <returns>The set of ads to resolve</returns>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.GetPodsAndBuffet(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;System.Int64,std.vector&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;,std.allocator&lt;std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.Ad!System.Runtime.CompilerServices.IsConst&gt;&gt;&gt;,std.less&lt;System.Int64&gt;,std.allocator&lt;std.pair&lt;System.Int64!System.Runtime.CompilerServices.">
            <summary>
Splits a given set of Ads into pod and buffet ads.
</summary>
            <param name="ads">The set of input ads</param>
            <param name="pod">The pod to add the pod ads to</param>
            <param name="buffet">The buffet to add the buffet ads to</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.ResolveIntoAdPackagesInternal(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.VAST!System.Runtime.CompilerServices.IsConst&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.MediaConstraints!System.Runtime.CompilerServices.IsConst&gt;,System.Int32)">
            <summary>
The internal method for resolving a VAST. This is called recursively when
resolving wrappers so it returns mutable packages to allow merging.
The public ResolveIntoPackages returns immutable IAdPackages, so they
cannot be modified.
</summary>
            <param name="context">The context to use</param>
            <param name="VAST">The VAST DOM to resolve</param>
            <param name="flags">The wrapper flags to use when resolving this VAST</param>
            <param name="depth">The current wrapper depth; defaults to zero</param>
            <returns>A vector of mutable AdPackages</returns>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.VastResolverStrict.ResolveIntoAdPackages(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,std.shared_ptr&lt;Microsoft.Advertising.Documents.Vast3.VAST!System.Runtime.CompilerServices.IsConst&gt;,Microsoft.Advertising.Strict.Vast.WrapperFlags!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Strict.Bom.MediaConstraints!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Resolves a VAST DOM into a set of ad packages
</summary>
            <param name="context">The context to use</param>
            <param name="VAST">The VAST DOM to resolve</param>
            <param name="flags">The wrapper flags to use when resolving this VAST</param>
            <returns>A vector of immutable IAdPackages</returns>
        </member>
        <member name="T:Microsoft.Advertising.Strict.Vast.VastResolverStrict">
            <summary>
VastResolver takes a given VAST dom and converts it to a set of ad package boms.
it will resolve all wrappers and fire errors.
The methods are mostly static to make threading easier and safer.
Various timeout scenarios can cause the threads to run after the request may have expired
which would lead to access violations.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.WrapperFlags.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Constructor, sets the flags to the given values
</summary>
            <param name="follow">The value for the followAdditionalWrappers flag</param>
            <param name="allow">The value for the allowMultipleAds flag</param>
            <param name="fallback">The value for the fallbackOnNoAd flag</param>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Vast.WrapperFlags.#ctor">
            <summary>
Constructor, sets all flags to true
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Strict.Vast.WrapperFlags">
            <summary>
WrapperFlags holds the three flags for resolving wrappers
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.AdBrokerAdPlacement.SetViewabilityState(std.shared_ptr&lt;Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState&gt;)">
            <summary>
The viewability state contains the current state of all the properties being monitored (e.g. opacity, occlusion, percent in view),
so setting this here will allow this class to append the properties to the ad request query string.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.AdBrokerAdPlacement.UseIntServer(System.Boolean)">
            <summary>
Set this to use the Int environment instead of Prod
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.AdBrokerAdPlacement">
            <summary>
This class subclasses AdPlacement to allow AdBroker use in existing code
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.AdBrokerAdPlacementPayloadHandler.HandlePayload(std.shared_ptr&lt;Microsoft.Advertising.Ads.IAdPayload&gt;,Microsoft.Advertising.WException)">
            <summary>
From IAdPayloadHandler; Handles the response from the request
</summary>
            <param name="adPayload">The received ad payload</param>
            <param name="exception">The exception from the request, if there is one</param>
            <returns>True if the given payload was recognized and handled by this handler</returns>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.AdBrokerAdPlacementPayloadHandler.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Concurrency.SignalEvent&gt;,std.shared_ptr&lt;Microsoft.Advertising.Shared.UniversalAd&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Microsoft.Advertising.WException*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructor
</summary>
            <param name="evt">An event to signal when the request has been processed</param>
            <param name="result">The universal ad payload parsed from the response, if successsful</param>
            <param name="exResult">The exception from the ad payload, if there is one</param>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.AdBrokerAdPlacementPayloadHandler">
            <summary>
This class handles the response from an AdBroker request
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.ValidateJson(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Logs error and returns AdScehuler with WException
</summary>
            <param name="context">context to use for requests</param>
            <param name="responseString">Response string from Adbroker API response</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.LogErrorAndReturnAdScheduleResult(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Microsoft.Advertising.NativeErrorCode,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Logs error and returns AdScehuler with WException
</summary>
            <param name="context">context to use for requests</param>
            <param name="errorEnum">error code of the error</param>
            <param name="errorMessageString">Error message to be logged</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleStrictAsync(System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.SdkType,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Microsoft.Advertising.Shared.WinRT.ProjectedMediaConstraints)">
            <summary>
Retrieves an ad delivery schedule using strict VAST 3 rules
</summary>
            <param name="serviceUrl">Url to use to request manifest</param>
            <param name="timeoutMS">milliseconds to wait before cancelling opteration</param>
            <param name="context">context to use for requests</param>
            <param name="mediaConstraints">media constraints to be applied to the returned media files</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleAsync(System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.SdkType,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Retreives an ad delivery schedule with ability to pass in context.
<param name="serviceUrl">Url to use to request manifest</param><param name="timeoutMS">milliseconds to wait before cancelling opteration</param><param name="adTags">appeneded to the ad request url</param><param name="context">the context to use for requests</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleStrictAsync(System.String,System.String,System.Int32,System.Int32,System.UInt32,Microsoft.Advertising.Shared.WinRT.SdkType,Microsoft.Advertising.Shared.WinRT.AdTagCollection,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Microsoft.Advertising.Shared.WinRT.ProjectedMediaConstraints)">
            <summary>
Retrieves an ad delivery schedule using strict VAST 3 rules
<param name="appId">Application Id</param><param name="adId">Ad Unit Id</param><param name="width">Width of space available for ad</param><param name="height">Height of space available for ad</param><param name="timeoutMS">milliseconds to wait before cancelling opteration</param><param name="sdkType">the type of the SDK.</param><param name="adTags">appeneded to the ad request url</param><param name="context">the context to use for requests</param><param name="mediaConstraints">media constraints to be applied to the returned media files</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleAsync(System.String,System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.SdkType,Microsoft.Advertising.Shared.WinRT.AdTagCollection,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Retreives an ad delivery schedule with ability to pass in context.
<param name="appId">Application Id</param><param name="adId">Ad Unit Id</param><param name="timeoutMS">milliseconds to wait before cancelling opteration</param><param name="sdkType">the type of the SDK.</param><param name="adTags">appeneded to the ad request url</param><param name="context">the context to use for requests</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleStrictAsync(System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.SdkType,Microsoft.Advertising.Shared.WinRT.ProjectedContext,Microsoft.Advertising.Shared.WinRT.ProjectedMediaConstraints)">
            <summary>
Retrieves an ad delivery schedule using strict VAST 3 rules
<param name="serviceUrl">Url to use to request manifest</param><param name="timeoutMS">milliseconds to wait before cancelling opteration</param><param name="projectedContext">projected Context</param><param name="mediaConstraints">media constraints to be applied to the returned media files</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleStrictAsync(System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.SdkType,Microsoft.Advertising.Shared.WinRT.ProjectedMediaConstraints)">
            <summary>
Retrieves an ad delivery schedule using strict VAST 3 rules
<param name="serviceUrl">Url to use to request manifest</param><param name="timeoutMS">milliseconds to wait before cancelling opteration</param><param name="mediaConstraints">media constraints to be applied to the returned media files</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleAsync(System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.SdkType)">
            <summary>
Retrieves an ad delivery schedule 
<param name="serviceUrl">Url to use to request manifest</param><param name="timeoutMS">milliseconds to wait before cancelling operation</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleStrictAsync(System.String,System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.SdkType,Microsoft.Advertising.Shared.WinRT.AdTagCollection,Microsoft.Advertising.Shared.WinRT.ProjectedContext,Microsoft.Advertising.Shared.WinRT.ProjectedMediaConstraints)">
            <summary>
Retrieves an ad delivery schedule using strict VAST 3 rules
<param name="appId">Application Id</param><param name="adId">Ad Unit Id</param><param name="timeoutMS">milliseconds to wait before cancelling opteration</param><param name="sdkType">the type of the SDK.</param><param name="adTags">appended to the ad request url</param><param name="projectedContext">projected Context</param><param name="mediaConstraints">media constraints to be applied to the returned media files</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleStrictAsync(System.String,System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.SdkType,Microsoft.Advertising.Shared.WinRT.AdTagCollection,Microsoft.Advertising.Shared.WinRT.ProjectedMediaConstraints)">
            <summary>
Retrieves an ad delivery schedule using strict VAST 3 rules
<param name="appId">Application Id</param><param name="adId">Ad Unit Id</param><param name="timeoutMS">milliseconds to wait before cancelling opteration</param><param name="sdkType">the type of the SDK.</param><param name="adTags">appended to the ad request url</param><param name="mediaConstraints">media constraints to be applied to the returned media files</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdScheduler.GetScheduleAsync(System.String,System.String,System.UInt32,Microsoft.Advertising.Shared.WinRT.SdkType,Microsoft.Advertising.Shared.WinRT.AdTagCollection)">
            <summary>
Retrieves an ad delivery schedule 
<param name="appId">Application Id</param><param name="adId">Ad Unit Id</param><param name="timeoutMS">milliseconds to wait before cancelling opteration</param><param name="sdkType">the type of the SDK.</param><param name="adTags">appended to the ad request url</param></summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.AdScheduler">
            <summary>
Entry point for a schedule based Ad response
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdScheduleResult.Value">
            <summary>
The ad schedule if the operation was successful
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdScheduleResult.Error">
            <summary>
The error that occurred, if any
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.AdScheduleResult">
            <summary>
Holds any error that occurred getting an AdSchedule or 
the AdSchedule if the operation was successful
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.ProjectedMediaConstraints.DefaultMediaConstraints">
            <summary>
Retrieve the default media constraints
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.ProjectedMediaConstraints.SupportedMimeTypes">
            <summary>
Retrieve the list of supported mime types
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ProjectedMediaConstraints.#ctor(Windows.Foundation.Collections.IVectorView`1{System.String^})">
            <summary>
Constructor
<param name="supportedMimeTypes">The supported mime types</param></summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd.m_isRequestInProgress">
            <summary>
Tracks if the interstitial ad has a request in progress.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd.IsRequestInProgress">
            <summary>
Tracks if a request is in progress.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd.State">
            <summary>
Returns the state of the interstitial ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd.RequestAd">
            <summary>
Attempts to request an ad
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd.Close">
            <summary>
Closes the interstitial ad if showing.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd.Show">
            <summary>
Shows the interstitial ad if in the ready state.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd.BroadcastErrorEvent(Microsoft.Advertising.ErrorCode,System.String)">
            <summary>
Helper method that broadcasts error events to any listeners 
and discard current ad.
</summary>
            <param name="error">the exception</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd.#ctor(Microsoft.Advertising.Shared.WinRT.AdTagCollection,Microsoft.Advertising.WinRT.UI.AdRequestParameters,System.String,System.String,System.String,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Constructor.
</summary>
            <param name="applicationId">applicationId to use for the interstitial ad request.</param>
            <param name="adUnitId">adUnitId to use for the interstitial ad request.</param>
            <param name="url">Location to request the ad from.</param>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.InterstitialDisplayAd">
            <summary>
Represents an interstitial display ad and is responsible for requesting the video ad,
showing any UI elements and closing any UI element.
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.IInterstitialWebBrowser.AdInitialized">
            <summary>
event that is fired when an ad is rendered
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IInterstitialWebBrowser.Close">
            <summary>
Close the popup view.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IInterstitialWebBrowser.Show">
            <summary>
Show the popup view in full screen mode.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IInterstitialWebBrowser.LoadAd(Microsoft.Advertising.Shared.WinRT.Advertisement)">
            <summary>
Load Ad content and put it into a popup view.
</summary>
            <param name="ad">The ad to be loaded into popup view.</param>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.IInterstitialWebBrowser">
            <summary>
Interface for displaying an interstitial mraid ad content.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdRequestParameters.PostalCode">
            <summary>
Postal code of the user.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdRequestParameters.CountryOrRegion">
            <summary>
Country or region of the user.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdRequestParameters.Keywords">
            <summary>
Keywords to be used in targeting.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AdRequestParameters">
            <summary>
Represents an interstitial display ad and is responsible for requesting the video ad,
showing any UI elements and closing any UI element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.m_adTags">
            <summary>
Ad Tags associated with this interstitial ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.m_requestTimeout">
            <summary>
Request Timeout associated with this interstitial ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.m_serviceUrl">
            <summary>
Service Url associated with this interstitial ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.m_adUnitId">
            <summary>
Ad Unit Id associated with this interstitial ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.m_applicationId">
            <summary>
Application Id associated with this interstitial ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.RunOnUIThread(Windows.UI.Core.DispatchedHandler)">
            <summary>
Takes a DispatchedHandler, if we're already on the UI thread it invokes
it directly otherwise pushes it onto the Dispatcher.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.FireErrorOccurredEvent(Microsoft.Advertising.ErrorCode,System.String,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Fires the ErrorOccurred event with the give data
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.AdTags">
            <summary>
AdTags associated with this interstitial ad.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.RequestTimeout">
            <summary>
Request Timeout associated with this interstitial ad.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.ServiceUrl">
            <summary>
Service Url associated with this interstitial ad.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.AdUnitId">
            <summary>
Ad Unit Id associated with this interstitial ad.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.ApplicationId">
            <summary>
Application Id associated with this interstitial ad.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.IsRequestInProgress">
            <summary>
Tracks if a request is in progress.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.AdType">
            <summary>
Returns the type of the derived instance.
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.ErrorOccurred">
            <summary>
Fired when an error has occurred retrieving an ad.
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.Cancelled">
            <summary>
Fired when an interstitial ad has been cancelled by the user, for example before
a video ad has reached its natural end.
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.Completed">
            <summary>
Fired when an interstitial ad has finished displaying.
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.AdReady">
            <summary>
Fired when an interstitial ad is ready to be shown.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.State">
            <summary>
Returns the state of the interstitial ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.RequestAd">
            <summary>
Attempts to request an ad
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.Close">
            <summary>
Closes the interstitial ad if showing.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd.Show">
            <summary>
Shows the interstitial ad if in the ready state.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AbstractInterstitialAd">
            <summary>
Common interface to be implemented by different interstitial ad types and comsumed 
by the public interstitial ad.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AdType">
            <summary>
Interstial ad types.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdType.Display">
            <summary>
Display Interstitial ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdType.Video">
            <summary>
Video Interstitial ad.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.InterstitialAdState">
            <summary>
Interstial ad types.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialAdState.Closed">
            <summary>
Already displayed to user.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialAdState.Showing">
            <summary>
Currently being shown.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialAdState.Ready">
            <summary>
Ready to show.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.InterstitialAdState.NotReady">
            <summary>
Not ready to show.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.EventLogging.AdRendererPageView">
            <summary>
Allows javascript to log a page view event.
</summary>
            <param name="UserId">XUID with context of the event</param>
            <param name="PageUri">Unique ID of the displayed page. I.e. Canonical URI indicating the AppID\PageID\SectionID\--the hierarchy of the page.</param>
            <param name="PageName">Canonical name of the displayed page.</param>
            <param name="RefererPageUri">Unique ID of the page displayed prior to current page. I.e. Canonical URI indicating the AppID\PageID\SectionID\ of the previous page--again, the hierarchy URI of page for the app</param>
            <param name="PageTypeId">Type ID of page shown (1=Dash, 2=Webblend, 3=WebPage, 4=Pop-up, 5=Charm, 6=GameMenu, 7=AppBar)</param>
            <param name="RefererPageTypeId">Type ID of page shown (1=Dash, 2=Webblend, 3=WebPage, 4=Pop-up, 5=Charm, 6=GameMenu, 7=AppBar)</param>
            <param name="PageTags">JSON list of page tags</param>
            <param name="PageParameters">List of parameters in URI format</param>
            <param name="ProductCatalogId">Catalog the ProductId is from</param>
            <param name="ProductId">Id of Product For product specific pages</param>
            <param name="TemplateId">Page layout id</param>
            <param name="ResolutionWidth">Screen resolution width</param>
            <param name="ResolutionHeight">Screen resolution height</param>
            <param name="ScreenState">Describes the state of the application on the screen such as "Full" or "Minimized". This can include values for Windows7 and Windows8 snapping as well such as "SnappedLeft" (Win7) or "Snapped1/3" (Win8). (Full Screen / Maximized, Windowed / Restored, Minimized / Hidden / Background, Snapped 1/3, Snapped 1/2, Snapped 2/3, Snapped Other) Other )</param>
            <param name="ColorDepth">Color Depth</param>
            <param name="SkinId">Different views of a page for different platforms like x8, iPhone</param>
            <param name="CampaignId">Campaign page is part of</param>
            <param name="GroupId">Group/Segment/Treatment ID for this page</param>
            <param name="Content">JSON list of assets/content on page and locations</param>
            <returns>0 on success</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.EventLogging.AdRendererPageAction">
            <summary>
Allows javascript to log a page action event.
</summary>
            <param name="UserId">XUID with context of the event</param>
            <param name="ActionTypeId">Type of action. Which button pressed, swipe, etc.</param>
            <param name="ActionInputMethodId">Type of input method</param>
            <param name="PageUri">Unique ID of the page action was taken on. I.e. URL/URI indicating the page the action was taken on.</param>
            <param name="PageName">Canonical name of the displayed page</param>
            <param name="PageTypeId">Page layout id</param>
            <param name="TemplateId">Id of template used to layout the page</param>
            <param name="DestPageUri">Unique ID of the page action invokes. I.e. URL/URI indicating the destination page of the action</param>
            <param name="DestPageTypeId">Type ID of page shown</param>
            <param name="CampaignId">Campaign page is part of</param>
            <param name="GroupId">Group/Segment/Treament ID for this content</param>
            <param name="Content">JSON of asset/content on which action was taken</param>
            <returns>0 on success</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AdPositionInApp.ToJson">
            <summary>
Returns the position of the uiElement on screen as a JSON string ("key":value)
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AdPositionInApp.Update">
            <summary>
Determines where the uiElement is in the window. If the value has changed since the last check, it flags itself as changed.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AdPositionInApp.#ctor(Microsoft.Advertising.WinRT.UI.WindowWrapper,Windows.UI.Xaml.UIElement,std.shared_ptr&lt;Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState&gt;)">
            <summary>
Constructor
</summary>
            <param name="currentWindow">The current window of the application</param>
            <param name="uiElement">The UIElement you want to get the position of in the currentWindow</param>
            <param name="viewabilityState">If not null, the viewable property will publish its value to the viewabilityState</param>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdSchedule.Pods">
            <summary>
AdPods in the AdScheduler
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.AdSchedule">
            <summary>
Class representing an AdSchedule which contains a list of AdPods
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPod.AddPackage(Microsoft.Advertising.Shared.WinRT.AdPackage)">
            <summary>
Add an AdPackage to the list
</summary>
            <param name="package">The packages to add to this pod</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPod.#ctor(System.String,System.String,System.String,System.Collections.Vector&lt;Microsoft.Advertising.Vast.TrackingEvent^,std.equal_to&lt;Microsoft.Advertising.Vast.TrackingEvent^&gt;,true&gt;,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Constructor
<param name="breakId">Id of the ad break</param><param name="time">Start time of the ad break</param><param name="m_repeatAfter">Optional parameter to specify when to repeat the ad break</param><param name="events">The tracking events for this pod</param><param name="context">The context for this request</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPod.ReportAsync(System.String,Windows.Foundation.Collections.IMapView`2{System.String^,System.Object^})">
            <summary>
Report an activity, JS version
</summary>
            <param name="activity">Type of activity to report on</param>
            <param name="macros">The macros for this activity</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPod.ReportAsync(System.String,Windows.Foundation.Collections.IMapView`2{System.String^,System.String^})">
            <summary>
Report an activity
</summary>
            <param name="activity">Type of activity to report on</param>
            <param name="macros">The macros for this activity</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPod.ReportAsync(System.String)">
            <summary>
Report an activity
</summary>
            <param name="activity">Type of activity to report on</param>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPod.Packages">
            <summary>
AdPackages in the AdPod
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPod.RepeatAfter">
            <summary>
Time to repeat the same AdBreak, Optional.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPod.Id">
            <summary>
The id of the Break
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPod.Time">
            <summary>
The time to start displaying package
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.AdPod">
            <summary>
Class representing an AdPod which contains a list of AdPackages
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPackage.AddExtension(Microsoft.Advertising.Shared.WinRT.AdExtension)">
            <summary>
Add an AdExtension to the AdPackage
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPackage.AddVideoResource(Microsoft.Advertising.Shared.WinRT.VideoResource)">
            <summary>
Add a Video Resource to the AdPackage
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPackage.#ctor(System.String,System.String,System.String,System.String,System.Collections.Vector&lt;Microsoft.Advertising.Vast.TrackingEvent^,std.equal_to&lt;Microsoft.Advertising.Vast.TrackingEvent^&gt;,true&gt;,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Constructor
<param name="duration">Duration of media</param><param name="skipOffset">Length the media must be played before it can be skipped</param><param name="clickThroughUrl">The clickthrough url, if any</param><param name="events">List of activity events</param><param name="context">The context for this request</param></summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPackage.FollowRedirects">
            <summary>
Flag to allow redirects
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPackage.AllowMultipleAds">
            <summary>
Flag to allow multiple ads to play
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPackage.ReportAsync(System.String,Windows.Foundation.Collections.IMapView`2{System.String^,System.Object^})">
            <summary>
Report an activity, JS version
</summary>
            <param name="activity">Type of activity to report on</param>
            <param name="macros">The macros for this activity</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPackage.ReportAsync(System.String,Windows.Foundation.Collections.IMapView`2{System.String^,System.String^})">
            <summary>
Report an activity
</summary>
            <param name="activity">Type of activity to report on</param>
            <param name="macros">The macros for this activity</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPackage.ReportAsync(System.String)">
            <summary>
Report an activity
</summary>
            <param name="activity">Type of activity to report on</param>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPackage.ClickThroughUrl">
            <summary>
Click through Url
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPackage.SkipOffset">
            <summary>
Length the media must be played before it can be skipped
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPackage.AdParameters">
            <summary>
AdParameters used for VPAID ads.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPackage.Duration">
            <summary>
Duration of the Media
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPackage.AdExtensions">
            <summary>
Ad Extensions in the Package
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPackage.Video">
            <summary>
Video Resources in the Package
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.AdPackage">
            <summary>
Class representing an AdPackage
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdExtension.JsonData">
            <summary>
The xml data of the extension converted into JSON
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdExtension.XmlData">
            <summary>
The xml data of the extension
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdExtension.Type">
            <summary>
Type of Extension
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdExtension.#ctor(System.String,System.String)">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.AdExtension">
            <summary>
Class representing an AdExtension
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.XmlToJson">
            <summary>
Class for converting XML to JSON
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.VideoResource.#ctor(System.UInt32,System.UInt32,System.String,System.String,System.String,System.String,System.UInt32,System.String,System.String,System.Boolean,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
Constructor
<param name="width">Width</param><param name="height">Height</param><param name="delivery">Delivery method</param><param name="type">MIME type</param><param name="url">Media Url</param><param name="apiFramework">API framework</param><param name="bitrate">Bitrate</param><param name="codec">Codec</param><param name="id">Media Id</param><param name="maintainAspectRaio">Flag to maintain aspect ratio</param><param name="maxBitrate">Maximum bitrate</param><param name="minBitrate">Minimum bitrate</param><param name="scalable">Flag to allow scaling</param></summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Scalable">
            <summary>
Allow the ad to scale
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.MaintainAspect">
            <summary>
Maintain aspect ratio flag
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Height">
            <summary>
Height
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Width">
            <summary>
Width
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.MaxBitrate">
            <summary>
Maximum bitrate
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.MinBitrate">
            <summary>
Minimum bitrate
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Bitrate">
            <summary>
Bitrate
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Codec">
            <summary>
Codec of the Media
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Uri">
            <summary>
Media Uri
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.ApiFramework">
            <summary>
API Framework
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Type">
            <summary>
MIME type
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Delivery">
            <summary>
Delivery method
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.VideoResource.Id">
            <summary>
Package Id
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.VideoResource">
            <summary>
Class representing a video resource, corresponds to a VAST MediaFile element
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VMAPResolver.Resolve(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServic">
            <summary>
Resolve a url into VMAP object(s)
</summary>
            <param name="url">request url</param>
            <param name="headers">request headers</param>
            <param name="cts">The cancellation token source for the returned task</param>
            <return>Populated VMAP object</return>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VMAPResolver.Parse(System.String,Concurrency.cancellation_token_source)">
            <summary>
Parses a string of xml into a VMAP manifest
</summary>
            <param name="XML">String to parse</param>
            <param name="cts">The cancellation token source for the returned task</param>
            <return>Populated VMAP manifest</return>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VMAPResolver.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Constructor
</summary>
            <param name="context">The context to use for this ad call</param>
        </member>
        <member name="T:Microsoft.Advertising.Vast.VMAPResolver">
            <summary>
VMAP Resolver class
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.UacDomFactory.GetVastVmapAutodetectVAST">
Link VAST/VMAP autodetect to our full Vast3 DOMs
</member>
        <member name="M:Microsoft.Advertising.Documents.UacDomFactory.GetVmapVAST">
Link the Vmap DOM "VAST" to Vast3 DOM.
</member>
        <member name="M:Microsoft.Advertising.Documents.UacDomFactory.GetVmapVASTAdData_type">
Override the Vmap::VASTAdData handler.
</member>
        <member name="M:Microsoft.Advertising.Documents.UacDomFactory.GetVmapAdSource">
Override the Vmap::AdSource handler.
</member>
        <member name="M:Microsoft.Advertising.Documents.UacDomFactory.GetVast3Extensions_type">
Link the Vast3 DOM "Extensions_type" to VastExtensions DOM.
</member>
        <member name="T:Microsoft.Advertising.Documents.UacDomFactory">
            <summary>
Override the default codegen'd behavior.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.UacVASTAdData">
            <summary>
Link the VMAP xsd codgen to the VAST3 xsd codegen. (Requires UacVmapFactory)
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.UacAdSource">
            <summary>
Mitigate VAST 3.0 specification bug, VASTData and VASTAdData are used in different parts of the spec
to refer to the same element. Some vendors have chosen to follow different parts. We treat the two names
as equal.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.CustomExtensions">
            <summary>
Custom extensions DOM connected.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.UacCreative">
            <summary>
Allow the Creative element to have no "Linear" elements (many unit tests currently require it).
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.UacWrapper">
            <summary>
Allow the Wrapper element to have no "Creatives" element
(many unit tests currently require it, but is not desirable for production).
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.UacInLineForSpotX">
            <summary>
Special case version of the InLine element to handle SpotX vpaid ads.
SpotX returns malformed VAST in that its has no impression url, as required by the VAST spec
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastVmapAutodetect.VastVmapAutodetectSchema.m_VastOrVmap">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastVmapAutodetect.VastVmapAutodetectSchema.GetVastOrVmap">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastVmapAutodetect.VastOrVmap.m_VMAP">
            <summary>
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
VMAP is a member of a choice group containing [VAST, VMAP] exactly 1 time
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastVmapAutodetect.VastOrVmap.m_VAST">
            <summary>
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
VAST is a member of a choice group containing [VAST, VMAP] exactly 1 time
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastVmapAutodetect.VastOrVmap.GetVMAP">
            <summary>
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
VMAP is a member of a choice group containing [VAST, VMAP] exactly 1 time
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastVmapAutodetect.VastOrVmap.GetVAST">
            <summary>
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
VAST is a member of a choice group containing [VAST, VMAP] exactly 1 time
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.VastExtensionsSchema.m_Extension">
            <summary>
UAC SDK supported extensions.
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.VastExtensionsSchema.GetExtension">
            <summary>
UAC SDK supported extensions.
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Extension.m_TrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
TrackingEvents is a member of a choice group containing [Renderers, TrackingEvents] between 0 and 2 times
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Extension.m_Renderers">
            <summary>
The list of renderer URLs.
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
Renderers is a member of a choice group containing [Renderers, TrackingEvents] between 0 and 2 times
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Extension.m_type">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Extension.m_CreativeId">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Extension.GetTrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
TrackingEvents is a member of a choice group containing [Renderers, TrackingEvents] between 0 and 2 times
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Extension.GetRenderers">
            <summary>
The list of renderer URLs.
Required: False
Minimum Occurrances: 1
Maximum Occurrances: 1
Renderers is a member of a choice group containing [Renderers, TrackingEvents] between 0 and 2 times
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Extension.GetType">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Extension.GetCreativeId">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.TrackingEvents.m_Tracking">
            <summary>
The name of the event to track for the element. The creativeView should always be requested when present.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.TrackingEvents.GetTracking">
            <summary>
The name of the event to track for the element. The creativeView should always be requested when present.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Tracking.m_offset">
            <summary>
The time during the video at which this URL should be pinged. Must be present for progress event.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Tracking.m_event">
            <summary>
The name of the event to track. For nonlinear ads these events should be recorded on the video within the ad.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Tracking.GetOffset">
            <summary>
The time during the video at which this URL should be pinged. Must be present for progress event.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Tracking.GetEvent">
            <summary>
The name of the event to track. For nonlinear ads these events should be recorded on the video within the ad.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Renderers.m_Renderer">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Renderers.GetRenderer">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.VastExtensions.Renderer.m_platform">
            <summary>
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.VastExtensions.Renderer.GetPlatform">
            <summary>
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.VmapSchema.m_VMAP">
            <summary>
IAB VMAP, Video Multiple AD Playlist, Version 1.0, xml schema prepared by FreeWheel
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.VmapSchema.GetVMAP">
            <summary>
IAB VMAP, Video Multiple AD Playlist, Version 1.0, xml schema prepared by FreeWheel
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.VMAP.m_AdBreak">
            <summary>
Top-level element, represents a single ad break, but may allow for multiple ads
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.VMAP.m_version">
            <summary>
Current version is 1.0.1
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.VMAP.GetAdBreak">
            <summary>
Top-level element, represents a single ad break, but may allow for multiple ads
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.VMAP.GetVersion">
            <summary>
Current version is 1.0.1
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdBreak.m_TrackingEvents">
            <summary>
Container for tracking URIs for events specific to VMAP
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdBreak.m_Extensions">
            <summary>
Container for Extensions that express additional information not supported by VMAP
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdBreak.m_AdSource">
            <summary>
Represents the ad data that will be used to fill the ad break
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdBreak.m_timeOffset">
            <summary>
Represent the timing for the ad break. Expressed in one of four ways: (1)time format HH:MM:SS[.mmm], (2)n% (n is an integer from 0-100 and represents percentage of total duration from start to that point), (3)â€œstartâ€ or â€œendâ€, or (4) #m (m is an integer &gt; 0 and represents the position of the ad break opportunity)
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdBreak.m_repeatAfter">
            <summary>
Optional indicator that instructs the video player to repeat the same AdBreak and AdSource at time offsets equal to the duration value of this attribute. Expresssed in time format HH.MM.SS[.mmm]
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdBreak.m_breakType">
            <summary>
The type of ads allowed by the ad break: "linear", "nonlinear" or "display" (multiple types can be entered using a comma separator with no spaces). Intended to provide a "hint" to the player
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdBreak.m_breakId">
            <summary>
Optional identifier for the ad break
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdBreak.GetTrackingEvents">
            <summary>
Container for tracking URIs for events specific to VMAP
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdBreak.GetExtensions">
            <summary>
Container for Extensions that express additional information not supported by VMAP
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdBreak.GetAdSource">
            <summary>
Represents the ad data that will be used to fill the ad break
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdBreak.GetTimeOffset">
            <summary>
Represent the timing for the ad break. Expressed in one of four ways: (1)time format HH:MM:SS[.mmm], (2)n% (n is an integer from 0-100 and represents percentage of total duration from start to that point), (3)â€œstartâ€ or â€œendâ€, or (4) #m (m is an integer &gt; 0 and represents the position of the ad break opportunity)
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdBreak.GetRepeatAfter">
            <summary>
Optional indicator that instructs the video player to repeat the same AdBreak and AdSource at time offsets equal to the duration value of this attribute. Expresssed in time format HH.MM.SS[.mmm]
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdBreak.GetBreakType">
            <summary>
The type of ads allowed by the ad break: "linear", "nonlinear" or "display" (multiple types can be entered using a comma separator with no spaces). Intended to provide a "hint" to the player
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdBreak.GetBreakId">
            <summary>
Optional identifier for the ad break
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.TrackingEvents_type.m_Tracking">
            <summary>
URI to track for specified event type
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.TrackingEvents_type.GetTracking">
            <summary>
URI to track for specified event type
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.Tracking.m_event">
            <summary>
The name of the VMAP ad break level event to track
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.Tracking.GetEvent">
            <summary>
The name of the VMAP ad break level event to track
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.Extensions_type.m_Extension">
            <summary>
The XML content of the Extension. Extension XML must use its own namespace
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.Extensions_type.GetExtension">
            <summary>
The XML content of the Extension. Extension XML must use its own namespace
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.Extension.m_type">
            <summary>
The type of the extension. The type value must be globally unique. A URI is recommended
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.Extension.GetType">
            <summary>
The type of the extension. The type value must be globally unique. A URI is recommended
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdSource.m_VASTAdData">
            <summary>
A VAST 3.0 document that comprises the ad response document. Not contained within a CDATA. (There were are a couple of places where the VMAP 1.0 pdf incorrectly references both VASTData and VASTAdData but VASTAdData is the correct element per VMAP 1.0.1)
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
VASTAdData is a member of a choice group containing [AdTagURI, CustomAdData, VASTAdData] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdSource.m_CustomAdData">
            <summary>
An ad response document (included inline) that is not VAST 3.0
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
CustomAdData is a member of a choice group containing [AdTagURI, CustomAdData, VASTAdData] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdSource.m_AdTagURI">
            <summary>
URL to a secondary ad server that will provide the ad response. URL must be contained within a CDATA block
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
AdTagURI is a member of a choice group containing [AdTagURI, CustomAdData, VASTAdData] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdSource.m_id">
            <summary>
Identifier for the ad source
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdSource.m_followRedirects">
            <summary>
Whether the player should follow wrappers/redirects in the ad response document. If not specified, left to the video playerâ€™s discretion
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdSource.m_allowMultipleAds">
            <summary>
Indicates whether the player should select and play only a single ad from the ad response document, or play multiple ads. If not specified, video player accepts playing multiple ads in an ad break
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdSource.GetVASTAdData">
            <summary>
A VAST 3.0 document that comprises the ad response document. Not contained within a CDATA. (There were are a couple of places where the VMAP 1.0 pdf incorrectly references both VASTData and VASTAdData but VASTAdData is the correct element per VMAP 1.0.1)
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
VASTAdData is a member of a choice group containing [AdTagURI, CustomAdData, VASTAdData] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdSource.GetCustomAdData">
            <summary>
An ad response document (included inline) that is not VAST 3.0
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
CustomAdData is a member of a choice group containing [AdTagURI, CustomAdData, VASTAdData] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdSource.GetAdTagURI">
            <summary>
URL to a secondary ad server that will provide the ad response. URL must be contained within a CDATA block
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
AdTagURI is a member of a choice group containing [AdTagURI, CustomAdData, VASTAdData] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdSource.GetId">
            <summary>
Identifier for the ad source
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdSource.GetFollowRedirects">
            <summary>
Whether the player should follow wrappers/redirects in the ad response document. If not specified, left to the video playerâ€™s discretion
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdSource.GetAllowMultipleAds">
            <summary>
Indicates whether the player should select and play only a single ad from the ad response document, or play multiple ads. If not specified, video player accepts playing multiple ads in an ad break
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.VASTAdData_type.m_VAST">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.VASTAdData_type.GetVAST">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.CustomAdData_type.m_templateType">
            <summary>
The ad response template employed by the ad response document
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.CustomAdData_type.GetTemplateType">
            <summary>
The ad response template employed by the ad response document
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vmap.AdTagURI_type.m_templateType">
            <summary>
The ad response template employed by the ad response document
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vmap.AdTagURI_type.GetTemplateType">
            <summary>
The ad response template employed by the ad response document
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Vast3Schema.m_VAST">
            <summary>
IAB VAST, Video Ad Serving Template, video xml ad response, Version 3.0.0, xml schema prepared by Google
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Vast3Schema.GetVAST">
            <summary>
IAB VAST, Video Ad Serving Template, video xml ad response, Version 3.0.0, xml schema prepared by Google
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.VAST.m_Ad">
            <summary>
Top-level element, wraps each ad in the response
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.VAST.m_version">
            <summary>
Current version is 3.0.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.VAST.GetAd">
            <summary>
Top-level element, wraps each ad in the response
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.VAST.GetVersion">
            <summary>
Current version is 3.0.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Ad.m_Wrapper">
            <summary>
Second-level element surrounding wrapper ad pointing to Secondary ad server.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
Wrapper is a member of a choice group containing [InLine, Wrapper] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Ad.m_InLine">
            <summary>
Second-level element surrounding complete ad data for a single ad
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
InLine is a member of a choice group containing [InLine, Wrapper] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Ad.m_sequence">
            <summary>
Identifies the sequence of multiple Ads and defines an Ad Pod.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Ad.m_id">
            <summary>
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Ad.GetWrapper">
            <summary>
Second-level element surrounding wrapper ad pointing to Secondary ad server.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
Wrapper is a member of a choice group containing [InLine, Wrapper] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Ad.GetInLine">
            <summary>
Second-level element surrounding complete ad data for a single ad
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
InLine is a member of a choice group containing [InLine, Wrapper] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Ad.GetSequence">
            <summary>
Identifies the sequence of multiple Ads and defines an Ad Pod.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Ad.GetId">
            <summary>
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Wrapper.m_VASTAdTagURI">
            <summary>
URL of ad tag of downstream Secondary Ad Server
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Wrapper.m_Impression">
            <summary>
URL to request to track an impression
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Wrapper.m_Extensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Wrapper.m_Error">
            <summary>
URL to request if ad does not play due to error
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Wrapper.m_Creatives">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Wrapper.m_AdSystem">
            <summary>
Indicates source ad server
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Wrapper.GetVASTAdTagURI">
            <summary>
URL of ad tag of downstream Secondary Ad Server
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Wrapper.GetImpression">
            <summary>
URL to request to track an impression
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Wrapper.GetExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Wrapper.GetError">
            <summary>
URL to request if ad does not play due to error
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Wrapper.GetCreatives">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Wrapper.GetAdSystem">
            <summary>
Indicates source ad server
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creatives1.m_Creative">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creatives1.GetCreative">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative1.m_NonLinearAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
NonLinearAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative1.m_Linear">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
Linear is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative1.m_CompanionAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
CompanionAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative1.m_sequence">
            <summary>
The preferred order in which multiple Creatives should be displayed
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative1.m_id">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative1.m_AdID">
            <summary>
Ad-ID for the creative (formerly ISCI)
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative1.GetNonLinearAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
NonLinearAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative1.GetLinear">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
Linear is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative1.GetCompanionAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
CompanionAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative1.GetSequence">
            <summary>
The preferred order in which multiple Creatives should be displayed
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative1.GetId">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative1.GetAdID">
            <summary>
Ad-ID for the creative (formerly ISCI)
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearAds1.m_TrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearAds1.m_NonLinear">
            <summary>
Any number of companions in any desired pixel dimensions.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearAds1.GetTrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearAds1.GetNonLinear">
            <summary>
Any number of companions in any desired pixel dimensions.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_NonLinearClickTracking">
            <summary>
URLs to ping when user clicks on the the non-linear ad unit.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_CreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_width">
            <summary>
Pixel dimensions of companion
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_scalable">
            <summary>
Whether it is acceptable to scale the image.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_minSuggestedDuration">
            <summary>
Suggested duration to display non-linear ad, typically for animation to complete. Expressed in standard time format hh:mm:ss
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_maintainAspectRatio">
            <summary>
Whether the ad must have its aspect ratio maintained when scales
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_id">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_height">
            <summary>
Pixel dimensions of companion
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_expandedWidth">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_expandedHeight">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.m_apiFramework">
            <summary>
The apiFramework defines the method to use for communication with the nonlinear element
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetNonLinearClickTracking">
            <summary>
URLs to ping when user clicks on the the non-linear ad unit.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetCreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetWidth">
            <summary>
Pixel dimensions of companion
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetScalable">
            <summary>
Whether it is acceptable to scale the image.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetMinSuggestedDuration">
            <summary>
Suggested duration to display non-linear ad, typically for animation to complete. Expressed in standard time format hh:mm:ss
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetMaintainAspectRatio">
            <summary>
Whether the ad must have its aspect ratio maintained when scales
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetId">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetHeight">
            <summary>
Pixel dimensions of companion
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetExpandedWidth">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetExpandedHeight">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearWrapper_type.GetApiFramework">
            <summary>
The apiFramework defines the method to use for communication with the nonlinear element
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear1.m_VideoClicks">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear1.m_TrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear1.m_Icons">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear1.m_CreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear1.GetVideoClicks">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear1.GetTrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear1.GetIcons">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear1.GetCreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.VideoClicks.m_CustomClick">
            <summary>
URLs to request on custom events such as hotspotted video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.VideoClicks.m_ClickTracking">
            <summary>
URL to request for tracking purposes when user clicks on the video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.VideoClicks.GetCustomClick">
            <summary>
URLs to request on custom events such as hotspotted video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.VideoClicks.GetClickTracking">
            <summary>
URL to request for tracking purposes when user clicks on the video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionAds1.m_Companion">
            <summary>
Definition of Companion ad, if served separately
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionAds1.GetCompanion">
            <summary>
Definition of Companion ad, if served separately
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_StaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] between 0 and 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_IFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] between 0 and 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_HTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] between 0 and 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_TrackingEvents">
            <summary>
The creativeView should always be requested when present. For Companions creativeView is the only supported event.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_CreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_CompanionClickTracking">
            <summary>
URLs to ping when user clicks on the the companion banner ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_CompanionClickThrough">
            <summary>
URL to open as destination page when user clicks on the the companion banner ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_AltText">
            <summary>
Alt text to be displayed when companion is rendered in HTML environment.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_AdParameters">
            <summary>
Data to be passed into the companion ads. The apiFramework defines the method to use for communication (e.g. â€œFlashVarâ€)
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_width">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_id">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_height">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_expandedWidth">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_expandedHeight">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_assetWidth">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_assetHeight">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_apiFramework">
            <summary>
The apiFramework defines the method to use for communication with the companion
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.m_adSlotId">
            <summary>
Used to match companion creative to publisher placement areas on the page.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetTrackingEvents">
            <summary>
The creativeView should always be requested when present. For Companions creativeView is the only supported event.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetStaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] between 0 and 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetIFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] between 0 and 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetHTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] between 0 and 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetCreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetCompanionClickTracking">
            <summary>
URLs to ping when user clicks on the the companion banner ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetCompanionClickThrough">
            <summary>
URL to open as destination page when user clicks on the the companion banner ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetAltText">
            <summary>
Alt text to be displayed when companion is rendered in HTML environment.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetAdParameters">
            <summary>
Data to be passed into the companion ads. The apiFramework defines the method to use for communication (e.g. â€œFlashVarâ€)
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetWidth">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetId">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetHeight">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetExpandedWidth">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetExpandedHeight">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetAssetWidth">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetAssetHeight">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetApiFramework">
            <summary>
The apiFramework defines the method to use for communication with the companion
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionWrapper_type.GetAdSlotId">
            <summary>
Used to match companion creative to publisher placement areas on the page.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Survey">
            <summary>
URL of request to survey vendor
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Pricing">
            <summary>
The price of the ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Impression">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Extensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Error">
            <summary>
URL to request if ad does not play due to error
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Description">
            <summary>
Longer description of ad
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Creatives">
            <summary>
Contains all creative elements within an InLine or Wrapper Ad
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_Advertiser">
            <summary>
Common name of advertiser
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_AdTitle">
            <summary>
Common name of ad
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.InLine.m_AdSystem">
            <summary>
Indicates source ad server
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetSurvey">
            <summary>
URL of request to survey vendor
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetPricing">
            <summary>
The price of the ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetImpression">
            <summary>
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetError">
            <summary>
URL to request if ad does not play due to error
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetDescription">
            <summary>
Longer description of ad
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetCreatives">
            <summary>
Contains all creative elements within an InLine or Wrapper Ad
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetAdvertiser">
            <summary>
Common name of advertiser
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetAdTitle">
            <summary>
Common name of ad
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.InLine.GetAdSystem">
            <summary>
Indicates source ad server
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Pricing.m_model">
            <summary>
The pricing model used.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Pricing.m_currency">
            <summary>
The currency of the pricing.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Pricing.GetModel">
            <summary>
The pricing model used.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Pricing.GetCurrency">
            <summary>
The currency of the pricing.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Impression_type.m_id">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Impression_type.GetId">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Extensions_type.m_Extension">
            <summary>
Any valid XML may be included in the Extensions node
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Extensions_type.GetExtension">
            <summary>
Any valid XML may be included in the Extensions node
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Extension.m_type">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Extension.m_CreativeId">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Extension.GetType">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Extension.GetCreativeId">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creatives.m_Creative">
            <summary>
Wraps each creative element within an InLine or Wrapper Ad
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creatives.GetCreative">
            <summary>
Wraps each creative element within an InLine or Wrapper Ad
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative.m_NonLinearAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
NonLinearAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative.m_Linear">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
Linear is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative.m_CompanionAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
CompanionAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative.m_sequence">
            <summary>
The preferred order in which multiple Creatives should be displayed
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative.m_id">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Creative.m_AdID">
            <summary>
Ad-ID for the creative (formerly ISCI)
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative.GetNonLinearAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
NonLinearAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative.GetLinear">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
Linear is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative.GetCompanionAds">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
CompanionAds is a member of a choice group containing [CompanionAds, Linear, NonLinearAds] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative.GetSequence">
            <summary>
The preferred order in which multiple Creatives should be displayed
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative.GetId">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Creative.GetAdID">
            <summary>
Ad-ID for the creative (formerly ISCI)
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearAds.m_TrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinearAds.m_NonLinear">
            <summary>
Any number of companions in any desired pixel dimensions.
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearAds.GetTrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinearAds.GetNonLinear">
            <summary>
Any number of companions in any desired pixel dimensions.
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_StaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_IFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_HTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_NonLinearClickTracking">
            <summary>
URLs to ping when user clicks on the the non-linear ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_NonLinearClickThrough">
            <summary>
URL to open as destination page when user clicks on the non-linear ad unit.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_CreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_AdParameters">
            <summary>
Data to be passed into the video ad. 
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_width">
            <summary>
Pixel dimensions of companion
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_scalable">
            <summary>
Whether it is acceptable to scale the image.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_minSuggestedDuration">
            <summary>
Suggested duration to display non-linear ad, typically for animation to complete. Expressed in standard time format hh:mm:ss
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_maintainAspectRatio">
            <summary>
Whether the ad must have its aspect ratio maintained when scales
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_id">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_height">
            <summary>
Pixel dimensions of companion
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_expandedWidth">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_expandedHeight">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.NonLinear_type.m_apiFramework">
            <summary>
The apiFramework defines the method to use for communication with the nonlinear element
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetStaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetNonLinearClickTracking">
            <summary>
URLs to ping when user clicks on the the non-linear ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetNonLinearClickThrough">
            <summary>
URL to open as destination page when user clicks on the non-linear ad unit.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetIFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetHTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetCreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetAdParameters">
            <summary>
Data to be passed into the video ad. 
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetWidth">
            <summary>
Pixel dimensions of companion
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetScalable">
            <summary>
Whether it is acceptable to scale the image.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetMinSuggestedDuration">
            <summary>
Suggested duration to display non-linear ad, typically for animation to complete. Expressed in standard time format hh:mm:ss
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetMaintainAspectRatio">
            <summary>
Whether the ad must have its aspect ratio maintained when scales
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetId">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetHeight">
            <summary>
Pixel dimensions of companion
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetExpandedWidth">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetExpandedHeight">
            <summary>
Pixel dimensions of expanding nonlinear ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.NonLinear_type.GetApiFramework">
            <summary>
The apiFramework defines the method to use for communication with the nonlinear element
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_VideoClicks">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_TrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_MediaFiles">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_Icons">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_Duration">
            <summary>
Duration in standard time format, hh:mm:ss
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_CreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_AdParameters">
            <summary>
Data to be passed into the video ad
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Linear.m_skipoffset">
            <summary>
The time at which the ad becomes skippable, if absent, the ad is not skippable.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetVideoClicks">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetTrackingEvents">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetMediaFiles">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetIcons">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetDuration">
            <summary>
Duration in standard time format, hh:mm:ss
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetCreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetAdParameters">
            <summary>
Data to be passed into the video ad
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Linear.GetSkipoffset">
            <summary>
The time at which the ad becomes skippable, if absent, the ad is not skippable.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.VideoClicks_type.m_CustomClick">
            <summary>
URLs to request on custom events such as hotspotted video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.VideoClicks_type.m_ClickTracking">
            <summary>
URL to request for tracking purposes when user clicks on the video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.VideoClicks_type.m_ClickThrough">
            <summary>
URL to open as destination page when user clicks on the video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.VideoClicks_type.GetCustomClick">
            <summary>
URLs to request on custom events such as hotspotted video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.VideoClicks_type.GetClickTracking">
            <summary>
URL to request for tracking purposes when user clicks on the video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.VideoClicks_type.GetClickThrough">
            <summary>
URL to open as destination page when user clicks on the video
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CustomClick.m_id">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CustomClick.GetId">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.ClickTracking.m_id">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.ClickTracking.GetId">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.ClickThrough.m_id">
            <summary>
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.ClickThrough.GetId">
            <summary>
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFiles.m_MediaFile">
            <summary>
Location of linear file
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFiles.GetMediaFile">
            <summary>
Location of linear file
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_width">
            <summary>
Pixel dimensions of video
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_type">
            <summary>
MIME type. Popular MIME types include, but are not limited to â€œvideo/x-ms-wmvâ€ for Windows Media, and â€œvideo/x-flvâ€ for Flash Video. Image ads or interactive ads can be included in the MediaFiles section with appropriate Mime                                                          types
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_scalable">
            <summary>
Whether it is acceptable to scale the image.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_minBitrate">
            <summary>
Minimum bitrate of an adaptive stream in Kbps. If minBitrate is supplied, maxBitrate must be supplied and bitrate should not be supplied.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_maxBitrate">
            <summary>
Maximum bitrate of an adaptive stream in Kbps. If maxBitrate is supplied, minBitrate must be supplied and bitrate should not be supplied.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_maintainAspectRatio">
            <summary>
Whether the ad must have its aspect ratio maintained when scales
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_id">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_height">
            <summary>
Pixel dimensions of video
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_delivery">
            <summary>
Method of delivery of ad
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_codec">
            <summary>
The codec used to produce the media file.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_bitrate">
            <summary>
Bitrate of encoded video in Kbps. If bitrate is supplied, minBitrate and maxBitrate should not be supplied.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.MediaFile.m_apiFramework">
            <summary>
The apiFramework defines the method to use for communication if the MediaFile is interactive. Suggested values for this element are â€œVPAIDâ€, â€œFlashVarsâ€ (for Flash/Flex), â€œinitParamsâ€ (for Silverlight) and â€œGetVariablesâ€                                                          (variables placed in key/value pairs on the asset request).
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetWidth">
            <summary>
Pixel dimensions of video
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetType">
            <summary>
MIME type. Popular MIME types include, but are not limited to â€œvideo/x-ms-wmvâ€ for Windows Media, and â€œvideo/x-flvâ€ for Flash Video. Image ads or interactive ads can be included in the MediaFiles section with appropriate Mime                                                          types
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetScalable">
            <summary>
Whether it is acceptable to scale the image.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetMinBitrate">
            <summary>
Minimum bitrate of an adaptive stream in Kbps. If minBitrate is supplied, maxBitrate must be supplied and bitrate should not be supplied.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetMaxBitrate">
            <summary>
Maximum bitrate of an adaptive stream in Kbps. If maxBitrate is supplied, minBitrate must be supplied and bitrate should not be supplied.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetMaintainAspectRatio">
            <summary>
Whether the ad must have its aspect ratio maintained when scales
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetId">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetHeight">
            <summary>
Pixel dimensions of video
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetDelivery">
            <summary>
Method of delivery of ad
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetCodec">
            <summary>
The codec used to produce the media file.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetBitrate">
            <summary>
Bitrate of encoded video in Kbps. If bitrate is supplied, minBitrate and maxBitrate should not be supplied.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.MediaFile.GetApiFramework">
            <summary>
The apiFramework defines the method to use for communication if the MediaFile is interactive. Suggested values for this element are â€œVPAIDâ€, â€œFlashVarsâ€ (for Flash/Flex), â€œinitParamsâ€ (for Silverlight) and â€œGetVariablesâ€                                                          (variables placed in key/value pairs on the asset request).
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icons.m_Icon">
            <summary>
Any number of icons representing advertising industry initiatives.
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icons.GetIcon">
            <summary>
Any number of icons representing advertising industry initiatives.
Required: True
Minimum Occurrances: 1
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_StaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_IFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_HTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_IconViewTracking">
            <summary>
URLs to ping when icon is shown.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_IconClicks">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_yPosition">
            <summary>
The vertical alignment location (in pixels) or a specific alignment.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_xPosition">
            <summary>
The horizontal alignment location (in pixels) or a specific alignment.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_width">
            <summary>
Pixel dimensions of icon.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_program">
            <summary>
Identifies the industry initiative that the icon supports.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_offset">
            <summary>
Start time at which the player should display the icon. Expressed in standard time format hh:mm:ss.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_height">
            <summary>
Pixel dimensions of icon.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_duration">
            <summary>
The duration for which the player must display the icon. Expressed in standard time format hh:mm:ss.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Icon_type.m_apiFramework">
            <summary>
The apiFramework defines the method to use for communication with the icon element
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetStaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetIFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetIconViewTracking">
            <summary>
URLs to ping when icon is shown.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetIconClicks">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetHTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetYPosition">
            <summary>
The vertical alignment location (in pixels) or a specific alignment.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetXPosition">
            <summary>
The horizontal alignment location (in pixels) or a specific alignment.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetWidth">
            <summary>
Pixel dimensions of icon.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetProgram">
            <summary>
Identifies the industry initiative that the icon supports.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetOffset">
            <summary>
Start time at which the player should display the icon. Expressed in standard time format hh:mm:ss.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetHeight">
            <summary>
Pixel dimensions of icon.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetDuration">
            <summary>
The duration for which the player must display the icon. Expressed in standard time format hh:mm:ss.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Icon_type.GetApiFramework">
            <summary>
The apiFramework defines the method to use for communication with the icon element
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.IconClicks.m_IconClickTracking">
            <summary>
URLs to ping when user clicks on the the icon.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.IconClicks.m_IconClickThrough">
            <summary>
URL to open as destination page when user clicks on the icon.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.IconClicks.GetIconClickTracking">
            <summary>
URLs to ping when user clicks on the the icon.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.IconClicks.GetIconClickThrough">
            <summary>
URL to open as destination page when user clicks on the icon.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionAds.m_Companion">
            <summary>
Any number of companions in any desired pixel dimensions.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CompanionAds.m_required">
            <summary>
Provides information about which companion creative to display. All means that the player must attempt to display all. Any means the player must attempt to play at least one. None means all companions are optional.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionAds.GetCompanion">
            <summary>
Any number of companions in any desired pixel dimensions.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CompanionAds.GetRequired">
            <summary>
Provides information about which companion creative to display. All means that the player must attempt to display all. Any means the player must attempt to play at least one. None means all companions are optional.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_StaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_IFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_HTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_TrackingEvents">
            <summary>
The creativeView should always be requested when present. For Companions creativeView is the only supported event.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_CreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_CompanionClickThrough">
            <summary>
URL to open as destination page when user clicks on the the companion banner ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_AltText">
            <summary>
Alt text to be displayed when companion is rendered in HTML environment.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_AdParameters">
            <summary>
Data to be passed into the companion ads. The apiFramework defines the method to use for communication (e.g. â€œFlashVarâ€)
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_width">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_id">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_height">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_expandedWidth">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_expandedHeight">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_assetWidth">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_assetHeight">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_apiFramework">
            <summary>
The apiFramework defines the method to use for communication with the companion
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Companion_type.m_adSlotId">
            <summary>
Used to match companion creative to publisher placement areas on the page.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetTrackingEvents">
            <summary>
The creativeView should always be requested when present. For Companions creativeView is the only supported event.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetStaticResource">
            <summary>
URL to a static file, such as an image or SWF file
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
StaticResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetIFrameResource">
            <summary>
URL source for an IFrame to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
IFrameResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetHTMLResource">
            <summary>
HTML to display the companion element
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
HTMLResource is a member of a choice group containing [HTMLResource, IFrameResource, StaticResource] exactly 1 time
WARNING: Choice validation will use 1 for minOccurs and maxOccurs on this element.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetCreativeExtensions">
            <summary>
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetCompanionClickThrough">
            <summary>
URL to open as destination page when user clicks on the the companion banner ad.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetAltText">
            <summary>
Alt text to be displayed when companion is rendered in HTML environment.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetAdParameters">
            <summary>
Data to be passed into the companion ads. The apiFramework defines the method to use for communication (e.g. â€œFlashVarâ€)
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 1
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetWidth">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetId">
            <summary>
Optional identifier
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetHeight">
            <summary>
Pixel dimensions of companion slot
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetExpandedWidth">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetExpandedHeight">
            <summary>
Pixel dimensions of expanding companion ad when in expanded state
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetAssetWidth">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetAssetHeight">
            <summary>
Pixel dimensions of the companion asset
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetApiFramework">
            <summary>
The apiFramework defines the method to use for communication with the companion
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Companion_type.GetAdSlotId">
            <summary>
Used to match companion creative to publisher placement areas on the page.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.TrackingEvents_type.m_Tracking">
            <summary>
The name of the event to track for the element. The creativeView should always be requested when present.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.TrackingEvents_type.GetTracking">
            <summary>
The name of the event to track for the element. The creativeView should always be requested when present.
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Tracking.m_offset">
            <summary>
The time during the video at which this url should be pinged. Must be present for progress event.
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.Tracking.m_event">
            <summary>
The name of the event to track. For nonlinear ads these events should be recorded on the video within the ad.
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Tracking.GetOffset">
            <summary>
The time during the video at which this url should be pinged. Must be present for progress event.
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.Tracking.GetEvent">
            <summary>
The name of the event to track. For nonlinear ads these events should be recorded on the video within the ad.
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.StaticResource.m_creativeType">
            <summary>
Mime type of static resource
Required: True
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.StaticResource.GetCreativeType">
            <summary>
Mime type of static resource
Required: True
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.HTMLResource_type.m_xmlEncoded">
            <summary>
Specifies whether the HTML is XML-encoded
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.HTMLResource_type.GetXmlEncoded">
            <summary>
Specifies whether the HTML is XML-encoded
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.CreativeExtensions_type.m_CreativeExtension">
            <summary>
Any valid XML may be included in the Extensions node
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.CreativeExtensions_type.GetCreativeExtension">
            <summary>
Any valid XML may be included in the Extensions node
Required: False
Minimum Occurrances: 0
Maximum Occurrances: 2147483647
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.AdParameters_type.m_xmlEncoded">
            <summary>
Specifies whether the parameters are XML-encoded
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.AdParameters_type.GetXmlEncoded">
            <summary>
Specifies whether the parameters are XML-encoded
Required: False
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Documents.Vast3.AdSystem_type.m_version">
            <summary>
Internal version used by ad system
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Vast3.AdSystem_type.GetVersion">
            <summary>
Internal version used by ad system
Required: False
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.SAXParser.EscapeToXml(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Escapes a given string for to XML
</summary>
            <param name="value">The string to convert</param>
            <returns>The escaped string</returns>
        </member>
        <member name="T:Microsoft.Advertising.Documents.NullSAXParserHandler">
            <summary>
This is a concrete implementation of ISAXParserHandler that doesn't do anything in its callback handlers
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.ISAXParserHandler">
            <summary>
This interface handles parsing events from SAXParser
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.VMAP.Version">
            <summary>
Version of the manifest
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.VMAP.Breaks">
            <summary>
List of AdBreaks
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VMAP.#ctor(System.String)">
            <summary>
Constructor
<param name="version">VMAP version</param></summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.VMAP">
            <summary>
Class representing a VMAP Manifest
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdBreak.TrackingEvents">
            <summary>
Tracking events, [0..*]
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.AdBreak.#ctor(System.String,System.String,System.String)">
            <summary>
Constructor
<param name="timeOffset">Time to start playing break</param><param name="breakId">Id of the break</param><param name="repeatAfter">Time to wait before repeating break</param></summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdBreak.AdSource">
            <summary>
List of AdSources
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdBreak.RepeatAfter">
            <summary>
Time to wait before repeating break
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdBreak.BreakId">
            <summary>
Id of the break
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdBreak.TimeOffset">
            <summary>
Time to start playing break
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.AdBreak">
            <summary>
Class representing an AdBreak element of a VMAP
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdSource.VastData">
            <summary>
Vast data
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.AdSource.#ctor(System.String)">
            <summary>
                <param name="id">Id of Source</param>
            </summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.AdSource.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
                <param name="id">Id of Source</param>
                <param name="allowMultiple">Flag to allow multiple ads to play</param>
                <param name="followRedirects">Flag to allow redirects</param>
            </summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdSource.FollowRedirects">
            <summary>
Flag to allow redirects
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdSource.AllowMultipleAds">
            <summary>
Flag to allow multiple ads to play
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdSource.Id">
            <summary>
Id of Source
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.AdSource">
            <summary>
Class representing an AdSource element of an AdBreak
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.VAST.Version">
            <summary>
vast version, this field is required
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.VAST.Ad">
            <summary>
There may be [0..*] child 'Ad' elements of a vast document
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.VAST.#ctor">
            <summary>
constructor for vast object,
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.VAST">
            <summary>
class that represents the root element of a vast document
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Ad.Sequence">
            <summary>
Identifies the sequence of multiple Ads and defines an Ad Pod, optional.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Ad.Id">
            <summary>
ad element id, optional
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Ad.InLine">
            <summary>
An InLine element
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.Ad">
            <summary>
Top-level element, wraps each ad in the response
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.InLine.Extensions">
            <summary>
Information about extentions, [0..1]
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.InLine.Creatives">
            <summary>
TODO: is this [1..*] or [0..*]?!
Contains all creative elements within an InLine or Wrapper Ad, [1..*] 
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.InLine.Impression">
            <summary>
Contains all impression elements within an InLine or Wrapper Ad, [1..*]
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.InLine.Error">
            <summary>
Optional URL to request if ad does not play due to error
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.InLine.AdTitle">
            <summary>
Common name of ad, will treat as optional even though IAB Spec says required
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.InLine.AdSystem">
            <summary>
Indicates source ad server, will treat as optional even though IAB Spec says required
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.InLine.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.InLine">
            <summary>
Second-level element surrounding complete ad data for a single ad
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.ImpressionType.Value">
            <summary>
impression url, required
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.ImpressionType.Id">
            <summary>
id for the impression url, optional
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.ImpressionType">
            <summary>
container for impression urls
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.LinearCreative.ClickThroughUrl">
            <summary>
The click through url for the video clicks tag, should it exist
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.LinearCreative.Duration">
            <summary>
Duration in standard time format, hh:mm:ss, required
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.LinearCreative.Skipoffset">
            <summary>
The time at which the ad becomes skippable, if absent, the ad is not skippable, optional
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.LinearCreative.TrackingEvents">
            <summary>
Tracking events, [0..*]
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.LinearCreative.MediaFiles">
            <summary>
Media files [0..*]
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.LinearCreative.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.LinearCreative">
            <summary>
Container for Linear creative ads
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.MaintainAspectRatio">
            <summary>
Whether the ad must have its aspect ratio maintained when scales, optional, defaults to false
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Scalable">
            <summary>
Sepcifies whether the media is meant to scale to large dimensions, Optional, Defaults to true
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Codec">
            <summary>
Codec used to encode the file
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Value">
            <summary>
URI to the media file
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.ApiFramework">
            <summary>
The apiFramework defines the method to use for communication if the MediaFile
is interactive. Suggested values for this element are "VPAID", "FlashVars" (for 
Flash/Flex), "initParams" (for Silverlight) and "GetVariables" (variables placed
in key/value pairs on the asset request), optional.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.MaxBitrate">
            <summary>
Maximum bitrate of an adaptive stream in Kbps. If maxBitrate is supplied, minBitrate must be
supplied and bitrate should not be supplied, optional
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.MinBitrate">
            <summary>
Minimum bitrate of an adaptive stream in Kbps. If minBitrate is supplied, maxBitrate must be
supplied and bitrate should not be supplied, optional
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Bitrate">
            <summary>
Bitrate of encoded video in Kbps. If bitrate is supplied, minBitrate and maxBitrate should not be 
supplied, optional
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Id">
            <summary>
Optional identifier
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Type">
            <summary>
MIME type. Popular MIME types include, but are not limited to "video/x-ms-wmv" for Windows Media,
and "video/x-flv" for Flash Video. Image ads or interactive ads can be included in the MediaFiles
section with appropriate Mime types, required.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Delivery">
            <summary>
Method of delivery of ad, required
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Height">
            <summary>
Pixel dimensions of video, required
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.MediaFile.Width">
            <summary>
Pixel dimensions of video, required
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.MediaFile">
            <summary>
Location of linear file
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.Extension.#ctor(Microsoft.Advertising.Vast.ExtensionsType,System.String)">
            <summary>
Constructor
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Extension.XmlData">
            <summary>
Xml data contained within the extension element
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Extension.Type">
            <summary>
Type of extension
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.Extension">
            <summary>
Vast Extension data
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.ExtensionsType">
            <summary>
Enumeration of valid Extension types
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Creative.AdID">
            <summary>
Ad-ID for the creative (formerly ISCI), optional.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Creative.Sequence">
            <summary>
The preferred order in which multiple Creatives should be displayed, optional
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Creative.Id">
            <summary>
id of the creative, optional.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.Creative.Item">
            <summary>
container for either a Linear, CompanionAds or NonLinearAds, optionals(?)
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.Creative">
            <summary>
Wraps each creative element within an InLine or Wrapper Ad
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdSystemType.Value">
            <summary>
value of the ad system
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.AdSystemType.Version">
            <summary>
Internal version used by ad system, optional
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.AdSystemType">
            <summary>
Indicates source ad server
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AdSchedulePlacement.CreateAdPackageFromInLineElement(Microsoft.Advertising.Vast.InLine,Microsoft.Advertising.Vast.AdSource)">
            <summary>
Create an ad package from a given inline Ad
</summary>
            <param name="inLine">The inline xml node</param>
            <param name="adSource">The adsource vast element to create the package from</param>
            <returns>
nullptr if the adsource was valid VAST but had no ad information. 
Throws an exception if there was an error with the VAST.
Otherwise returns an adpackage to be added to the pod.
</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AdSchedulePlacement.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Microsoft.Advertising.Shared.RequestAdType,Microsoft.Advertising.Shared.WinRT.SdkType,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;Sy">
Private constructor - the public interface exposes a static create method.
</member>
        <member name="T:Microsoft.Advertising.Shared.AdSchedulePlacement">
The AdSchedulePlacement class represents an ad schedule within an application
</member>
        <member name="F:Microsoft.Advertising.Net.Decorators.CacheControlDecorator.k_httpHeaderValueCacheControlNoCache">
            <summary>
constant for the default value we set http header 'cache-control', 'no-cache'
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Decorators.CacheControlDecorator.k_httpHeaderCacheControl">
            <summary>
constant for the http header 'cache-control'
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.Decorators.CacheControlDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDere">
            <summary>
Decorates the cache-control header to a request.
</summary>
            <param name="url">The url to decorate</param>
            <param name="headers">A map of header to header value to modify</param>
        </member>
        <member name="T:Microsoft.Advertising.Net.Decorators.CacheControlDecorator">
            <summary>
Decorates the cache-control header to a request.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ActivityReporter.GetUrlsForActivity(System.String)">
            <summary>
Gets a list of reporting urls for a given activity
</summary>
            <param name="activity">activity to get reporting urls for.</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ActivityReporter.ReportAsync(System.String,Windows.Foundation.Collections.IMapView`2{System.String^,System.Object^})">
            <summary>
Iterates through list of uris for the specified activity attempting to call
each of them; this form is for JS
</summary>
            <param name="activity">Type of activity to report on</param>
            <param name="macros">A set of macros to replace in the activity urls</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ActivityReporter.ReportAsync(System.String,Windows.Foundation.Collections.IMapView`2{System.String^,System.String^})">
            <summary>
Iterates through list of uris for the specified activity attempting to call
each of them
</summary>
            <param name="activity">Type of activity to report on</param>
            <param name="macros">A set of macros to replace in the activity urls</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ActivityReporter.AddActivity(Microsoft.Advertising.Vast.TrackingEvent)">
            <summary>
Adds an activity event name and Url to the list
</summary>
            <param name="ev">An Event</param>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.ActivityReporter.TrackingEvents">
            <summary>
List of tracking events
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.ActivityReporter">
            <summary>
 Class for Reporting Activity 
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.TrackingEvent.Value">
            <summary>
Tracking url
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Vast.TrackingEvent.EventName">
            <summary>
The name of the event to track. For nonlinear ads these events should be recorded on the video within the ad, required
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Vast.TrackingEvent.#ctor(System.String,System.String)">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Vast.TrackingEvent">
            <summary>
A TrackingEvent
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.Arc.ArcBuilder">
            <summary>
ArcBuilder builds an IAdRequest for Arc;
There is already an ArcRequestBuilder; that's why this is ArcBuilder
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdViews.MraidAdView.HandlePopUpClosed(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.AdViews.Details.MraidAdViewState&gt;,Windows.UI.Xaml.UIElement)">
            <summary>
Handles the pop up closed event from the pop up container
</summary>
            <param name="weakState">The MraidAdViewState that should handle the event</param>
            <param name="uiElement">The uiElement held by the pop up container before it was closed.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdViews.MraidAdView.HandlePopUpResized(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.AdViews.Details.MraidAdViewState&gt;,System.Int32,System.Int32)">
            <summary>
Handles the pop up resized event from the pop up container
</summary>
            <param name="weakState">The MraidAdViewState that should handle the event</param>
            <param name="width">The resized width</param>
            <param name="height">The resized height</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdViews.MraidAdView.HandlePopUpShown(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.AdViews.Details.MraidAdViewState&gt;)">
            <summary>
Handles the pop up shown event from the pop up container
</summary>
            <param name="weakState">The MraidAdViewState that should handle the event</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdViews.MraidAdView.HandleSizeChanged(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.AdViews.Details.MraidAdViewState&gt;,System.Object,Windows.UI.Xaml.SizeChangedEventArgs)">
            <summary>
Handles a SizeChanged event from the webview
</summary>
            <param name="weakState">The MraidAdViewState that should handle the event</param>
            <param name="sender">The object that fired the event</param>
            <param name="e">Size changed event args</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdViews.MraidAdView.HandleNavigationCompleted(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.AdViews.Details.MraidAdViewState&gt;,Windows.UI.Xaml.Controls.WebView,Windows.UI.Xaml.Controls.WebViewNavigationCompletedEventArgs)">
            <summary>
Handles a NavigationCompleted event from the webview
</summary>
            <param name="weakState">The MraidAdViewState that should handle the event</param>
            <param name="sender">The object that fired the event</param>
            <param name="e">Navigation completed event args</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdViews.MraidAdView.HandleNavigationStarting(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.AdViews.Details.MraidAdViewState&gt;,Windows.UI.Xaml.Controls.WebView,Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs)">
            <summary>
Handles a NavigationStarting event from the webview
</summary>
            <param name="weakState">The MraidAdViewState that should handle the event</param>
            <param name="sender">The object that fired the event</param>
            <param name="e">Navigation starting event args</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdViews.MraidAdView.HandleCloseRequested(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.AdViews.Details.MraidAdViewState&gt;)">
            <summary>
Handles an ad close request
</summary>
            <param name="weakState">The MraidAdViewState that should handle the event</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdViews.MraidAdView.HandleExpandRequested(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.AdViews.Details.MraidAdViewState&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Handles an ad expand request
</summary>
            <param name="weakState">The MraidAdViewState that should handle the event</param>
            <param name="url">The url to expand to, if one exists</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdViews.MraidAdView.HandleScriptNotify(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.AdViews.Details.MraidAdViewState&gt;,System.Object,Windows.UI.Xaml.Controls.NotifyEventArgs)">
            <summary>
Handles a ScriptNotify event from the webview
</summary>
            <param name="weakState">The MraidAdViewState that should handle the event</param>
            <param name="sender">The object that fired the event</param>
            <param name="e">The script notify event args</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdViews.MraidAdView.HandleInvokeScript(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.AdViews.Details.MraidAdViewState&gt;,Microsoft.Advertising.UI.Models.Ads.Mraid.MraidInvokeScriptParams)">
            <summary>
Handles a request to call invoke script on the webview
</summary>
            <param name="weakState">The MraidAdViewState that should handle the event</param>
            <param name="params">The paramters to call invoke script with</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdViews.MraidAdView.GetUiElement">
            <summary>
This method gets the FrameworkElement to hold in the ad control
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdViews.MraidAdView.#ctor(std.shared_ptr&lt;Microsoft.Advertising.UI.Models.Ads.MraidAdModel&gt;)">
            <summary>
Constructor
</summary>
            <param name="model">The model to attach to</param>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AdViews.MraidAdView">
            <summary>
This is an implementation of an mraid ad view
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AdViews.Details.MraidAdViewState">
            <summary>
This struct holds the state of the MraidAdView
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopUpViewContainer.HandleAppSizeChanged(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Details.PopUpViewContainerState&gt;,Windows.UI.Core.CoreWindow,Windows.UI.Core.WindowSizeChangedEventArgs)">
            <summary>
A static method that handles the app size changed event.
</summary>
            <param name="weakState">The pop up view container state</param>
            <param name="sender">The window that was resized</param>
            <param name="args">The window size change args</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopUpViewContainer.UpdatePopUpSize(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Details.PopUpViewContainerState&gt;)">
            <summary>
A static method that updates this pop up's size. Called when first shown and when the app size has changed.
</summary>
            <param name="weakState">The pop up view container state</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopUpViewContainer.RemoveUiElementFromPopUp(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Details.PopUpViewContainerState&gt;)">
            <summary>
A static method to remove the ui element from the PopUp on the dispatcher
</summary>
            <param name="weakState">The pop up view container state</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopUpViewContainer.ClosePopUp(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Details.PopUpViewContainerState&gt;)">
            <summary>
A static method to close the PopUp on the dispatcher
</summary>
            <param name="weakState">The pop up view container state</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopUpViewContainer.ShowPopUp(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Details.PopUpViewContainerState&gt;)">
            <summary>
A static method to show the PopUp on the dispatcher
</summary>
            <param name="weakState">The pop up view container state</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopUpViewContainer.CreatePopUpUi(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Details.PopUpViewContainerState&gt;)">
            <summary>
A static method to create the PopUpUI on the dispatcher
</summary>
            <param name="weakState">The pop up view container state</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopUpViewContainer.EventResized">
            <summary>
Gets an event for when the pop up is resized
</summary>
            <returns>The event to subscribe to</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopUpViewContainer.EventClosed">
            <summary>
Gets an event for when the pop up is successfully closed
</summary>
            <returns>The event to subscribe to</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopUpViewContainer.EventShown">
            <summary>
Gets an event for when the pop up is successfully shown
</summary>
            <returns>The event to subscribe to</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopUpViewContainer.Close">
            <summary>
Closes the pop up container. Fires the EventClosed event if successful.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopUpViewContainer.Show">
            <summary>
Shows the pop up container. Fires the EventShown event if successful.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopUpViewContainer.Detach">
            <summary>
Detaches a ui element from this pop up container
</summary>
            <returns>The ui element that was attached</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopUpViewContainer.Attach(Windows.UI.Xaml.UIElement)">
            <summary>
Attaches a ui element to this pop up container
</summary>
            <param name="uiElement">The ui element to attach</param>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.PopUpViewContainer">
            <summary>
This class shows a popup with a ui element
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.Details.PopUpViewContainerState">
            <summary>
A struct containing the state of the PopUpViewContainer
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdViews.IAdView.EventResumeRefreshRequested">
            <summary>
This event is fired when an ad view requests the ad control to resume the refresh timer
</summary>
            <returns>The event to subscribe to</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdViews.IAdView.EventPauseRefreshRequested">
            <summary>
This event is fired when an ad view requests the ad control to pause the refresh timer
</summary>
            <returns>The event to subscribe to</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdViews.IAdView.GetUiElement">
            <summary>
Gets the framework element to hold in the ad control
</summary>
            <returns>The framework element</returns>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AdViews.IAdView">
            <summary>
This interface represents the common operations you can perform on an adview
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.HandleCloseRequested(std.weak_ptr&lt;Microsoft.Advertising.UI.Models.Ads.Details.MraidAdModelState&gt;)">
            <summary>
Handles a close requested event from the Mraid manager
</summary>
            <param name="weakState">A weak pointer to the mraid ad model state to handle the close request with</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.HandleExpandRequested(std.weak_ptr&lt;Microsoft.Advertising.UI.Models.Ads.Details.MraidAdModelState&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary />
            <param name="weakState">A weak pointer to the mraid ad model state to handle the expand request with</param>
            <param name="url">The url to show in the expanded view</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.HandleAdRendered">
            <summary>
Handles an ad rendered event from the Mraid manager
ormmaimpl uses this event to update a webviewbrush if the ad is suspended
!TODO check if that's still necessary; otherwise we could use this signal
to swap ads
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.HandleMraidInvokeScript(Microsoft.Advertising.Concurrency.MulticastDelegate&lt;Microsoft.Advertising.UI.Models.Ads.Mraid.MraidInvokeScriptParams&gt;,Microsoft.Advertising.UI.Models.Ads.Mraid.MraidInvokeScriptParams)">
            <summary>
Handles a request by the mraid model to invoke a script;
This fires the mraid ad model's invoke script event
</summary>
            <param name="delegate">The delegate to execute when the invoke script event is fired</param>
            <param name="params">The params to invoke the delegate with</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.InjectBootstrap">
            <summary>
Injects the mraid script using bootstrap.js + bootstrap.html
Use this if the InjectMraidScript call fails.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.InjectMraidScript">
            <summary>
Attempts to inject the mraid script into the payload.
</summary>
            <returns>True if injection was successful</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.PopUpClosed">
            <summary>
Signals the model that the pop up has closed
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.Expanded">
            <summary>
Signals the model that the ad has expanded
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.EventCloseRequested">
            <summary>
An event that signals an Mraid close is requested
</summary>
            <returns>The event</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.EventExpandRequested">
            <summary>
An event that signals an Mraid expand is requested
</summary>
            <returns>The event</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.EventInvokeScript">
            <summary>
An event that signals a script invoke is requested
</summary>
            <returns>The event</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.ScriptNotify(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Pass a Script Notify event to the model
</summary>
            <param name="value">The notification value</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.GetMraid">
            <summary>
Gets the mraid model; !TODO might not have to expose this
</summary>
            <returns>The mraid model</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.NavigationCompleted">
            <summary>
Notify the model that navigation to the url has completed
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.NavigatingToUrl(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify the model that the webview is navigating to a url
</summary>
            <param name="url">The url the webview is navigating to</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.GetContent">
            <summary>
Gets the content of this ad as a string
</summary>
            <returns>The content of this ad</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.GetModelTypeName">
            <summary>
From IAdModel; Statically gets a string representing the type of this AdModel
</summary>
            <returns>The model string</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.GetModelType">
            <summary>
From IAdModel; Gets a string representing the type of this AdModel
</summary>
            <returns>The model string</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.MraidAdModel.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Constructor. Creates an ad model out of the payload.
</summary>
            <param name="payload">The ad payload</param>
            <param name="context">The factories context</param>
        </member>
        <member name="T:Microsoft.Advertising.UI.Models.Ads.MraidAdModel">
            <summary>
This class represents the ad model for a UniversalAd
</summary>
        </member>
        <member name="T:Microsoft.Advertising.UI.Models.Ads.Details.MraidAdModelState">
            <summary>
The state for MraidAdModel
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdModel.GetModelType">
            <summary>
Gets a string representing the type of this ad model, ie InterstitialVideoAd, UniversalAd
</summary>
            <returns>A string representing the ad model type</returns>
        </member>
        <member name="T:Microsoft.Advertising.UI.Models.IAdModel">
            <summary>
IAdModel represents an Ad Model.
Ad Models represent the internal state of a displayed ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.Decorators.AdUnitIdDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDerefere">
            <summary>
appends the adUnitid request parameter along with the adUnitId to the request url
<param name="url">the request url to be decorated with adUnitId</param><param name="headers">the header to be decorated if need be</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.Decorators.AppIdDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereference">
            <summary>
appends the appId request parameter along with the application id to the request url
<param name="url">the request url to be decorated with application id</param><param name="headers">the header to be decorated if need be</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.WRL.HStringHelpers.Convert(HSTRING__*!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Converts a HSTRING into a new wstring
</summary>
            <param name="source">The source HSTRING</param>
            <returns>A converted C++ string</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.WRL.HStringHelpers.Copy(HSTRING__*!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Copies a HSTRING into a wstring
</summary>
            <param name="source">The source string</param>
            <param name="dest">The destination string</param>
        </member>
        <member name="M:Microsoft.Advertising.Utils.WRL.HStringHelpers.Copy(HSTRING__*!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HSTRING__**)">
            <summary>
Copies a HSTRING into an HSTRING
</summary>
            <param name="source">The source string</param>
            <param name="dest">The destination string</param>
        </member>
        <member name="M:Microsoft.Advertising.Utils.WRL.HStringHelpers.Copy(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,HSTRING__**)">
            <summary>
Copies a wstring into an HSTRING
</summary>
            <param name="source">The source string</param>
            <param name="dest">The destination string</param>
        </member>
        <member name="T:Microsoft.Advertising.Utils.WRL.HStringHelpers">
            <summary>
Helper class for WRL HSTRINGs
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AppFocus.ToJson">
            <summary>
Returns whether or not the app is in focus as a JSON string ("key":value)
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AppFocus.Update">
            <summary>
Checks to see if the app focus state has changed (focus, unfocus, minimized, restored). If so, flags itself as changed.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AppFocus.#ctor(std.shared_ptr&lt;Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState&gt;)">
            <summary>
Constructor
</summary>
            <param name="viewabilityState">The viewability state to monitor</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AppBounds.ToJson">
            <summary>
Returns the size of the window as a JSON string ("key":value)
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AppBounds.Update">
            <summary>
Determines the size of the window. If the value has changed since the last check, it flags itself as changed.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AppBounds.#ctor(Microsoft.Advertising.WinRT.UI.WindowWrapper,std.shared_ptr&lt;Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState&gt;)">
            <summary>
Constructor
</summary>
            <param name="currentWindow">The current window of the application.</param>
            <param name="viewabilityState">If not null, the viewable property will publish its value to the viewabilityState</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.CheckIfRefreshIntervalMetAndRaiseError">
            <summary>
Returns true if the minimum time between manual refresh has passed
(30 seconds) and raises error if interval is not met.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.SetEngagedStates(System.Boolean,System.Boolean)">
            <summary>
updates the engaged state of the adcontrol
</summary>
            <param name="isExpandedNew">the new expanded state</param>
            <param name="isUserEngagedNew">the new user engaged state</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.StopTimerAndResetInterval">
            <summary>
Stop the timer, set the next timer interval to RotationTime
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.OnAdRotationTimer(System.Object,System.Object)">
            <summary>
Private event handler on Ad rotation timer event
</summary>
            <param name="state">state of the event receiver</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.PauseTimer">
            <summary>
Pause the timer and set the next timer interval to the remaining time
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.StartTimer">
            <summary>
Start the timer with whatever the interval is set.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.SendErrorEvent(Microsoft.Advertising.ErrorCode,System.String,System.Boolean)">
            <summary>
Used by adcontrol
</summary>
            <param name="errorCode" />
            <param name="errorMessage" />
            <param name="discardAd" />
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.HandleBroadcastErrorEvent(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Details.AdControlControllerState&gt;,Microsoft.Advertising.ErrorCode,System.String,System.Boolean)">
            <summary>
Helper method that broadcasts error events to any listeners
and can choose to discard ad.
</summary>
            <param name="errorCode">the error code</param>
            <param name="errorMessage">the error message</param>
            <param name="discardAd">true to discard ad, false not to</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.Unload">
            <summary>
Release AdControl resources when AdControl is removed from the application page.
This method detects whether this.Parent is null. If the parent is null, we need to
clean up the AdControl.

The cleanup will only occur when the Parent is null, unless forceUnload is true.
When the AdControl is being unloaded (see the AdControl_Unloaded event handler)
we force cleanup even if Parent is not null.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.OnRichMediaAction(System.Object,Microsoft.Advertising.WinRT.UI.RichMediaEventArgs)">
            <summary>
OnRichMediaAction handler
</summary>
            <param name="sender">this is the AdControl</param>
            <param name="e">rich media event argument</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.UpdateSize(System.Double,System.Double)">
            <summary>
Update ad size if container size has changed.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.DeactivateAdControl">
            <summary>
Steps that need to happen when the ad control gets deactivated or hides from view
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.ActivateAdControl">
            <summary>
Steps that need to happen when the ad control gets activated or comes in view
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.Resume">
            <summary>
Removes the static snapshot of the AdControl and replaces it with the dynamic display.
Resumes automatic refresh of the AdControl, if IsAutoRefreshEnable=true, and allows
manual refresh to occur again after Suspend.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.Suspend">
            <summary>
Suspends the current ad and replaces the current view of the ad with a snapshot of
what was currently being rendered. After calling Suspend the AdControl will not 
automatically refresh, if IsAutoRefreshEnabled=true, and you cannot manually 
refresh the AdControl until Resume has been called.
</summary>
            <param name="closeExpandedAd">If true and the ad was engaged, this action is cancelled
and the expaned ad is closed. If false no action is taken on the expanded ad.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControlController.Initialize(System.Boolean,Microsoft.Advertising.WinRT.UI.IAdControlTimer)">
            <summary>
Initialize the AdController related.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_autoRefreshIntervalInSeconds">
            <summary>
Ad rotation interval used by ration timer
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.k_minAdRefreshIntervalSeconds">
            <summary>
Constant for minimum Ad refresh interval
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.k_adRotationTimeInSeconds">
            <summary>
Constant for Ad rotation time, currently is equal to one minute
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_isSuspended">
            <summary>
tracks the suspended state of the AdControl
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_timeAtLastRotation">
            <summary>
time when ad was last refreshed
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_rotationTimer">
            <summary>
Ad rotation timer
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_isAutoRefreshEnabled">
            <summary>
automatic (true) or manual (false) rotation
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_isUserEngaged">
            <summary>
Flag shows if the user is interacting with the ad inline (not expanded)
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdControlController.m_isExpanded">
            <summary>
Flag shows if the ad has been expanded
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AdCenter.AdCenterImpl">
            <summary>
This is the nested private class that actually implements the singleton methods and state
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdCenter.GetInstance">
            <summary>
This class returns a shared pointer to IAdCenter singleton instance
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AdCenter">
            <summary>
Singleton class to manage the data across ads (banner/interstitial, display/video)
Singletons have private constructors, which means they can't be made into shared pointers.
To work around this, our GetInstance returns a shared pointer to the actual singleton implementation.
The actual singleton implementation is a private nested class, so it can't be instantiated externally.
To allow other classes to use the private nested class, it implements a public interface.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.IAdCenter">
            <summary>
This is an interface for the singleton instance.
This what the users of the singleton will interact with.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.JSONWrapper.ExtractNamedJsonArray(Windows.Data.Json.IJsonValue,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,System.Boolean)">
Retrieves the string value from jsonNode. 
</member>
        <member name="T:Microsoft.Advertising.Net.Tokens.BasicTemplateToken">
            <summary>
BasicTemplateToken holds a token name and value
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Payloads.UniversalAd.UniversalAdPayload.PayloadTypeName">
            <summary>
Statically returns the type of UniversalAdPayloads
</summary>
            <returns>A string representing the name of this type</returns>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Payloads.UniversalAd.UniversalAdPayload.GetMinimumRefresh">
            <summary>
Gets the minimum refresh for this ad.
This is only used for compatibility with the old code.
!TODO - Remove this once the ad placement code path is gone.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Payloads.UniversalAd.UniversalAdPayload.GetIsPoly">
            <summary>
Gets whether this ad is a polymorphic ad
!TODO - Remove this once the ad placement code path is gone.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Payloads.UniversalAd.UniversalAdPayload.GetPayload">
            <summary>
Gets the ad payload
</summary>
            <returns>The payload</returns>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Payloads.UniversalAd.UniversalAdPayload.GetPayloadType">
            <summary>
From IAdPayload - returns the type of this payload
</summary>
            <returns>The PayloadTypeName</returns>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Payloads.UniversalAd.UniversalAdPayload.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int32)">
            <summary>
Constructor
</summary>
            <param name="payload">The ad payload</param>
            <param name="isPoly">Whether this ad is a polymorphic ad</param>
            <param name="minimumRefresh">The minimum refresh interval for this ad. Remove once the ad placement code path is gone</param>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Payloads.UniversalAd.UniversalAdPayload">
            <summary>
This class holds a Universal Ad payload for the AdPlacement based code path
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.Init">
            <summary>
Common initialization called from the constructor.
</summary>
            <summary>
Common initialization called from the constructor.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.RecordError(System.String,Microsoft.Advertising.NativeErrorCode)">
            <summary>
Actual implementaiton that records the error
</summary>
            <param name="context">The context for this ad request</param>
            <param name="msg">The message for this error</param>
            <param name="errorCode">The code for this error</param>
        </member>
        <member name="F:Microsoft.Advertising.Shared.WinRT.AdPlacement.s_isRandSeeded">
Flag to indicate whether srand function has been called to seed random number generator.
</member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.IsAdBrokerSample(System.Int32)">
            <summary>
Generates a random value to determine if a request should be sent to AdBroker instead of ARC.
</summary>
            <param name="adBrokerPct">the percentage of traffic to send to Ad Broker (0-100)</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.GetAdAsync(System.UInt32,Microsoft.Advertising.Shared.WinRT.ProjectedContext)">
            <summary>
This projected method allows the js layer to request the ad
</summary>
            <param name="timeoutInMilliseconds">the timeout value in milliseconds</param>
            <param name="context">projected context object</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.SetViewabilityState(std.shared_ptr&lt;Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState&gt;)">
            <summary>
Set the viewability state used in the ad request.
</summary>
            <param name="viewabilityState">Shared viewability state from the AdControl to be used in the ad request.</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.SetContext(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Set the context used for web requests and error reporting. This is used 
for testing. 
</summary>
            <param name="context">Context for this object to use.</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.ClearLastError">
            <summary>
Clear the lastError
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.ReportEvent(System.String)">
            <summary>
This projected method allows the js layer to report interaction events to the native layer
</summary>
            <param name="eventName">The name of the event</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.GetAdAsync(System.UInt32)">
            <summary>
Retrieve an ad
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPlacement.SdkType">
            <summary>
The SDK type
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPlacement.PostalCode">
            <summary>
The postal code
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPlacement.CountryOrRegion">
            <summary>
The country or region
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPlacement.Keywords">
            <summary>
Placement keywords
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPlacement.Height">
            <summary>
The height of the placement
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPlacement.Width">
            <summary>
The width of the placement
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPlacement.LastError">
            <summary>
The last error that occurred
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPlacement.AdTags">
            <summary>
Ad tag collection
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPlacement.ServiceUrl">
            <summary>
The service Url
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPlacement.AdUnitId">
            <summary>
The ad unit identifier
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdPlacement.ApplicationId">
            <summary>
The application ID of the app
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.#ctor(Microsoft.Advertising.Shared.WinRT.SdkType,System.String,System.String)">
            <summary>
Constructor
</summary>
            <param name="sdkType">Type of SDK</param>
            <param name="applicationId">The application id identifier</param>
            <param name="adUnitId">The ad unit identifier</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.#ctor(Microsoft.Advertising.Shared.WinRT.SdkType,System.String)">
            <summary>
Constructor
</summary>
            <param name="sdkType">Type of SDK</param>
            <param name="serviceUrl">Service Url</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdPlacement.#ctor(Microsoft.Advertising.Shared.WinRT.SdkType)">
            <summary>
Constructor
</summary>
            <param name="sdkType">Type of SDK</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.BroadcastAdRefreshedEvent">
            <summary>
Helper method that broadcasts ad refreshed events to any listeners
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.AdRequestCompletedHandler(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Details.AdControllerState&gt;,Windows.Foundation.IAsyncOperation`1{Microsoft.Advertising.Shared.WinRT.Advertisement^},Windows.Foundation.AsyncStatus)">
            <summary>
This handles the completed ad request and displays the new ad.
</summary>
            <param name="asyncInfo" />
            <param name="asyncStatus" />
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.StartAdRequest(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
starts the next ad request
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.RefreshCommon(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
checks ad state and raises errors if not in a state that allows ad refresh
otherwise initiates an ad refresh.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.AdInitializedHandler(System.Object,System.Object)">
            <summary>
Handles the case when an ad has initialized
</summary>
            <param name="sender">state of the event receiver</param>
            <param name="e">Event argumnets</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.RemoveAdTag(System.String)">
            <summary>
Remove an ad tag from the ad control. This has no effect if the tag name does not exist.
</summary>
            <param name="tagName">The name of the tag to remove.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.AddAdTag(System.String,System.String)">
            <summary>
Add an ad tag to the ad control. The maximum is 10 tags per ad control. If maximum is exceeded an errorOccurred event will be fired. 
</summary>
            <param name="tagName">The name of the tag. Maximum of 16 characters, if exceeded an errorOccurred event will be fired.</param>
            <param name="tagValue">The value of the tag. Maximum of 128 characters, if exceeded an errorOccurred event will be fired.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.GetRendererOptions">
            <summary>
Return the renderer options in JSON string format.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdController.Refresh">
            <summary>
                <para>
    A call to this method directs the <c>AdControl</c> to show the next ad as soon as an ad
    becomes available.
  </para>
            </summary>
            <remarks>
  A new ad might not be available because of an error that occurred while trying to contact the ad platform.
</remarks>
            <exception>The IsAutoRefreshEnabled property is set to true.</exception>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdController.m_isInitialized">
            <summary>
Tracks if the adcontrol has been initialised yet, this could happend from two
different code paths, OnApplyTemplate or Loaded
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.Details.AdControllerState.m_requestInProgress">
            <summary>
Flag shows if the ad has been expanded
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.Details.AdControllerState.m_broadcastErrorEvent">
            <summary>
Helper method that broadcasts error events to any listeners
and can choose to discard ad.
</summary>
            <param name="error">the exception</param>
            <param name="discardAd">true to discard ad, false not to</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.PopupUpdateLayoutHandler(System.Double,System.Double)">
            <summary>
This handles popup view layout change event
When popup changes its size due to orientation or windows snapping,
the ad container needs to resize itself, position it in center and notify Mraid new size.
</summary>
            <param name="sender" />
            <param name="e" />
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.OrmmaRichMediaActionHandler(System.Object,Microsoft.Advertising.WinRT.UI.RichMediaEventArgs)">
            <summary>
This passes on any events raised in OrmmaImpl.
</summary>
            <param name="sender" />
            <param name="e" />
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.RaiseRichMediaActionEvent(Microsoft.Advertising.WinRT.UI.RichMediaActionType)">
            <summary>
raises the rich media action event
</summary>
            <param name="action">the rich media action that occurred</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.ClosedEventHandler(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
cleanup the popup and reset the size of the AdvertisingWebBrowser to the 
pre-expand size
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.Expand(Windows.Foundation.Uri,Microsoft.Advertising.WinRT.UI.ExpandProperties,System.Boolean)">
            <summary>
method passed as a delegate to WP7TaskInvoker to handle expand operation
</summary>
            <param name="uri">url to expand to if specified</param>
            <param name="expandProperties">properties for the expand (whether to show background, it's colour etc)</param>
            <param name="isLegacyAd">whether this ad called expand using MRAID.expand </param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.Expand(Windows.Foundation.Uri,Microsoft.Advertising.WinRT.UI.ExpandProperties)">
            <summary>
method passed as a delegate to WP7TaskInvoker to handle expand operation
</summary>
            <param name="uri">url to expand to if specified</param>
            <param name="expandProperties">properties for the expand (whether to show background, it's colour etc)</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.CleanUp">
            <summary>
performs necessary cleanup
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.NavigationStarting(Windows.UI.Xaml.Controls.WebView,Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs)">
            <summary>
Fired when the web view is navigating away form its current source. 
Will redirect the call to Ormma.open and cancel the navigation on the current web view.
</summary>
            <param name="sender" />
            <param name="e" />
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.HandleEventNotification(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Handle all Pointer events coming from JS layer
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.SetUseCustomClose(System.Boolean)">
            <summary>
This set expanded view or interstitial ad view showing default close button or not.
</summary>
            <param name="useCustomClose">If true, hide default close button. The ad will show its own close button.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Windows.Foundation.Uri)">
            <summary>
AdvertisingWebBrowser constructor used when expanding to a url 
</summary>
            <param name="uri">target address of expansion</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.IsAdOnScreen">
            <summary>
Checks if both the ad control and the webview elements are on screen
This is needed because the ad control is not necessarily in the hierarchy of the webview, and the webview may have a different size fomr the ad control
</summary>
            <returns>true if the visible ad is on screen</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.FireViewableChange(System.Boolean)">
            <summary>
Fire the MRAID viewableChange event to ad.
</summary>
            <param name="isViewable">Is the current ad viewable.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.Init">
            <summary>
Initialize task invoker.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.GetNetwork">
            <summary>
Get the network type.
</summary>
            <returns>network type</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.DoRequest(System.String,System.String)">
            <summary>
Starts an HTTP request.
</summary>
            <param name="url">url to request</param>
            <param name="display">ormma display parameter to specify how to handle response</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.OnUnloaded">
            <summary>
cleans up resoureces used by the class
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.GetTilt">
            <summary>
Reports the current tilt coordinates to ormma once for GetTilt call.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StopShakeTracking">
            <summary>
Stops the tracking of accelerometer shake data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StartShakeTracking">
            <summary>
Starts the tracking of accelerometer shake data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StopTiltTracking">
            <summary>
Stops the tracking of accelerometer tilt data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StartTiltTracking">
            <summary>
Starts the tracking of accelerometer tilt data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.SetFullScreenSize(System.Double)">
            <summary>
Sends the available screen size to the ad.
</summary>
            <param name="heightOffset">this value is subtracted from the height before passing to the ad</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.SetScreenSize(System.Double,System.Double)">
            <summary>
Sets the screen size to be passed to the ad.
</summary>
            <param name="width" />
            <param name="height" />
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.InvokeScript(System.String,System.String[])">
            <summary>
Invokes a JavaScript function.
</summary>
            <param name="function">the function to call</param>
            <param name="parameters">parameters to pass to the function</param>
            <returns>the value returned by the javascript call</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.ReportError(System.String,System.String)">
            <summary>
Reports an error to the ad in the web browser via javascript.
</summary>
            <param name="function">the ORMMA method the error occured in</param>
            <param name="message">the error message</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StopOrientationMonitoring">
            <summary>
Stops listening to the orientation changed event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StartOrientationMonitoring">
            <summary>
Starts listening to the orientation changed event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.UpdateOrientation">
            <summary>
Updates the orientation in the WebView.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StopViewableDataChangedMonitoring">
            <summary>
Stops monitoring the viewability properties.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StartViewableDataChangedMonitoring">
            <summary>
Starts monitoring the viewability properties.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StopViewableChangedMonitoring">
            <summary>
Stops periodic checks of the viewability status.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.StartViewableChangedMonitoring">
            <summary>
Starts periodic checks of the viewability status.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.TaskInvoker.BrowseToUrl(Windows.Foundation.Uri)">
            <summary>
Initiates browsing to a URL.
</summary>
            <param name="uri">location to browse to</param>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.TaskInvoker.m_adControlElement">
            <summary>
Parent Ad Control -- for viewability checks
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.TaskInvoker.m_lastNetworkStatus">
            <summary>
keeps track of last network status for event handling
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.TaskInvoker.m_errorReportCount">
            <summary>
used to prevent feedback loop to javascript layer, this scenario could happen when 
subscribing to the error event and in the handler for the error event you generate
the same error again.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.TaskInvoker.m_viewableDataChangeTimer">
            <summary>
Timer used for periodically checking if the viewability metrics have changed.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.TaskInvoker.m_viewableChangeTimer">
            <summary>
Timer used for periodically checking if the ad is viewable on screen.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_hardwareBackButtonPressedToken">
            <summary>
Token used for unsubscribing from the hardware back button (windows phone)
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_hardwareEscButtonPressedToken">
            <summary>
Token used for unsubscribing from the escape key for desktop windows.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_closeButtonTappedToken">
            <summary>
Token used for unsubscribing from the close button tapped event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_orientationChangedToken">
            <summary>
Token used for unsubscribing from the orientation changed event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_windowSizeChangedToken">
            <summary>
Token used for unsubscribing from the window size changed event.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_adContainer">
            <summary>
Weak reference to the main canvas's child content
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_positionChildControlsDelegate">
            <summary>
Delegate to call on orientation/size change events to notify child controls
to update their layout.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_useFullScreen">
            <summary>
Set to true to use all available screen space, false to use the supplied
Height and Width properties.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_showCloseButton">
            <summary>
Toggles the display of a close button in the to right of the popup.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_closeCanvas">
            <summary>
Transparent overlay canvas of size 50*50 that provides close functionality and holds close button when CustomClose is false.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_overlayCanvas">
            <summary>
Transparent overlay canvas that holds the close button and popup content.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.PopupView.m_popup">
            <summary>
Popup that holds the popup content.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.OrientationChangedHandler(Windows.Graphics.Display.DisplayInformation,System.Object)">
            <summary>
Event handler for orientation changes, this triggers a call to updated the layout.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.WindowSizeChangedHandler(System.Object,Windows.UI.Core.WindowSizeChangedEventArgs)">
            <summary>
Event handler for window size changes, this triggers a call to updated the layout.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.UnsubscribeFromHardwareCloseButton">
            <summary>
Unsubscribes from hardware specific close button. On Windows Phone this is the back button, on desktop this is the escape key.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.SubscribeToHardwareCloseButton">
            <summary>
Subscribes to hardware specific close button. On Windows Phone this is the back button, on desktop this is the escape key.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.UnsubscribeFromEvents">
            <summary>
Helper method to centralise unsubscribing from events.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.SubscribeToEvents">
            <summary>
Helper method to centralise subscribing to events.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.CloseButtonHandler(System.Object,Windows.UI.Xaml.Input.TappedRoutedEventArgs)">
            <summary>
Event handler for the close button being tapped.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.DrawCloseButton(Windows.UI.Xaml.Controls.Canvas)">
            <summary>
Adds a visual close button which can be displayed in the close canvas area.
</summary>
            <param name="c">The canvas to draw the close button on.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.CreateAndAddCloseCanvas(Windows.UI.Xaml.Controls.Panel)">
            <summary>
Creates the close button.
</summary>
            <param name="popup">The parent to ad the close button to.</param>
            <return>The newly created canvas.</return>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.CreateAndAddAdCanvas(Windows.UI.Xaml.Controls.Primitives.Popup)">
            <summary>
Creates the canvas that forms the background of the popup.
</summary>
            <param name="popup">The popup to ad the created canvas to.</param>
            <return>The newly created canvas.</return>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.CreatePopup">
            <summary>
Creates the popup control initialising layout properties.
</summary>
            <return>Initialised Popup control.</return>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PopupView.MainPopup">
            <summary>
This accessor is for testing/internal purposes only.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PopupView.CloseCanvas">
            <summary>
This accessor is for testing/internal purposes only.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PopupView.OverlayCanvas">
            <summary>
This accessor is for testing/internal purposes only.
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.PopupView.Closed">
            <summary>
Fired when the PopupView closes.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PopupView.Height">
            <summary>
The Height of the Popup control, ignored if UseFullScreen set to true.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PopupView.Width">
            <summary>
The width of the Popup control, ignored if UseFullScreen set to true.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PopupView.UseFullScreen">
            <summary>
Set to true to use all available screen space, false to use the supplied
Height and Width properties.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PopupView.UseCustomClose">
            <summary>
Toggles the display of a close button in the to right of the popup.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.UpdateLayout">
            <summary>
Updates the layout of the popup after screen change, orientation changes etc.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.GetAdContainer">
            <summary>
Gets the child added to the main overlay canvas.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.SetAdContainer(Windows.UI.Xaml.FrameworkElement)">
            <summary>
Adds the child content to the main overlay canvas.
</summary>
            <param name="adContainer">The content to be added to the canvas.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.Close">
            <summary>
Closes the popup.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.Show">
            <summary>
Shows the popup.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.Dispose">
            <summary>
Destructor.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.PopupView.#ctor(Microsoft.Advertising.WinRT.UI.UpdateLayoutDelegate,System.Boolean,System.Boolean)">
            <summary>
Constructor.
</summary>
            <param name="positionChildControlsDelegate">Deletgate for updating child control layouts.</param>
            <param name="useFullScreen">True for the popup to take up the full screen, false to use the 
 supplied height and width.</param>
            <param name="useFullScreen">True to show a close button in the top right corner
false to not show it.</param>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.PopupView">
            <summary>
Class for hosting ad content, this could be Interstitial Display, Intersitial Video or
expanded Display ad content.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.UpdateLayoutDelegate">
            <summary>
Delegate for use in layout update changes.
</summary>
            <param name="width">Width of the hosting control.</param>
            <param name="height">Height of the hosting control.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.GetValueFromCollectionHelper(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System">
            <summary>
Find and return the value in parameter collection by parameter name
</summary>
            <param name="parameters">The parameters collection</param>
            <param name="parameterName">The parameter name to find</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.ParseQueryString(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary><![CDATA[Parses out parameters from data supplied "param1=value1&param2=value2" into a dictionary [{param1:value1},{param2:value2}]]]></summary>
            <param name="queryString">string to be parsed</param>
            <returns>Dictionary containing parameter data.</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.TryGetGuid(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerS">
            <summary>
attempts to get a Guid from the dictionary
</summary>
            <param name="parameters">paramters to query</param>
            <param name="parameterName">the name of the parameter to query</param>
            <param name="value">value if parameter found</param>
            <returns>true if the parameter was found, false otherwise</returns>
            <summary>
attempts to get a Guid from the dictionary
</summary>
            <param name="parameters">paramters to query</param>
            <param name="parameterName">the name of the parameter to query</param>
            <param name="value">value if parameter found</param>
            <returns>true if the parameter was found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.TryGetBooleanParameter(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runti">
            <summary>
attemps to get a value from the dictionary as a bool, returns false on error
</summary>
            <param name="parameters">paramters to query</param>
            <param name="parameterName">the name of the parameter to query</param>
            <param name="value">value if parameter found</param>
            <returns>true if the parameter was found, false otherwise</returns>
            <summary>
attemps to get a value from the dictionary as a bool, returns false on error
</summary>
            <param name="parameters">paramters to query</param>
            <param name="parameterName">the name of the parameter to query</param>
            <param name="value">value if parameter found</param>
            <returns>true if the parameter was found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.TryGetIntegerParameter(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runti">
            <summary>
attemps to get a value from the dictionary as a integer
</summary>
            <param name="parameters">paramters to query</param>
            <param name="parameterName">the name of the parameter to query</param>
            <param name="value">value if parameter found</param>
            <returns>true if the parameter was found, false otherwise</returns>
            <summary>
attemps to get a value from the dictionary as a integer
</summary>
            <param name="parameters">paramters to query</param>
            <param name="parameterName">the name of the parameter to query</param>
            <param name="value">value if parameter found</param>
            <returns>true if the parameter was found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.TryGetUri(System.String,Windows.Foundation.Uri*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Verifies url is valid and of a scheme supported in the ad sdk.
</summary>
            <param name="uriString">String representing the uri</param>
            <param name="uri">Initialised uri if successful.</param>
            <param name="allowAnyScheme">true to allow any scheme, false to restrict to whitelist.</param>
            <returns>true if the uri was initialised, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.TryGetUriParameter(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.C">
            <summary>
verifies url is valid and of a supported scheme
</summary>
            <param name="parameters">paramters to query</param>
            <param name="parameterName">the name of the parameter to query</param>
            <param name="uri">value if parameter found</param>
            <returns>true if the parameter was found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.IsEmailValid(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
verifies if an email is valid
</summary>
            <param name="email">email address to validate</param>
            <returns>true if valid, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaUtils.ValidateAndRemoveEmailList(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
parses a list of email addresses in a string separated by a ',' or a ';', validates them
and removes them from the string if not valid or are duplicates. eg 
"test@example.com;test2.example.com,test3@example.com" would return
"test@example.com;test3@example.com;"
</summary>
            <param name="emailAddresses">email address list to parse</param>
            <returns>validated email addresses</returns>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.OrmmaImpl.AdRendered">
raised when we're notified by the renderer that the ad has been rendered, ie all assets etc have been downloaded
</member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.DoRequest(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Issue request for the uri resource
</summary>
            <param name="parameters">dictionary of parameters. URL is the resource to request. Display is Ormma parameter to specify how to handle response</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.RaiseRichMediaActionEvent(Microsoft.Advertising.WinRT.UI.RichMediaActionType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Fires an event if there are any handlers.
Currently this is a no-op. We previously thought we might report to server when ormma was used to make a call or send sms.
We do not do this now. This can be removed completely if it is determined we will never need this event.
</summary>
            <param name="action">action that occurred</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetScreenSize">
            <summary>
sets the screensize to use in ormma in ormma
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.Resize(System.Double,System.Double,Microsoft.Advertising.WinRT.UI.RichMediaAdState)">
            <summary>
helper method for resizing, also updates state and size in the JS layer
which triggers the appropriate events
</summary>
            <param name="width" />
            <param name="height" />
            <param name="state" />
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.GetOrientation(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Updates the the web controls orientation variable or optional starts/stops listening
for the orientation changed event.
</summary>
            <param name="parameters">contains an optional parameter 'listener'. if 'start' it updates the 
the orientation value as it changes, if stop it stops updating, if not present it updates the 
orientation once.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetupViewableDataChangedHandler(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Starts the monitoring of viewability properties
</summary>
            <param name="parameters">contains a required parameter 'listener'. if 'start' it raises the 
the viewable data changed event as it changes, if stop it stops raising the event.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetupViewableChangedHandler(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Starts the monitoring if the ad is viewable or not
</summary>
            <param name="parameters">contains an optional parameter 'listener'. if 'start' it raises the 
the viewable changed event as it changes, if stop it stops raising the event.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.StartShakeAccelerometer(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Starts monitoring and sending the shake events to client.
</summary>
            <param name="parameters">contains an optional parameter 'listener'. if 'start' it updates the 
the shake value as it changes, if stop it stops updating, if not present does nothing</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.StartTiltAccelerometer(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
updates the tilt value in the JS layer.
</summary>
            <param name="parameters">contains an optional parameter 'listener'. if 'start' it updates the 
the tilt value as it changes, if stop it stops updating, if not present it does nothing</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.Hide">
            <summary>
hides the add if it was in the default state.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.Show">
            <summary>
shows the ad if it was in the hidden state
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.Resize(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
resizes the web browser to the size specified
</summary>
            <param name="parameters">Dictionary containing required parameters (height, width) for expanding</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.Expand(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
expands the current ad to the specified size
</summary>
            <param name="parameters">Dictionary containing required parameters (url) for expanding.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetExpandProperties(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
sets the background properties to use during expand
</summary>
            <param name="parameters">Dictionary containing required parameters (width,height,useCustomClose,lockOrientation) for expanding.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetUserEngaged(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
sets the background properties to use during expand
</summary>
            <param name="parameters">Dictionary containing required parameters (width,height,useCustomClose,lockOrientation) for expanding.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.RaiseAdRenderedEvent">
            <summary>
raises the AdRendered event, this occurrs when the ad renderer sends a message telling
us that they've finished downloading all assets etc
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetUseCustomClose(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
sets whether to use close bands, SDK provided or a custom close button to
exit full screen ad.
</summary>
            <param name="prms">true</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.RaiseAdRenderedError">
            <summary>
processes the ad error message sent from ormma and raises the 
AdRenderError event, this will eventually raise the ErrorOccured event
on the ad sdk.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.FireViewableChange(System.Boolean)">
            <summary>
Fire the viewableChange event to Mraid.
</summary>
            <param name="isViewable">Is the current ad viewable.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.BrowseToUrl(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Initiates a WebBrowserTask with data from the rich media ad.
</summary>
            <param name="parameters">Dictionary containing required parameters (url) for browsing.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.FireClickEvent">
            <summary>
firest the "click" event in the renderer, this is typically only fired when
the developer has set UseStaticAnchor to true and allows us to notify the 
renderer that a user is interacting with the ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetToPreviousState">
            <summary>
updates the state of ormma and keeps track of the previous state
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetOrmmaAdContainerSize(System.Double,System.Double)">
            <summary>
Sets the size of the ad container.
</summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.Execute(System.String)">
            <summary>
Executes the ORMMA action encoded in actionInfo
</summary>
            <param name="actionInfo">string containing action name and parameters in the folowing format,
"actionName:param1=value1&amp;param2=value2"
</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.SetState(Microsoft.Advertising.WinRT.UI.RichMediaAdState)">
            <summary>
updates the state of ormma and keeps track of the previous state
</summary>
            <param name="state">that state to update to</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.Close">
            <summary>
changes the state of the rich media ad dependant on it's current state.
default: moves to hidden
resized: moves to default
expanded: moves to default if it had expanded from default, moves to resized if it was expanded from resized
hidden: no change
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.OnUnloaded">
            <summary>
performs any required cleanup
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.InitializeOrmma">
            <summary>
initialises ormma to a known state
</summary>
            <returns>true if initialisation was successful, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.OrmmaImpl.#ctor(Microsoft.Advertising.WinRT.UI.ITaskInvoker,Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser,Microsoft.Advertising.WinRT.UI.RichMediaAdState,Microsoft.Advertising.WinRT.UI.AdPlacementType,System.Double,System.Double,std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
constructor
</summary>
            <param name="taskInvoker">platform specific task invoker</param>
            <param name="state">the starting state of ormma</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidScriptLogApiUsage.Run(std.shared_ptr&lt;Microsoft.Advertising.UI.Models.Ads.Mraid.Details.MraidManagerState&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Executes the script handler
</summary>
            <param name="state">The mraid manager state running this script handler</param>
            <param name="params">The params to this script handler</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidScriptLogApiUsage.GetCommandName">
            <summary>
Gets the name of this AdApiUsage command; used to match this handler with the incoming script action
</summary>
            <returns>Returns the name of the AdApiUsage command string</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidScriptLogApiUsage.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Constructor; Instantiate logAdApiUsage script handler
</summary>
            <param name="context">The factories context</param>
        </member>
        <member name="T:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidScriptLogApiUsage">
            <summary>
Handles the logging of Mraid/Ormma api usage telemetry.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidManager.AddScriptNotifyHandler(std.shared_ptr&lt;Microsoft.Advertising.UI.Models.Ads.Mraid.IMraidScriptNotifyHandler&gt;)">
            <summary>
Helper method to add a script notify handler to the list of handlers to process incoming
script actions.
</summary>
            <param name="handler">The handler to add</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidManager.Expanded">
            <summary>
Notifies the Mraid manager that the ad has expanded
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidManager.Start">
            <summary>
Sends the initial mraid states and sends the mraid ready event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidManager.SetScreenSize(System.Int32,System.Int32)">
            <summary>
Sets what mraid thinks the screen size is
</summary>
            <param name="width">The screen width</param>
            <param name="height">The screen height</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidManager.SetMaxSize(System.Int32,System.Int32)">
            <summary>
Sets the max ad container size
</summary>
            <param name="width">The max width of the ad container</param>
            <param name="height">The max height of the ad container</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidManager.SetSize(System.Int32,System.Int32)">
            <summary>
Sets the ad container size
</summary>
            <param name="width">The width of the ad container</param>
            <param name="height">The height of the ad container</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidManager.SetAdState(Microsoft.Advertising.UI.Models.Ads.Mraid.RichMediaAdState)">
            <summary>
Sets the mraid ad state
</summary>
            <param name="adstate">The new ad state</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidManager.SetPlacementType(Microsoft.Advertising.UI.Models.Ads.Mraid.AdPlacementType)">
            <summary>
Sets the mraid ad placement type
</summary>
            <param name="type">The ad placement type</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidManager.EventExpandRequested">
            <summary>
An event that signals an mraid expand has been requested
</summary>
            <returns> An event to subscribe to</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidManager.EventCloseRequested">
            <summary>
An event that signals an mraid ad has been closed
</summary>
            <returns>An event to subscribe to</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidManager.EventAdRendered">
            <summary>
An event that signals an mraid ad has been rendered
</summary>
            <returns>An event to subscribe to</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidManager.EventInvokeScript">
            <summary>
An event that signals a script invoke is requested
</summary>
            <returns>The event to subscribe to</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidManager.ScriptNotify(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Handles a script notify from the mraid ad
</summary>
            <param name="value">The string from the script notify event</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidManager.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Constructor; subscribe to sensor events
</summary>
            <param name="context">The factories context</param>
        </member>
        <member name="T:Microsoft.Advertising.UI.Models.Ads.Mraid.MraidManager">
            <summary>
This class implements the native side of mraid support
</summary>
        </member>
        <member name="T:Microsoft.Advertising.UI.Models.Ads.Mraid.RichMediaAdState">
            <summary>
This holds the playback/expansion state of the ad.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.UI.Models.Ads.Mraid.AdPlacementType">
            <summary>
This holds the mraid placement type for this ad
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.IMraidScriptNotifyHandler.Run(std.shared_ptr&lt;Microsoft.Advertising.UI.Models.Ads.Mraid.Details.MraidManagerState&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Executes the script handler
</summary>
            <param name="state">The mraid manager state running this script handler</param>
            <param name="params">The params to this script handler</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.Ads.Mraid.IMraidScriptNotifyHandler.GetCommandName">
            <summary>
Gets the name of this command; used to match this handler with the incoming script action
</summary>
        </member>
        <member name="T:Microsoft.Advertising.UI.Models.Ads.Mraid.IMraidScriptNotifyHandler">
            <summary>
This interface defines a class that handles a script notify command requesting
some Mraid function
</summary>
        </member>
        <member name="T:Microsoft.Advertising.UI.Models.Ads.Mraid.Details.MraidManagerState">
            <summary>
This struct holds the state of the mraid manager
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.FireViewableChange(System.Boolean)">
            <summary>
Fire the viewableChange event to Mraid.
</summary>
            <param name="isViewable">Is the current ad viewable.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.Init">
            <summary>
Initialize task invoker
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.GetNetwork">
            <summary>
Get the network type
</summary>
            <returns>network type</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.DoRequest(System.String,System.String)">
            <summary>
Perform web request 
</summary>
            <param name="url">url to request</param>
            <param name="display">ormma display parameter to specify how to handle response</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.OnUnloaded">
            <summary>
cleans up resoureces used by the class
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.GetTilt">
            <summary>
Reports the current tilt coordinates to ormma once for GetTilt call.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.StopShakeTracking">
            <summary>
Stops the tracking of accelerometer shake data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.StartShakeTracking">
            <summary>
Starts the tracking of accelerometer shake data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.StopTiltTracking">
            <summary>
Stops the tracking of accelerometer tilt data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.StartTiltTracking">
            <summary>
Starts the tracking of accelerometer tilt data.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.SetFullScreenSize(System.Double)">
            <summary>
sets the screen size to the device size
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.SetScreenSize(System.Double,System.Double)">
            <summary>
sets the screen size for the 
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.InvokeScript(System.String,System.String[])">
            <summary>
Invokes a javascript function
</summary>
            <param name="function">the function to call</param>
            <param name="parameters">parameters to pass to the function</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.ReportError(System.String,System.String)">
            <summary>
Reports an error to the ad in the web browser via javascript.
</summary>
            <param name="function">the ORMMA method the error occured in</param>
            <param name="message">the error message</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.StopOrientationMonitoring">
            <summary>
stops listening to the orientation changed event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.StartOrientationMonitoring">
            <summary>
starts listening to the orientation changed event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.UpdateOrientation">
            <summary>
updates the orientation in the WebView
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.StopViewableDataChangedMonitoring">
            <summary>
stops the monitoring of the viewability properties
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.StartViewableDataChangedMonitoring">
            <summary>
starts the monitoring of the viewability properties
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ITaskInvoker.BrowseToUrl(Windows.Foundation.Uri)">
            <summary>
initiates browsing to a url
</summary>
            <param name="uri">location to browse to</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IOrmmaImpl.Execute(System.String)">
            <summary>
Executes the ORMMA action encoded in actionInfo
</summary>
            <param name="actionInfo">string containing action name and parameters in the folowing format,
"actionName:param1=value1&amp;param2=value2"
</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IOrmmaImpl.SetState(Microsoft.Advertising.WinRT.UI.RichMediaAdState)">
            <summary>
updates the state of ormma and keeps track of the previous state
</summary>
            <param name="state">that state to update to</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IOrmmaImpl.Close">
            <summary>
changes the state of the rich media ad dependant on it's current state.
default: moves to hidden
resized: moves to default
expanded: moves to default if it had expanded from default, moves to resized if it was expanded from resized
hidden: no change
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IOrmmaImpl.OnUnloaded">
            <summary>
performs any required cleanup
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IOrmmaImpl.InitializeOrmma">
            <summary>
initialises ormma to a known state
</summary>
            <returns>true if initialisation was successful, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.IOrmmaImpl">
            <summary>
Ormma implementation for native interface.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.RemoveMraidReferencesFromPayload(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Takes in a mraid payload and replaces any occurrence of "script src='mraid.js'" with
"script src=''". This is to prevent a script exception when loading the payload.
</summary>
            <param name="payload">Payload to be searched and replaced.</param>
            <returns>Payload with mraid.js references replaced with empty strings.</returns>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.AdInitialized">
            <summary>
event that is fired when an ad is rendered
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_isSuspended">
            <summary>
tracks if the ad is in the suspended state
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_ormma">
            <summary>
the Ormma handler
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_webView">
            <summary>
the webbrowser control responsible for rendering content
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_preExpandHeight">
            <summary>
holds the pre-expanded height
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_preExpandWidth">
            <summary>
holds the pre-expanded width
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.OnManipulationStateChanged">
            <summary>
Raised  OnManipulationStateChanged event from JS
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.OnPointerMove">
            <summary>
Raised OnPointerMove event from JS
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.OnMouseWheel">
            <summary>
Raised on MouseWheel event from JS
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.OnPointerDown">
            <summary>
Raised on PointerUp event from JS
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.OnPointerUp">
            <summary>
Raised on PointerUp event from JS
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.AdLoadFailed">
            <summary>
event that is fired when an ad fails to load due to timeout or other error
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.PolyAdState">
            <summary>
the state of the browser (default, expanded etc)
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.Focus">
            <summary>
Set the focus on the web view
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.IsInFocus">
            <summary>
Used to ensure that the WebView has been interacted with by a user before an ad can expand
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_preExpandParent">
            <summary>
Parent control before expansion. Used for restore the control back
into the original visual tree after closing.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_adControlElement">
            <summary>
Parent Ad Control -- for viewability checks
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_webViewBrushDisplayRectangle">
            <summary>
rectangle for painting the webviewbrush to
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_lastPerformanceScrollingDisplaySwitchTimestamp">
            <summary>
time the previousOriginOffset was recorded 
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_previousOrientation">
            <summary>
stores the previous orientation to determine if the position change
was caused by a screen rotation
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_previousOriginOffset">
            <summary>
stores the WebViews previous location 
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_navigateUri">
            <summary>
stores the uri to navigate to for the expand to url scenario
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_popupLock">
            <summary>
controls access to the popup
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.AdvertisingWebBrowser.m_popupHost">
            <summary>
container for expanded ad experience
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.CloseExpandedView">
            <summary>
Handles the closing of an expanded ad.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.RaiseAdLoadFailedEvent(System.String)">
            <summary>
Raises the page load failed event to indicate that the ad did not load properly.
This could be due to a timeout, problem loading the renderer, problem interacting
with JavaScript using InvokeScript, etc.
</summary>
            <param name="message">page load failed message</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.SetUseCustomClose(System.Boolean)">
            <summary>
This set expanded view or interstitial ad view showing default close button or not.
</summary>
            <param name="useCustomClose">If true, hide default close button. The ad will show its own close button.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.UpdateExpandProperties(Microsoft.Advertising.WinRT.UI.ExpandProperties)">
            <summary>
This allows resizing an already-expanded ad. This is useful when screen size changes.
</summary>
            <param name="expandProps">updated ExpandProperties to use for the expanded ad</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.Resize(System.Double,System.Double)">
            <summary>
method passed as a delegate to the WP7TaskInvoked to handle the expand operation
</summary>
            <param name="width">width to resize to</param>
            <param name="height">height to resize to</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.Expand(Windows.Foundation.Uri,Microsoft.Advertising.WinRT.UI.ExpandProperties)">
            <summary>
method passed as a delegate to WP7TaskInvoker to handle expand operation
</summary>
            <param name="uri">url to expand to if specified</param>
            <param name="expandProperties">properties for the expand (whether to show background, it's colour etc)</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.GetContainerHeight">
            <summary>
Gets the current container height.
</summary>
            <returns>Container height.</returns>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.IAdvertisingWebBrowser.GetContainerWidth">
            <summary>
Gets the current contained width.
</summary>
            <returns>Container width.</returns>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.ExpandProperties.LockOrientation">
            <summary>
Lock the orientation of the expansion, if it is not specified in the properties object a value
of false is assumed. 
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.ExpandProperties.IsModal">
            <summary>
 read-only property that identifies if the expanded container is modal or not. True, the SDK
 is providing a modal container for the expanded ad; false, the SDK is not providing a modal
 container for the expanded ad. 
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.ExpandProperties.UseCustomClose">
            <summary>
allows the ad designer to replace the default close graphic. True, stop showing the default
close graphic and rely on ad creative's custom close indicator; false (default), container
will display the default close graphic/
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.ExpandProperties.Height">
            <summary>
the height of creative in pixels, default is full screen height 
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.ExpandProperties.Width">
            <summary>
the width of creative in pixels, default is full screen width 
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ExpandProperties.GetDefault">
            <summary>
Retrieve ExpandProperties
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ExpandProperties.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
ExpandProperties constructor
</summary>
            <param name="width">widht to expand to</param>
            <param name="height">height to expand to</param>
            <param name="useCustomClose">choose whether to use custom close</param>
            <param name="lockOrientation">choose whether to lock orientation</param>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.ExpandProperties">
            <summary>
holds the container properties used during expand
properties = {  
                "width`*`" : "nn",
                "height`*`" : "nn",   
                "useCustomClose`*`" :  "true|false",  
                "isModal`*`" : "true|false" (read-only),  
                "lockOrientation" : "true|false",  
              }
see http://code.google.com/p/ormma/wiki/ORMMA_JavaScript#getExpandProperties
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AdPlacementType">
            <summary>
Ad Placement types.
</summary>
        </member>
        <member name="F:Interstitial">
            <summary>
interstitial placement.
</summary>
        </member>
        <member name="F:Inline">
            <summary>
inline placement.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.UnloadAdControl">
            <summary>
Release AdControl resources when AdControl is removed from the application page.
This method detects whether this.Parent is null. If the parent is null, we need to
clean up the AdControl.

The cleanup will only occur when the Parent is null, unless forceUnload is true.
When the AdControl is being unloaded (see the AdControl_Unloaded event handler)
we force cleanup even if Parent is not null.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.AdLoadFailedHandler(System.Object,Microsoft.Advertising.WinRT.UI.AdErrorEventArgs)">
            <summary>
Handles the case when an ad fails to load.
</summary>
            <param name="sender">the object which fired the event</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.OnWindowActivated(Windows.UI.Core.CoreWindow,Windows.UI.Core.WindowActivatedEventArgs)">
            <summary>
When the app is activated via mouse, code, and deactived (tabbed off or lost focus), capture the state.
</summary>
            <param name="sender">sender of the event</param>
            <param name="e">arguments for the event</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.OnWindowVisibilityChanged(System.Object,Windows.UI.Core.VisibilityChangedEventArgs)">
            <summary>
When the app is hidden by the start screen or another app, pause the ad control.
</summary>
            <param name="sender">sender of the event</param>
            <param name="e">arguments for the event</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.OnUnloaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
Unloaded event handler - tells you when the control needs to be cleaned up
</summary>
            <param name="sender">sender of the event</param>
            <param name="e">arguments for the event</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.#ctor">
            <summary>
      Initializes a new <c>AdControl</c>.
    </summary>
            <remarks>
                <para>
        The developer must set the <c>ApplicationId</c> and <c>AdUnitId</c> properties before the app
        can show an ad.
      </para>
                <para>
        The default value for the size of the <c>AdControl</c> is 480x80 pixels.
      </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.Resume">
            <summary>
                <para>
        Resumes normal functioning of the ad after being suspended.
      </para>
                <para>
        Resumes automatic refresh of the AdControl, if <c>IsAutoRefreshEnabled</c>=<c>true</c>, and allows
        manual refresh to occur again.
      </para>
            </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.Suspend">
            <summary>
                <para>
        Suspends the current ad. Ad refresh is disabled. If the ad was engaged, the expanded ad is closed.
      </para>
            </summary>
            <remarks>
      This can be used in cases where the app needs to take control of the interface, for instance for an incoming call or alert.
      Replaces the current view of the ad with a snapshot of what was currently being rendered.
      See <c>Resume</c> function for resuming the advertisement.
    </remarks>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.RemoveAdTag(System.String)">
            <summary>
      Remove an ad tag from the ad control. This has no effect if the tag name does not exist.
    </summary>
            <param name="tagName">
      The name of the tag to remove.
    </param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.AddAdTag(System.String,System.String)">
            <summary>
      Add an ad tag to the ad control. The maximum is 10 tags per ad control. If maximum is exceeded an errorOccurred event will be fired.
    </summary>
            <param name="tagName">
      The name of the tag. Maximum of 16 characters, if exceeded an errorOccurred event will be fired.
    </param>
            <param name="tagValue">
      The value of the tag. Maximum of 128 characters, if exceeded an errorOccurred event will be fired.
    </param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.Refresh">
            <summary>
                <para>
        Starts a request for a new ad, which will be shown as soon as it is available.
      </para>
                <para>
        This method may not be used when <c>IsAutoRefreshEnabled</c> is set to <c>true</c>.
      </para>
            </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.InitializeAdControl">
            <summary>
Initialize the AdControl.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.OnSizeChanged(System.Object,Windows.UI.Xaml.SizeChangedEventArgs)">
            <summary>
Size changed event handler. If the control
contains bannerAdView/textAdView, trigger size validation and 
ad rendering. Also change placement size according to the control
size.
</summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Arguments for the event</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.ManipulationStateChangeEventHandler(Microsoft.Advertising.WinRT.UI.ManipulationStateChangedEventArgs)">
            <summary>
Fires ManipulationStateChange event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.MouseWheelEventHandler(Microsoft.Advertising.WinRT.UI.MouseWheelEventArgs)">
            <summary>
Fires OnMouseWheel event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.PointerDownEventHandler(Microsoft.Advertising.WinRT.UI.PointerDownEventArgs)">
            <summary>
Fires OnPointerDown event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.PointerUpEventHandler">
            <summary>
Fires OnPointerUp event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.PointerMoveEventHandler(Microsoft.Advertising.WinRT.UI.PointerMoveEventArgs)">
            <summary>
Fires OnPointerMove event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.BroadcastAdRefreshedEvent">
            <summary>
Helper method that broadcasts ad refreshed events to any listeners
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.BroadcastErrorEvent(Microsoft.Advertising.ErrorCode,System.String)">
            <summary>
Helper method that broadcasts error events to any listeners 
and discard current ad.
</summary>
            <param name="error">the exception</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.BroadcastErrorEvent(Microsoft.Advertising.ErrorCode,System.String,System.Boolean)">
            <summary>
Helper method that broadcasts error events to any listeners
and can choose to discard ad.
</summary>
            <param name="error">the exception</param>
            <param name="discardAd">true to discard ad, false not to</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.DiscardCurrentAd">
            <summary>
This will discard the current ad, remove any existing child elements (e.g. the WebView containing the ad),
and make the ad control transparent.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.VerifyAndDisplayAd(Microsoft.Advertising.Shared.WinRT.Advertisement)">
            <summary>
Helper method called from the event handler for the library notification of a new ad - used to make sure the
new ad fits in the size available, and can be displayed by the ad control.
</summary>
            <param name="ad">Advertisement to verify and display</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.UpdateViewability">
            <summary>
This method polls the viewable property collection (size, bounds, occlusion, percent in view, focus,
opacity, and position) for changes. The changes are stored in the ViewabilityState (created by this class)
and are passed all the way down to the ad request to be appended to the query parameter string.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.HasAd">
            <summary>
      Returns true if the <c>AdControl</c> has received an ad from the server.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.IsSuspended">
            <summary>
      Indicates whether the <c>AdControl</c> is currently in suspended state.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.PostalCode">
            <summary>
      The postal code of the user.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.CountryOrRegion">
            <summary>
      The country or region of the user.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.Keywords">
            <summary>
      Keywords used in ad targeting.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.AutoRefreshIntervalInSeconds">
            <summary>
      The auto-refresh interval in seconds.
    </summary>
            <remarks>
      Value should be equal to or larger than default auto-refresh value.
      If the set value is less than the default auto-refresh value, the default auto-refresh value will be used.
    </remarks>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.IsAutoRefreshEnabled">
            <summary>
      Enables or disables the automatic refresh of ads. This property cannot be changed after it is initially set.
    </summary>
            <remarks>
      This property can only be set once. Default value is <c>true</c>.
    </remarks>
            <exception>The IsAutoRefreshEnabled property has been set already.</exception>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.IsEngaged">
            <summary>
      Indicates whether the user is currently interacting with the ad.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.ApplicationId">
            <summary>
      The application ID of the app. This value is provided when you register the app with pubCenter.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl.AdUnitId">
            <summary>
                <para>
        The ad unit identifier.
      </para>
                <para>
        This value is provided to the publisher when the publisher creates an ad unit in pubCenter.
      </para>
            </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.OnManipulationStateChanged">
            <summary>
      This event occurs when the <c>AdControl</c> receives a manipulation state changed event.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.OnPointerMove">
            <summary>
      This event occurs when the <c>AdControl</c> receives a pointer move event.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.OnMouseWheel">
            <summary>
      This event occurs when the <c>AdControl</c> receives a mouse wheel event.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.OnPointerDown">
            <summary>
      This event occurs when the user pushes down inside of the ad control using mouse, pointer, or touch. The application can
      use this event to animate the ad control for visual touch down feedback. The ad may suppress this event if it is providing
      visual touch down feedback itself.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.OnPointerUp">
            <summary>
      This event occurs when the user releases a push down inside of the ad control using mouse, pointer, or touch. The application
      can use this event to animate the ad control for visual touch down feedback. The ad may suppress this event if it is providing
      visual touch down feedback itself.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.IsEngagedChanged">
            <summary>
      This event occurs when the user clicks on an ad and begins an expanded experience.
    </summary>
            <remarks>
      This event is intended to give developers the option to pause the app when the overlay appears.
    </remarks>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.AdRefreshed">
            <summary>
      This event occurs when the <c>AdControl</c> receives a new ad.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl.ErrorOccurred">
            <summary>
      This event occurs when the <c>AdControl</c> encounters an error while retrieving ads.
    </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl.RegisterDependencyProperties">
            <summary>
Helper method for delaying registeration of depenendency properties
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AdControl">
            <summary>
                <para>
        The Microsoft <c>AdControl</c> enables developers to add ads to their apps.
      </para>
            </summary>
            <remarks>
                <para>
        The <c>AdControl</c> is configured to show a new ad every 60 seconds. This is
        the default setting. If this behavior does not suit the app, you can set
        <c>IsAutoRefreshEnabled</c> to <c>false</c> and use the <c>Refresh</c> method to request
        that the <c>AdControl</c> show the next ad that is available.
      </para>
                <para>
        Do not use the same instance of an <c>AdControl</c> across multiple pages.
      </para>
                <para>
        Once set, the parent of the <c>AdControl</c> should not be changed.
      </para>
                <para>
        All of the required properties on the <c>AdControl</c> need to be set before adding the control
        to a parent object. These required properties include <c>AdUnitId</c> and <c>ApplicationId</c>.
      </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.PlatformDependency.IsWindows">
            <summary>
Returns true if windows
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.PlatformDependency.IsMobile">
            <summary>
Returns true if mobile
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.PlatformDependency.GetBootstrapZoomStyle">
            <summary>
Retrieve the bootstrap zoom style
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.User.ToJson">
            <summary>
    Gets or sets the exchange-specific identifier for the user.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.User">
            <summary>
This object contains information known or derived about the human user of the device (i.e., the
audience for advertising).
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.UserExtension">
            <summary>
User extensions used for sendind server specific objects
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.UserIdType">
            <summary>
User Id type sent in the request
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Native.PlacementType">
            <summary>
Gets or sets the design/format/layout of the ad unit being offered.
1 In the feed of content - for example as an item inside the organic feed/grid/listing/carousel.
2 In the atomic unit of the content - IE in the article page or single image page
3 Outside the core content - for example in the ads section on the right rail,
as a banner-style placement near the content, etc.
4 Recommendation widget, most commonly presented below the article content.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Native.Context">
            <summary>
Gets or sets the context in which the ad appears.
1 Content-centric context such as newsfeed, article, image gallery, video gallery, or similar.
2 Social-centric context such as social network feed, email, chat, or similar.
3 Product context such as product listings, details, recommendations, reviews, or similar.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Native.Assets">
            <summary>
 Gets or sets assets for bid response, must comply with the array of elements expressed in the bid request.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.Native">
            <summary>
Native Ads Object following OpenRTB Native Ads spec 1.1
http://www.iab.com/wp-content/uploads/2016/03/OpenRTB-Native-Ads-Specification-1-1_2016.pdf
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Asset.Data">
            <summary>
Gets or sets data object for brand name, description, ratings, prices etc.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Asset.Video">
            <summary>
Gets or sets video object for video assets.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Asset.Image">
            <summary>
Gets or sets image object for image assets.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Asset.Title">
            <summary>
Gets or sets title object for title assets.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Asset.Required">
            <summary>
Gets or sets required field.
Set to 1 if asset is required (exchange will not accept a bid without it).
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.Asset.ToJson">
            <summary>
Gets or sets unique asset ID, assigned by exchange.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.Asset">
            <summary>
The main container object for each asset requested or supported by Exchange on behalf of the
rendering client.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.NativeVideo.MaxDuration">
            <summary>
Gets or sets the maximum video ad duration in seconds.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.NativeVideo.MinDuration">
            <summary>
Gets or sets the minimum video ad duration in seconds. 
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.NativeVideo.Protocols">
            <summary>
    Gets or sets the array of supported video bid response protocols.
    SDK currently supports 2,3,5,6.
    1 - VAST 1.0 
    2- VAST 2.0
    3- VAST 3.0
    4- VAST 1.0 Wrapper
    5- VAST 2.0 Wrapper 
    6- VAST 3.0 Wrapper
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.NativeVideo.ToJson">
            <summary>
    Get or sets the content MIME types supported.
    Currently SDK supports only "video/mp4" and "application/javascript".
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.NativeVideo">
            <summary>
The video object to be used for all video elements supported in the Native Ad. This corresponds
to the Video object of OpenRTB 2.3.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Data.Length">
            <summary>
 Gets or sets maximum length of the text in the element’s response
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.Data.ToJson">
            <summary>
Gets or sets type ID of the element supported by the publisher.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.Data">
            <summary>
Corresponds to the Data Object in the request, with the value filled in. The Data Object is to be
used for all miscellaneous elements of the native unit such as Ratings, Review Count, Stars,
Downloads, Price count etc.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Image.Mimes">
            <summary>
Gets or sets the mimes supported for image.
Includes "image/jpg" "image/gif" and others from https://en.wikipedia.org/wiki/MIME
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Image.HeightMin">
            <summary>
 Gets or sets the minimum requested height of the image in pixels.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Image.WidthMin">
            <summary>
 Gets or sets the minimum requested width of the image in pixels.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.Image">
            <summary>
The Image object to be used for all image elements of the Native ad such as Icons, Main Image, etc.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Title.Length">
            <summary>
Gets or sets maximum length of the text in the title element. Recommended to be 25, 90, or 140.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.Title">
            <summary>
The Title object is to be used for title element of the Native ad.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.DataAsset">
            <summary>
Common asset element types of native advertising as per OpenRTB Native Ads 1.1 spec
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.ImageType">
            <summary>
Image type used for native request 
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.Protocols">
            <summary>
Protocols used for making video requests
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Impression.TagId">
            <summary>
    Gets or sets the identifier for specific ad placement or ad tag that was used to
    initiate the auction. This can be useful for debugging of any
    issues, or for optimization by the buyer
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Impression.Interstitial">
            <summary>
1 = the ad is interstitial or full screen, 0 = not interstitial.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Impression.Native">
            <summary>
    Gets or sets the Native object which is required if this impression is offered
    as a Native ad opportunity
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Impression.Id">
            <summary>
    Gets or sets the a unique identifier for this impression within the context of
    the bid request (typically, starts with 1 and increments..
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.Impression">
            <summary>
    This object describes an ad placement or impression being auctioned. 
    A single bid request can include multiple Imp objects.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.NativeWrapper.NativeWrapperReq">
            <summary>
    Gets or sets the Native object which is required if this impression is offered
    as a Native ad opportunity
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.NativeWrapper">
            <summary>
    Gets or sets the Native object wrapped in the native wrapper as required by OpenRTB
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.NativeWrapperRequest.Native">
            <summary>
    Gets or sets the Native object which is required if this impression is offered
    as a Native ad opportunity
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Device.Extension">
            <summary>
    Gets or sets the publisher extensions.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Device.Ifa">
            <summary>
    Gets or sets the ID sanctioned for advertiser use in the clear (i.e., not hashed). 
    Contains the adid.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Device.Language">
            <summary>
    Gets or sets the language of the browser using ISO-639-1-alpha-2.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Device.Model">
            <summary>
    Gets or sets the model of the device.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Device.Make">
            <summary>
    Gets or sets the make of the device.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Device.Type">
            <summary>
    Gets or sets the type of the device.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Device.IPv4Address">
            <summary>
    Gets or sets the IPv4 address closest to device.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Device.LimitAdTracking">
            <summary>
    Gets or sets a value indicating the "Limit Ad Tracking" signal.
</summary>
            <value>
                <c>true</c> if  tracking must be limited per commercial guidelines; otherwise, <c>false</c>.
</value>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Device.DoNotTrack">
            <summary>
    Gets or sets a value indicating whether the standard "Do Not Track" flag is set.
</summary>
            <value>
                <c>true</c> if  tracking is restricted / do not track; otherwise, <c>false</c>.
</value>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.Device">
            <summary>
    This object provides information pertaining to the device through which the user is interacting.
    Device information includes its hardware, platform, location, and carrier data.  The device can
    refer to a mobile handset, a desktop computer
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.DeviceExtension.Locale">
            <summary>
    Gets or sets the locale of the device.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.DeviceExtension">
            <summary>
    This object describes the device extensions used between the client and the server.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.DeviceType">
            <summary>
    This object maps the device type from where the request is sent.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Application.Categories">
            <summary>
    Gets or sets the array of IAB content categories of the app.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Application.Publisher">
            <summary>
    Gets or sets the details about the publisher of the app.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Application.Bundle">
            <summary>
    Gets or sets the application bundle or package name (e.g., com.foo.mygame); intended
    to be a unique identifier across exchanges.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.Application.Name">
            <summary>
    Gets or sets app name (may be aliased at the publisher’s request).
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.Application.ToJson">
            <summary>
    Gets or sets the exchange-specific application identifier.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.Application">
            <summary>
    This object should be included if the ad supported content is a non-browser application
    (typically in mobile) as opposed to a website.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.Publisher">
            <summary>
    This object describes the publisher of the media in which the ad will be displayed.
    The publisher is typically the seller in an OpenRTB transaction.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.PublisherExtension.StoreGuid">
            <summary>
    Gets or sets the store application guid.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.PublisherExtension">
            <summary>
    This object describes the publisher extensions used between the client and server.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.OpenRTBRequest.IsTest">
            <summary>
    Gets or sets an indicator of test mode in which auctions are not billable, 
    where 0 = live mode, 1 = test mode.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.OpenRTBRequest.User">
            <summary>
    Gets or sets the details about the human user of the device; audience 
    for advertising.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.OpenRTBRequest.Device">
            <summary>
    Gets or sets the details about the user’s device to which the impression 
    will be delivered.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.OpenRTBRequest.Application">
            <summary>
    Gets or sets the details about the publisher’s app (i.e., non-browser applications). Only
    applicable and recommended for apps.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.OpenRTBRequest.Impressions">
            <summary>
    Gets or sets the list of objects representing the impressions offered. At least 1
    <see cref="T:Microsoft.Advertising.Ads.Requests.AdBroker.Impression" /> object is required.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Ads.Requests.AdBroker.OpenRTBRequest.Id">
            <summary>
    Setting the ad session id.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.OpenRTBRequest.Stringify">
            <summary>
    Gets or sets the unique identifier of the bid request, provided by the exchange.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.OpenRTBRequest">
            <summary>
Open RTB Bid Request 
Open RTB 2.3 Spec https://www.iab.com/wp-content/uploads/2015/06/OpenRTB-API-Specification-Version-2-3.pdf
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdRequestFactory.InitRequestUrl(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
ads the no-cache header and optionally the X-Ads-UserAuth-Ticket header if the request url is https://mobileads.msn.com/v3/delivery/placement
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdRequestFactory.IsReservedRequestParameter(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
initializes the m_adServerUrl with either production or test value bases on the presence of a file named
config.xml in the root of the application install location.
checks to see if the supplied value is a reserved request parameter
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdRequestFactory.GetRequestData(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDer">
            <summary>
Contains all the information necessary to request an ad, including the URL and any headers.
</summary>
            <param name="url">The url for the request</param>
            <param name="headers">The headers for the request</param>
            <param name="context">The context to use to build the request</param>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.AdBrokerRequestBuilder.GetTokenValue(std.shared_ptr&lt;Microsoft.Advertising.Net.ITemplateToken&gt;)">
            <summary>
Gets toekn value
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.AdBrokerRequestBuilder.BuildNative(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Building Native Post Body for Adbroker request
<params>Post body dor sending the request</params></summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.AdBrokerRequestBuilder">
            <summary>
AdBrokerRequestBuilder builds an IAdRequest for AdBroker
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.Templated.TemplatedAdRequestBuilder">
            <summary>
TemplatedAdRequestBuilder uses the #TOKEN# templating system
to build an HttpAdRequest
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.Http.HttpAdRequestBuilder">
            <summary>
HttpAdRequestBuilder builds an HttpAdRequest
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.Http.HttpAdRequest">
            <summary>
HttpAdRequest holds the information to make an HTTP request
The response is handled by HttpAdRequestHandler, which should attempt to convert
The http response into an appropriate ad payload
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.AppendBuffer(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
            <summary>
Appends a byte buffer to the response
</summary>
            <param name="response">The body of the http response</param>
            <param name="responseLength">The length of the body</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.GetHeader(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets a header value if it exists in the response.
</summary>
            <param name="headerName">The name of the header to get</param>
            <returns>The header's value if it exists; an empty string if it doesn't</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.ContainsHeader(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Checks to see if a header exists in the response.
</summary>
            <param name="headerName">The name of the header to check</param>
            <returns>True if the header exists; false if not.</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.GetResponse(System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Accessor to get the response body as a byte array
</summary>
            <param name="length">The length of the body</param>
            <returns>The response body as a pointer</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.GetResponseAsVector">
            <summary>
Accessor to get the response body as a vector of bytes
</summary>
            <returns>The response body</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.GetResponseAsString(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Accessor to get the response body as a wstring
</summary>
            <param name="result">The output string if the conversion was successful</param>
            <returns>Whether the response was succesfully converted to a string</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.GetResponseType">
            <summary>
Accessor to get the http response type
</summary>
            <returns>The response type</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.GetError">
            <summary>
Gets the error if there is one
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.GetStatus">
            <summary>
Accessor to get the http status code
</summary>
            <returns>The status code</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.WasSuccessful">
            <summary>
Checks that the status isn't an HRESULT and the status code is an expected 200-range value
</summary>
            <returns>True if status code is an expected 200-range value</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.IsDataAvailable">
            <summary>
Checks to see if the status isn't an HRESULT and the status code is 200 and the body isn't empty
</summary>
            <returns>True if status code is 200 and the body isn't empty</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.#ctor(Microsoft.Advertising.Net.HttpStatusCode,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServi">
            <summary>
Constructor. Initializes a status and response and the response headers
</summary>
            <param name="status">The status code of the http response</param>
            <param name="response">The body of the http response</param>
            <param name="responseLength">The length of the body</param>
            <param name="headers">The headers of the http response</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.#ctor(Microsoft.Advertising.Net.HttpStatusCode,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
            <summary>
Constructor. Initializes a status and response.
</summary>
            <param name="status">The status code of the http response</param>
            <param name="response">The body of the http response</param>
            <param name="responseLength">The length of the body</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.#ctor(Microsoft.Advertising.Net.HttpStatusCode)">
            <summary>
Constructor. Initializes a status. Useful for when there is only a status and no response
</summary>
            <param name="status">The status code of the http response</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebResponse.#ctor(Microsoft.Advertising.WException)">
            <summary>
Constructor. Initializes a webresponse with a given exception.
</summary>
            <param name="status">The exception</param>
        </member>
        <member name="T:Microsoft.Advertising.Net.WebResponse">
            <summary>
This class holds the data from an http response.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.WebUrlAndHeaders">
            <summary>
A struct to hold a url and headers
Replaces a tuple that was used previously to avoid C4503 compiler warnings
</summary>
        </member>
        <member name="D:Microsoft.Advertising.Net.WebClientHeaders">
            <summary>
A typedef defining a collection of WebClientHeaders
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.PayloadParsers.NativeAdPayloadParser.ParseIntoPayload(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Microsoft.Advertising.WException*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
From IAdPayloadParser; Parses a string into an NativeAdPayload
</summary>
            <param name="payloadString">The string to parse</param>
            <param name="wasParsed">An output bool. The method sets this to true if it recognizes the string as something it can handle</param>
            <param name="exception">An output exception. If the parser recognizes the payload string but an error occurs during parsing, it is stored here.</param>
            <returns>The parsed NativeAdPayload if successful. Nullptr if not.</returns>
        </member>
        <member name="T:Microsoft.Advertising.Ads.PayloadParsers.NativeAdPayloadParser">
            <summary>
This class implements an IAdPayloadParser for Native Ads.
It parses a payload string into a Native Ad payload object.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.NativeAdBrokerAdPlacement.BuildRequest(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs the post data in the builder, also sets the response handler function
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.NativeAdBrokerAdPlacement.SendAdRequestAsync(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Concurrency.cancellation_token_source)">
            <summary>
Implements this method after building the post data for the request to make call to ad broker.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.NativeAdBrokerAdPlacement.SetViewabilityState(std.shared_ptr&lt;Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState&gt;)">
            <summary>
The viewability state contains the current state of all the properties being monitored (e.g. opacity, occlusion, percent in view),
so setting this here will allow this class to append the properties to the ad request query string.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.NativeAdBrokerAdPlacement.UseIntServer(System.Boolean)">
            <summary>
Set this to use the Int environment instead of Prod
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.NativeAdBrokerAdPlacement">
            <summary>
This class subclasses AdPlacementNative to allow AdBroker use in existing code
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.NativeAdBrokerAdPlacementPayloadHandler.HandlePayload(std.shared_ptr&lt;Microsoft.Advertising.Ads.IAdPayload&gt;,Microsoft.Advertising.WException)">
            <summary>
From IAdPayloadHandler; Handles the response from the request
</summary>
            <param name="adPayload">The received ad payload</param>
            <param name="exception">The exception from the request, if there is one</param>
            <returns>True if the given payload was recognized and handled by this handler</returns>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Requests.AdBroker.NativeAdBrokerAdPlacementPayloadHandler.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Concurrency.SignalEvent&gt;,std.shared_ptr&lt;Microsoft.Advertising.Ads.Payloads.NativeAdPayload&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Microsoft.Advertising.WException*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructor
</summary>
            <param name="evt">An event to signal when the request has been processed</param>
            <param name="result">The universal ad payload parsed from the response, if successsful</param>
            <param name="exResult">The exception from the ad payload, if there is one</param>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Requests.AdBroker.NativeAdBrokerAdPlacementPayloadHandler">
            <summary>
This class makes the payload SendAdRequest by adCall Request to AdBroker
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Utils.AllocTracker">
            <summary>
This class can be used to track allocation/deallocation counts.
It's useful for memory leak tracking.
Just add this class as a member of the class you're tracking.
Initialize it in the constructor with the name of the class and
it'll output allocation/deallocations to the debug log
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Utilities.AppendHttpDelimitedString(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Helper method to form the http request string.
</member>
        <member name="T:Microsoft.Advertising.Utils.Utilities">
Class for containing utility functions.
</member>
        <member name="T:Microsoft.Advertising.Utils.UtilitiesCX">
Class for containing utility functions.
</member>
        <member name="M:Microsoft.Advertising.Net.Tokens.UserTicket.WLIDUserTicketTemplateToken.GetValue(std.vector&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.allocator&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets the wlid ticket
The args vector is assumed to have the service and proxy as the first and second arguments
</summary>
            <param name="args">The arguments to the ticket request</param>
        </member>
        <member name="T:Microsoft.Advertising.Net.ITemplateToken">
            <summary>
ITemplateToken represents a token replacement handler for the template url system
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.MediaErrors.GetMediaError(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;)">
            <summary>
Returns the vast error code and error message for a particular media error scenario
<param name="errorMessage">The error message received in the Media Failed event from the media element</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.MediaErrors.GetHresultFromErrorMessage(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Parses the error message to determine the hresult and error status code
<param name="errorMessage">The error message received in the Media Failed event from the media element</param></summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VastErrorCode.GeneralVpaidError">
            <summary>
A critical error occurred in the VPAID ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VastErrorCode.VastUnableToPlayFile">
            <summary>
Problem displaying MediaFile
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VastErrorCode.VastNoSupportedMedia">
            <summary>
Couldnt find MediaFile supported by video player, based on attributed of the MediaFile element
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VastErrorCode.VastMediaTimeout">
            <summary>
Timeout of MediaFile URI
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VastErrorCode.VastFileNotFound">
            <summary>
Unable to find Linear/MediaFile from URI
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.VastErrorCode.VastGeneralLinearError">
            <summary>
Video player is unable to display the Linear Ad.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.VpaidEventArgs.Message">
            <summary>
Any message that may be associated with the event, for example AdError may contain an error description.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.VpaidEventArgs.EventName">
            <summary>
The name of the VPAID event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.HandleAdViewResumeRequested(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Details.AdControlState&gt;)">
            <summary>
This handles a request from the IAdView to resume the refresh timer.
</summary>
            <param name="weakState">A pointer to the ad control state</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.HandleAdViewPauseRequested(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Details.AdControlState&gt;)">
            <summary>
This handles a request from the IAdView to pause the refresh timer.
</summary>
            <param name="weakState">A pointer to the ad control state</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.HandleSizeChanged(System.Object,Windows.UI.Xaml.SizeChangedEventArgs)">
            <summary>
This handles the size changed event for the StackPanel
This adjusts the size of the ad container and notifies the model of the new size.
</summary>
            <param name="sender">The sender</param>
            <param name="e">The new sizes</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.HandleOnLoaded(System.Object,Windows.UI.Xaml.RoutedEventArgs)">
            <summary>
This handles the StackPanel OnLoaded XAML event
The adcontrolmodel is 'started' here.
The event is unsubscribed once invoked.
</summary>
            <param name="sender">The sender</param>
            <param name="e">Unused</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.HandleModelEventRequestStarted(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Details.AdControlState&gt;)">
            <summary>
This handles an ad request started event
</summary>
            <param name="weakState">A pointer to the ad control state</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.HandleModelEventRequestCompleted(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Details.AdControlState&gt;)">
            <summary>
This handles an ad request completion event
</summary>
            <param name="weakState">A pointer to the ad control state</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.HandleModelEventModelReceived(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Details.AdControlState&gt;,std.shared_ptr&lt;Microsoft.Advertising.UI.Models.IAdModel&gt;)">
            <summary>
This handles a new ad model being received.
</summary>
            <param name="weakState">A pointer to the ad control state</param>
            <param name="model">The received ad model</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.HandleModelEventError(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Details.AdControlState&gt;,Microsoft.Advertising.NativeErrorCode,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This handles an error event from the model.
</summary>
            <param name="weakState">A pointer to the ad control state</param>
            <param name="code">The error code</param>
            <param name="message">The error message</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.CommonInit">
            <summary>
This common init performs the shared bits of constructor code. If C++/CX allowed delegating constructors,
we'd simply call the context constructor from the default constructor,
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.RegisterDependencyProperties">
            <summary>
Helper method for delaying registeration of depenendency properties
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.#ctor">
            <summary>
      Initializes a new <c>AdControl</c>.
    </summary>
            <remarks>
                <para>
        The developer must set the <c>ApplicationId</c> and <c>AdUnitId</c> properties before the app
        can show an ad.
      </para>
                <para>
        The default value for the size of the <c>AdControl</c> is 480x80 pixels.
      </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.Resume">
            <summary>
                <para>
        Resumes normal functioning of the ad after being suspended.
      </para>
                <para>
        Resumes automatic refresh of the AdControl, if <c>IsAutoRefreshEnabled</c>=<c>true</c>, and allows
        manual refresh to occur again.
      </para>
            </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.Suspend">
            <summary>
                <para>
        Suspends the current ad. Ad refresh is disabled. If the ad was engaged, the expanded ad is closed.
      </para>
            </summary>
            <remarks>
      This can be used in cases where the app needs to take control of the interface, for instance for an incoming call or alert.
      Replaces the current view of the ad with a snapshot of what was currently being rendered.
      See <c>Resume</c> function for resuming the advertisement.
    </remarks>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.RemoveAdTag(System.String)">
            <summary>
      Remove an ad tag from the ad control. This has no effect if the tag name does not exist.
    </summary>
            <param name="tagName">
      The name of the tag to remove.
    </param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.AddAdTag(System.String,System.String)">
            <summary>
      Add an ad tag to the ad control. The maximum is 10 tags per ad control. If maximum is exceeded an errorOccurred event will be fired.
    </summary>
            <param name="tagName">
      The name of the tag. Maximum of 16 characters, if exceeded an errorOccurred event will be fired.
    </param>
            <param name="tagValue">
      The value of the tag. Maximum of 128 characters, if exceeded an errorOccurred event will be fired.
    </param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.AdControl2.Refresh">
            <summary>
                <para>
        Starts a request for a new ad, which will be shown as soon as it is available.
      </para>
                <para>
        This method may not be used when <c>IsAutoRefreshEnabled</c> is set to <c>true</c>.
      </para>
            </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl2.HasAd">
            <summary>
      Returns true if the <c>AdControl</c> has received an ad from the server.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl2.IsSuspended">
            <summary>
      Indicates whether the <c>AdControl</c> is currently in suspended state.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl2.PostalCode">
            <summary>
      The postal code of the user.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl2.CountryOrRegion">
            <summary>
      The country or region of the user.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl2.Keywords">
            <summary>
      Keywords used in ad targeting.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl2.AutoRefreshIntervalInSeconds">
            <summary>
      The auto-refresh interval in seconds.
    </summary>
            <remarks>
      Value should be equal to or larger than default auto-refresh value.
      If the set value is less than the default auto-refresh value, the default auto-refresh value will be used.
    </remarks>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl2.IsAutoRefreshEnabled">
            <summary>
      Enables or disables the automatic refresh of ads. This property cannot be changed after it is initially set.
    </summary>
            <remarks>
      This property can only be set once. Default value is <c>true</c>.
    </remarks>
            <exception>The IsAutoRefreshEnabled property has been set already.</exception>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl2.IsEngaged">
            <summary>
      Indicates whether the user is currently interacting with the ad.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl2.ApplicationId">
            <summary>
      The application ID of the app. This value is provided when you register the app with pubCenter.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdControl2.AdUnitId">
            <summary>
                <para>
        The ad unit identifier.
      </para>
                <para>
        This value is provided to the publisher when the publisher creates an ad unit in pubCenter.
      </para>
            </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl2.OnManipulationStateChanged">
            <summary>
      This event occurs when the <c>AdControl</c> receives a manipulation state changed event.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl2.OnPointerMove">
            <summary>
      This event occurs when the <c>AdControl</c> receives a pointer move event.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl2.OnMouseWheel">
            <summary>
      This event occurs when the <c>AdControl</c> receives a mouse wheel event.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl2.OnPointerDown">
            <summary>
      This event occurs when the user pushes down inside of the ad control using mouse, pointer, or touch. The application can
      use this event to animate the ad control for visual touch down feedback. The ad may suppress this event if it is providing
      visual touch down feedback itself.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl2.OnPointerUp">
            <summary>
      This event occurs when the user releases a push down inside of the ad control using mouse, pointer, or touch. The application
      can use this event to animate the ad control for visual touch down feedback. The ad may suppress this event if it is providing
      visual touch down feedback itself.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl2.IsEngagedChanged">
            <summary>
      This event occurs when the user clicks on an ad and begins an expanded experience.
    </summary>
            <remarks>
      This event is intended to give developers the option to pause the app when the overlay appears.
    </remarks>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl2.AdRefreshed">
            <summary>
      This event occurs when the <c>AdControl</c> receives a new ad.
    </summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.AdControl2.ErrorOccurred">
            <summary>
      This event occurs when the <c>AdControl</c> encounters an error while retrieving ads.
    </summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.AdControl2">
            <summary>
This will eventually be the replacement AdControl.
It derives from StackPanel as suggested by Tim Heurer.
There was an issue with frameworks loading user control templates.
Deriving from StackPanel was the suggested fix.
Deriving from StackPanel does have a few disadvantages - notably 
StackPanels cannot get focus, so focus operations get weird, especially
with regards to tab/keyboard/gamepad navigation.
This is a problem for accessibility compliance.

Remaining todos:
- Finish mraid implementation
   - Close overlay on pop up
- Taboola refresh header support
- Viewability support
- Vpaid?
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Details.AdControlState.ResolveControl">
            <summary>
Helper method to resolve the weak reference to the ad control to and ad control
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Details.AdControlState.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Constructor
</summary>
            <param name="context">The context for this ad control</param>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.Details.AdControlState">
            <summary>
This is state object for the AdControl
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PointerDownEventArgs.KeyCode">
            <summary>
Pointer keyCode
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PointerDownEventArgs.PointerType">
            <Summary>
Possible values are Mouse, Touch, Pen
</Summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PointerDownEventArgs.PointerCoordinate">
            <summary>
Coordinate of the pointer
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.MouseWheelEventArgs.WheelDelta">
            <summary>
Delta in wheel change
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.MouseWheelEventArgs.CtrlKeyPressed">
            <Summary>
If Ctrl key was pressed
</Summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.MouseWheelEventArgs.PointerCoordinate">
            <summary>
Coordinate of the pointer
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.PointerMoveEventArgs.MouseCoordinate">
            <summary>
Coordinate of the mouse
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.ManipulationStateChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
State change event
<param name="current">Current state</param><param name="last">Last state</param></summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.ManipulationStateChangedEventArgs.LastState">
            <summary>
MS_MANIPULATION_STATE_STOPPED - 0
The content has stopped moving and there is no active manipulation.
MS_MANIPULATION_STATE_ACTIVE - 1
A contact is touching the surface and interacting with content.
MS_MANIPULATION_STATE_INERTIA -	2
The content is still moving, but contact with the surface has ended(finger, pen, mouse lifted).
MS_MANIPULATION_STATE_PRESELECT - 3
A contact has initiated a cross - slide interaction.
MS_MANIPULATION_STATE_SELECTING - 4
A cross - slide interaction has crossed the selection distance threshold; selection is activated.
MS_MANIPULATION_STATE_DRAGGING - 5
A cross - slide interaction has crossed the drag distance threshold; dragging is activated.
MS_MANIPULATION_STATE_CANCELLED - 6
A cross - slide interaction has been cancelled.This can happen for any of the following reasons :
The user hits the Esc key
The window lost focus
The associated pointer was cancelled(for example, due to a digitizer issue)
The drag was cancelled via script(for example, by calling preventDefault on a dragstart or drag event)
MS_MANIPULATION_STATE_COMMITTED - 7
The touch pointer was released and the manipulation has completed.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.ManipulationStateChangedEventArgs.CurrentState">
            <summary>
MS_MANIPULATION_STATE_STOPPED - 0
The content has stopped moving and there is no active manipulation.
MS_MANIPULATION_STATE_ACTIVE - 1
A contact is touching the surface and interacting with content.
MS_MANIPULATION_STATE_INERTIA -	2
The content is still moving, but contact with the surface has ended(finger, pen, mouse lifted).
MS_MANIPULATION_STATE_PRESELECT - 3
A contact has initiated a cross - slide interaction.
MS_MANIPULATION_STATE_SELECTING - 4
A cross - slide interaction has crossed the selection distance threshold; selection is activated.
MS_MANIPULATION_STATE_DRAGGING - 5
A cross - slide interaction has crossed the drag distance threshold; dragging is activated.
MS_MANIPULATION_STATE_CANCELLED - 6
A cross - slide interaction has been cancelled.This can happen for any of the following reasons :
The user hits the Esc key
The window lost focus
The associated pointer was cancelled(for example, due to a digitizer issue)
The drag was cancelled via script(for example, by calling preventDefault on a dragstart or drag event)
MS_MANIPULATION_STATE_COMMITTED - 7
The touch pointer was released and the manipulation has completed.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.Init">
            <summary>
Common initialization called from the constructor.
</summary>
            <summary>
Common initialization called from the constructor.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.RecordError(System.String,Microsoft.Advertising.NativeErrorCode)">
            <summary>
Actual implementaiton that records the error
</summary>
            <param name="factories">The factories for this ad request</param>
            <param name="msg">The message for this error</param>
            <param name="errorCode">The code for this error</param>
        </member>
        <member name="F:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.s_isRandSeeded">
Flag to indicate whether srand function has been called to seed random number generator.
</member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.GetAdAsync(System.UInt32,Microsoft.Advertising.Shared.WinRT.ProjectedContext)">
            <summary>
This projected method allows the js layer to request the ad
</summary>
            <param name="timeoutInMilliseconds">the timeout value in milliseconds</param>
            <param name="context">projected context object</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.SetViewabilityState(std.shared_ptr&lt;Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState&gt;)">
            <summary>
Set the viewability state used in the ad request.
</summary>
            <param name="viewabilityState">Shared viewability state from the AdControl to be used in the ad request.</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.GetContext">
            <summary>
Set the context used for web requests and error reporting. This is used 
for testing. 
</summary>
            <param name="context">Context for this object to use.</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.SetContext(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Set the context used for web requests and error reporting. This is used 
for testing. 
</summary>
            <param name="context">Context for this object to use.</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.ClearLastError">
            <summary>
Clear the lastError
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.ReportEvent(System.String)">
            <summary>
This projected method allows the js layer to report interaction events to the native layer
</summary>
            <param name="eventName">The name of the event</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.GetAdAsync(System.UInt32)">
            <summary>
Retrieve an ad
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.SdkType">
            <summary>
The SDK type
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.LastError">
            <summary>
The last error that occurred
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.AdTags">
            <summary>
Ad tag collection
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.AdUnitId">
            <summary>
The ad unit identifier
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.ApplicationId">
            <summary>
The application ID of the app
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.#ctor(Microsoft.Advertising.Shared.WinRT.SdkType,System.String,System.String)">
            <summary>
Constructor
</summary>
            <param name="sdkType">Type of SDK</param>
            <param name="applicationId">The application id identifier</param>
            <param name="adUnitId">The ad unit identifier</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement.#ctor(Microsoft.Advertising.Shared.WinRT.SdkType)">
            <summary>
Constructor
</summary>
            <param name="sdkType">Type of SDK</param>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.NativeAdPlacement">
            <summary>
This object is the intermediate adPlacement is populated after parsing from the NativeAdPayload
used by UI object to expose to the user.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ProjectedContext.GetLogger">
            <summary>
Retrieves the logger 
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.ProjectedContext.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdTagCollection.GetAdTags">
            <summary>
Retrieve the ad tags
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdTagCollection.GetAdTagsJson">
            <summary>
Retrieve the ad tags as json
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdTagCollection.ClearAdTags">
            <summary>
Remove all tags
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdTagCollection.RemoveAdTag(System.String)">
            <summary>
Remove a tag from the collection
<param name="tagName">Tag name to remove</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdTagCollection.AddAdTag(System.String,System.String)">
            <summary>
Add a tag to the collection
<param name="adId">Ad Unit Id</param><param name="tagName">Tag name to add</param><param name="tagVale">Tag value to add</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.AdTagCollection.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdErrorEventArgs.ErrorCodeEnum">
            <summary>
      An <c>ErrorCode</c> indicating the type of error that occurred.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdErrorEventArgs.ErrorCode">
            <summary>
      An ErrorCode string indicating the type of error that occurred.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.AdErrorEventArgs.ErrorMessage">
            <summary>
      The <c>Exception</c> that triggered the error event.
    </summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.WinRT.AdErrorEventArgs">
            <summary>
      The <c>AdErrorEventArgs</c> class contains information about errors that occur when ads are retrieved from the ad server.
    </summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.Advertisement.IsPoly">
            <summary>
Is this a poly ad
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.Advertisement.PayloadContent">
            <summary>
Content of the payload
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.Advertisement.Guid">
            <summary>
Guid
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.WinRT.Advertisement.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="P:Microsoft.Advertising.Shared.WinRT.Advertisement.MinimumRefreshInterval">
            <summary>
Minimum refresh interval for the current ad.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Shared.ExceptionMessages.s_resourceMapLock">
            <summary>
Lock for initialisation of static ResourceMap defined inline in GetResource()
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AdPlacementNative.CheckStateAndThrowBeforeIssuingRequest">
            <summary>
checks the placements state (outstanding network requests etc) and throws an exception
if it's not in the correct state to request an ad
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AdPlacementNative.SendAdRequestAsync(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Concurrency.cancellation_token_source)">
            <summary>
initiates the network request for an ad
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AdPlacementNative.RequestAdAsync(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Concurrency.cancellation_token_source)">
            <summary>
starts the chain of async operations to request an ad, this includes checking capabilities
and beginning the the network IO
</summary>
Returns the current valid ad and if needed, starts the web request for fetching the next ad.
</member>
        <member name="M:Microsoft.Advertising.Shared.AdPlacementNative.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Microsoft.Advertising.Shared.RequestAdType,Microsoft.Advertising.Shared.WinRT.SdkType,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.">
            <summary>
Private constructor - the public interface exposes a static create method.
</summary>
Private constructor - the public interface exposes a static create method.
</member>
        <member name="T:Microsoft.Advertising.Shared.AdPlacementNative">
            <summary>
This class represents the AdPlacement which makes the RequestAdAsync (implemented from AbstractAdPlacement)
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetDeviceId">
Client / Device ID, must be in GUID format.
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.Init(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;,Concurrency.cancellation_token_source)">
Initializes members used for making ad requests.
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetIsDownloading">
gets if the ad placement is in the downloading state
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetAdTypes">
Ad types supported by this placement
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetContext">
Context
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetPostalCode">
Postal code
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetCountryOrRegion">
Country or Region
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetKeywords">
Keywords
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetServiceURL">
Ad Server Url Override
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetAdUnitId">
Placement Id
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.GetApplicationId">
Application Id
</member>
        <member name="M:Microsoft.Advertising.Shared.AbstractAdPlacement.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplici">
Constructor

Private constructor - the public interface exposes a static create method.
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_instanceLockObj">
Lock for synchronizing access to instance data.
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_location">
GeoCordinate Location
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_isDownloadingAd">
Flag to check if an ad is being downloaded or not.
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_adTypes">
Ad types the placement supports.
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_serviceURL">
Ad Server Service URL
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_adTags">
Ad tags to send with ad request
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_postalCode">
Postal Code for targeting
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_countryOrRegion">
Country or Region for targeting
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_keywords">
Keywords for targeting
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_appId">
Pub center ID
</member>
        <member name="F:Microsoft.Advertising.Shared.AbstractAdPlacement.m_adUnitId">
Placement ID.
</member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAdsManager.FireErrorOccurredEvent(Microsoft.Advertising.WinRT.UI.AdErrorEventArgs)">
            <summary>
Helper method for raising the ErrorOccurred event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAdsManager.AdRequestCompletedHandler(Microsoft.Advertising.WinRT.UI.NativeAdsManager,Windows.Foundation.IAsyncOperation`1{Microsoft.Advertising.WinRT.UI.NativeAd^},Windows.Foundation.AsyncStatus)">
            <summary>
This handles the completed ad request and displays the new ad.
</summary>
            <param name="asyncInfo" />
            <param name="asyncStatus" />
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.NativeAdsManager.managerAdUnitId">
            <summary>
AdUnit Id of the NativeAdsManager
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.NativeAdsManager.managerApplicationId">
            <summary>
Application Id of the NativeAdsManager
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAdsManager.OnErrorOccurred(System.Object,Microsoft.Advertising.WinRT.UI.AdErrorEventArgs)">
            <summary>
Event handler for child m_ad ErrorOccurred event. Calls Close() and passes through event to own ErrorOccurred event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAdsManager.OnAdReady(System.Object,System.Object)">
            <summary>
Event handler for child m_ad AdReady event. Passes through event to own AdReady event.
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.NativeAdsManager.ErrorOccurred">
            <summary>
Event handler for Error occurred
</summary>
        </member>
        <member name="E:Microsoft.Advertising.WinRT.UI.NativeAdsManager.AdReady">
            <summary>
Event handler for child m_ad AdReady event. Passes through event to own AdReady event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAdsManager.RequestAd">
            <summary>
Starts the next ad request
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAdsManager.#ctor(System.String,System.String)">
            <summary>
Constructor
</summary>
            <param name="applicationId">Application Id</param>
            <param name="adUnitId">Ad Unit Id</param>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.NativeAdsManager">
            <summary>
NativeAdsManager object to make requests to NativeAd and get NativeAd response or error.
This object is tied to the ad unit Id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAd.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAd.RegisterAdContainer(Windows.UI.Xaml.FrameworkElement,Windows.Foundation.Collections.IVector`1{Windows.UI.Xaml.FrameworkElement^})">
            <summary>
Registers the ad container and clickable elements for click/view events.
</summary>
            <param name="adContainer">The content to be added to the canvas.</param>
            <param name="clickableElements">List of elements to be clickable.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAd.RegisterAdContainer(Windows.UI.Xaml.FrameworkElement)">
            <summary>
Registers the ad container for click/view events.
</summary>
            <param name="adContainer">The content to be added to the canvas.</param>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.NativeAd.AdditionalAssets">
            <summary>
Additional Assets for the ad like Desc2, DisplayUrl, Phone, Address, Likes, Downloads if present
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.NativeAd.Rating">
            <summary>
Rating
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.NativeAd.Price">
            <summary>
Price
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.NativeAd.SponsoredBy">
            <summary>
SponsoredBy
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.NativeAd.CallToAction">
            <summary>
CallToAction Text
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.NativeAd.IconImage">
            <summary>
IconImage Url
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.NativeAd.MainImages">
            <summary>
List of MainImagesUrl
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.NativeAd.Description">
            <summary>
Description
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.NativeAd.Title">
            <summary>
Title
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.NativeAd.AdIcon">
            <summary>
Ad icon to be added in the Native Ad
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAd.OnWindowActivated(std.weak_ptr&lt;Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState&gt;,Windows.UI.Core.CoreWindow,Windows.UI.Core.WindowActivatedEventArgs)">
            <summary>
Event handler for app being activated or deactivated (gaining or losing focus). This handler is used for viewability data.
</summary>
            <param name="weakState">A weak pointer to the ViewabilityState object to be updated.</param>
            <param name="sender">The CoreWindow sending the event.</param>
            <param name="e">Details about the event.</param>
Viewability works the appfocus to work only on windows activation events
</member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAd.UnsubscribeFromWindowActivatedEvent">
            <summary>
Unsubscribes from the window activated event.
</summary>
Unsubscribe window activated events
</member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAd.SubscribeToWindowActivatedEvent">
            <summary>
Subscribes to the window activated event. This event is used to determine when the app hosting an
interstitial ad gains or loses focus.
</summary>
Subscribe windows activation events for appfocus
</member>
        <member name="F:Microsoft.Advertising.WinRT.UI.NativeAd.windowActivatedToken">
            <summary>
Token for unsubscribing from window activated event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAd.ImpressionTracking(Windows.UI.Xaml.FrameworkElement)">
            <summary>
Updates the viewability data and sends the data into the WebView if changed.
</summary>
Impression tracking method based on adIcon given to user, adfocus, percentOnScreen and opacitiy
</member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAd.StopViewableDataChangedMonitoring">
            <summary>
Stop monitoring of the viewability properties.
</summary>
Stop Timer for monitoring for impressions
</member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAd.StartViewableDataChangedMonitoring(Windows.UI.Xaml.FrameworkElement)">
            <summary>
Start monitoring of the viewability properties.
</summary>
Timer to start monitoring for impressions
</member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAd.CreateAdIcon(System.Object)">
            <summary>
Event Handler for creating AdIcon on UI thread
</summary>
AdIcon to be added in NativeAd for user
</member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAd.ContainerTappedEventHandler(System.Object,Windows.UI.Xaml.Input.TappedRoutedEventArgs)">
            <summary>
Event handler for the close button being tapped.
</summary>
Triggers the click events
</member>
        <member name="F:Microsoft.Advertising.WinRT.UI.NativeAd.adContainerTappedToken">
            <summary>
Token used for subscribing for ad container tapped event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAd.GetContext">
            <summary>
Set the context used for web requests and error reporting. This is used 
for testing. 
</summary>
            <param name="context">Context for this object to use.</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAd.SetContext(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context&gt;)">
            <summary>
Set the context used for web requests and error reporting. This is used 
for testing. 
</summary>
            <param name="context">Context for this object to use.</param>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.NativeAd.viewableDataChangeTimer">
            <summary>
Timer used for periodically checking if the viewability metrics have changed.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.NativeAd.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.NativeAd">
            <summary>
This object holds all the native ad properties which are exposed for the user to consumption
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewablePropertyCollection.ClearViewableProperties">
            <summary>
Removes all viewable properties from the internal collection.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewablePropertyCollection.AddViewableProperty(std.shared_ptr&lt;Microsoft.Advertising.WinRT.UI.Viewable.IViewableProperty&gt;)">
            <summary>
Adds a viewable property to the internal collection. The methods in this class will act on this collection.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewablePropertyCollection.ToJson">
            <summary>
Calls ToJson() on all contained viewable properties. This builds up a full Json payload of the contained viewable properties.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewablePropertyCollection.Invalidate">
            <summary>
The opposite of ResetChangedFlag. This sets all viewable properties' "m_hasChanged" flag to true, so they can update their
internal state as well as publish their values to the ViewabilityState they hold.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewablePropertyCollection.ResetChangedFlag">
            <summary>
Calls ResetChangedFlag() on all contained viewable properties. If you're polling this collection
and only want to act when the data has changed, you should reset after you've acted on the change.
(e.g. call Update(), then DidChange() - if DidChange() == true, call ToJson(), then ResetChangeFlag())
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewablePropertyCollection.DidChange">
            <summary>
Calls DidChange() on all contained viewable properties. Upon the first occurence of 
a change, it returns true and exits.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewablePropertyCollection.Update">
            <summary>
Calls Update() on all contained viewable properties.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.TaskHelper.FinishTask{System.Void}(Concurrency.task{System.Void},std.function&lt;(Microsoft.Advertising.WException)(Microsoft.Advertising.WException)&gt;,std.function&lt;(void)&gt;)">
            <summary>
This is a void specialization of the FinishTask method
</summary>
            <param name="previousTask">The task to finish</param>
            <param name="exceptionHandler">A callback to execute if an exception was thrown on the task chain</param>
            <param name="cancelHandler">A callback to execute if the task chain was canceled</param>
            <returns>The return value of the task</returns>
http://msdn.microsoft.com/en-us/library/Windows/Apps/hh699896.aspx
In Win8, the message only exists in the debugger; only the HRESULT is preserved.
In Win8.1, the message is also preserved.
</member>
        <member name="M:Microsoft.Advertising.Concurrency.TaskHelper.ChainTokenSourceToToken(Concurrency.cancellation_token)">
            <summary>
This creates a new cancellation token source that triggers cancel when a 
given cancel token cancels. This is useful for create_async, which only gives a token.
</summary>
            <param name="token">The token to chain to</param>
            <returns>A new cancellation token source</returns>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.TaskHelper.CancellableDelay(System.Int32,Concurrency.cancellation_token)">
            <summary>
Helper function that attempts to wait for a given amount of time. The delay will properly abort early if canceled.
</summary>
            <param name="milliseconds">Time to wait in milliseconds</param>
            <param name="cancellationToken">Token used for checking if the task has been cancelled.</param>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.TaskHelper.CheckAndHandleCancel(Concurrency.cancellation_token,std.function&lt;(void)&gt;)">
            <summary>
Checks to see if the currently executing task has been canceled and handles it.
</summary>
            <param name="cancellationToken">Token used for checking if the task has been cancelled.</param>
            <param name="cancelHandler">A callback to be executed when a task is canceled manually (not through timeout). Optional.</param>
        </member>
        <member name="F:Microsoft.Advertising.Concurrency.TaskHelper.k_waitTime">
            <summary>
This constant defines the number of milliseconds to wait
before checking for cancels in methods that require polling spin-waits
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Concurrency.TaskHelper">
            <summary>
This class provides convenience functions for using the ppltasks library
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.SignalEvent.Wait(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Waits for the event to be signalled.
</summary>
            <param name="dwMilliseconds">The length of time (in milliseconds) to wait.</param>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.SignalEvent.Wait">
            <summary>
Waits for the event to be signalled.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.SignalEvent.Signal">
            <summary>
Signals the event.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.SignalEvent.Dispose">
            <summary>
Destructor. Closes the event handle.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.SignalEvent.#ctor">
            <summary>
Constructor. Creates an event.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Concurrency.SignalEvent">
            <summary>
Concrete implementation of the SignalEvent
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.ISignalEvent.Wait">
            <summary>
Waits until the event is in the signalled state
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.ISignalEvent.Signal">
            <summary>
Sets the event to the signalled state
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Concurrency.ISignalEvent">
            <summary>
This interface represents a waitable event
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.PPLTaskHelper.complete_after(System.UInt32)">
            <summary>
Creates a task that completes after the specified delay.
Taken from https://msdn.microsoft.com/en-us/library/hh873170.aspx
</summary>
            <param name="timeout">The timeout, in milliseconds</param>
        </member>
        <member name="T:Microsoft.Advertising.Concurrency.PPLTaskHelper">
            <summary>
This class contains some static methods to help with some common
PPL task helper operations
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.NativeImage">
            <summary>
Image format for native Ads
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Payloads.NativeAdPayload.GetPayload">
            <summary>
Gets the ad payload
</summary>
            <returns>The payload</returns>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Payloads.NativeAdPayload.GetPayloadType">
            <summary>
From IAdPayload - returns the type of this payload
</summary>
            <returns>The PayloadTypeName</returns>
        </member>
        <member name="M:Microsoft.Advertising.Ads.Payloads.NativeAdPayload.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructor
</summary>
            <param name="payload">The ad payload</param>
        </member>
        <member name="T:Microsoft.Advertising.Ads.Payloads.NativeAdPayload">
            <summary>
This class holds a Native Ad payload for the AdPlacement based code path
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.Decorators.ASIDDecorator.DecorateLog(std.shared_ptr&lt;Microsoft.Advertising.Utils.IAdLogger&gt;)">
            <summary>
sets the asid on the Tracelogger 
<param name="logger">the TraceLog logger to be decorated with asid</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.Decorators.ASIDDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced">
            <summary>
appends the asid request parameter along with the asid guid to the request url
<param name="url">the request url to be decorated with asid</param><param name="headers">the header to be decorated if need be</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.ILogDecorator.DecorateLog(std.shared_ptr&lt;Microsoft.Advertising.Utils.IAdLogger&gt;)">
            <summary>
Modifies a given tracelog logger
<param name="logger">The logger used to decorate the tracelog params</param></summary>
        </member>
        <member name="T:Microsoft.Advertising.ILogDecorator">
            <summary>
This interface describes methods that modify the log request
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.ArcRequest.Log(std.shared_ptr&lt;Microsoft.Advertising.Utils.IAdLogger&gt;)">
            <summary>
decorates tracelogger with the individual decorators parameters and their values
<param name="logger">the TraceLog logger to be decorated</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.ArcRequest.Execute(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
decorates the request url with the individual decorator parameters and their values
<param name="headers">the headers to be decorated</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.ArcRequest.AddDecorator(std.shared_ptr&lt;Microsoft.Advertising.Net.IWebClientDecorator&gt;)">
            <summary>
adds the decorators to the Arc Request Decorator collection
<param name="decorator">the decorators to be added to build the request</param></summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AdMasterDeviceVolume.ToJson">
            <summary>
Returns a JSON string ("key":value)
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AdMasterDeviceVolume.Update">
            <summary>
Checks to see if the Master volume is Zero/Muted. If so, flags itself as changed.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AdMasterDeviceVolume.#ctor(Windows.UI.Xaml.Controls.WebView,std.shared_ptr&lt;Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState&gt;,System.Boolean)">
            <summary>
Constructor
</summary>
            <param name="uiElement">The webview element to check occlusion on in the currentWindow</param>
            <param name="viewabilityState">If not null, the viewable property will publish its value to the viewabilityState</param>
        </member>
        <member name="F:Microsoft.Advertising.Utils.Resources.ResourceCache.m_cacheLock">
            <summary>
lock to control access to the cache
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Resources.ResourceCache.ReadResourceAsFile(Windows.ApplicationModel.Resources.Core.ResourceCandidate)">
            <summary>
This method reads a given resource as a file.
It's used as a callback to other methods
</summary>
            <param name="resource">The resource to load</param>
            <returns>The contents of resource as a file</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Resources.ResourceCache.ReadResourceAsString(Windows.ApplicationModel.Resources.Core.ResourceCandidate)">
            <summary>
This method reads a given resource as a string.
It's used as a callback to other methods
</summary>
            <param name="resource">The resource to load</param>
            <returns>The resource as a string</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Resources.ResourceCache.LoadFromResourceMap(Windows.ApplicationModel.Resources.Core.ResourceMap,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;(Windows.ApplicationModel.Resources.Core.ResourceCandidate)(Windows.ApplicationModel.Resources.Core.ResourceCandidate^)&gt;)">
            <summary>
This method loads a resource from a given resource map using the given callback
</summary>
            <param name="resourceMap">The resource map to load from</param>
            <param name="resourcePath">The resource to load</param>
            <param name="getResourceFunction">The callback to load the resource with</param>
            <returns>The loaded resource if found; empty string if not</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Resources.ResourceCache.FindSubResourceMapContainingResource(Windows.ApplicationModel.Resources.Core.ResourceMap,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This method tries to find the resource map containing the given resource in a subtree of a given resourcemap
</summary>
            <param name="resourceMap">The resource map to search</param>
            <param name="resourcePath">The resource to look up</param>
            <returns>A resource map containing the resource or nullptr if none exists</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Resources.ResourceCache.FindResourceMap(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This method tries to find the resource map containing the given resource
</summary>
            <param name="resourcePath">The resource to look up</param>
            <returns>A resource map containing the resource or nullptr if none exists</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Resources.ResourceCache.LoadResource(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;(Windows.ApplicationModel.Resources.Core.ResourceCandidate)(Windows.ApplicationModel.Resources.Core.ResourceCandidate^)&gt;)">
            <summary>
This method loads a resource using the given callback
</summary>
            <param name="resourcePath">The resource to load</param>
            <param name="getResourceFunction">The callback to load the resource with</param>
            <returns>The loaded resource if found; empty string if not</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Resources.ResourceCache.ReadFromCache(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runt">
            <summary>
This method looks for a given resource in the given cache
</summary>
            <param name="cache">The cache to search</param>
            <param name="resourceName">The resource to search for</param>
            <param name="retval">An output param - set to the loaded resource if it was found</param>
            <returns>True if the resource was found</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Resources.ResourceCache.GetResource(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runti">
            <summary>
This method returns a resource from the given cache if it exists;
If it does not, it finds the resource and attempts to load it using
the given callback.
This allows string resources and file resources to share the bulk of the loading code.
</summary>
            <param name="resourceName">The resource to get</param>
            <param name="cache">The resource cache to load/store from</param>
            <param name="getResourceFunction">The callback to load the resource with</param>
            <returns>The loaded resource if found; empty string if not</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Resources.ResourceCache.GetResourceAsString(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets a resource as a string
</summary>
            <param name="resourceName">The resource to get</param>
            <returns>The resource as a string if found; empty string if not</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Resources.ResourceCache.GetResourceAsFile(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets a resource as a file
</summary>
            <param name="resourceName">The resource to get</param>
            <returns>The resource contents as a string if found; empty string if not</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Resources.ResourceCache.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Utils.Resources.ResourceCache">
            <summary>
loads resources from disk and caches them
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Resources.IResourceLoader.GetResourceAsString(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Loads a resource as a string
</summary>
            <param name="resourceName">The name of the resource</param>
            <returns>The resource if found or empty string if not</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Resources.IResourceLoader.GetResourceAsFile(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Loads a resource as a file and returns the contents as a string
</summary>
            <param name="resourceName">The name of the resource</param>
            <returns>The resource contents if found or empty string if not</returns>
        </member>
        <member name="T:Microsoft.Advertising.Utils.Resources.IResourceLoader">
            <summary>
Interface representing a resource loader
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.StartResponseTimer(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Starts the response timer. Used to determine latency for the LogAdCallSuccess message.
</summary>
            <param name="url">The request url</param>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.StartInteractionTimer">
            <summary>
Starts the interaction timer. This is used by LogAdInteraction fill in the duration field.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.LogError(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Char!System.Runtime.CompilerServices.IsConst*,std.shared_ptr&lt;Microsoft.Advertising.Net.IWebClient&gt;)">
            <summary>
Logs an error to Trace
</summary>
            <param name="code">The error code</param>
            <param name="message">The error message</param>
            <param name="webClient">Web client for sending g server tracking events</param>
            <returns>true if no error</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.LogAdInteraction(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Logs an Ad Interaction event to Trace
</summary>
            <param name="endReason">Enumerates the reason for interaction end, e.g. deeplinked out to
advertising web site, collapsed back to tile, switched/terminated app, snapped.</param>
            <returns>true if no error</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.LogAdCallSuccess(System.Char!System.Runtime.CompilerServices.IsConst*,std.shared_ptr&lt;Microsoft.Advertising.Net.IWebClient&gt;)">
            <summary>
Logs an Ad Call to Trace
</summary>
            <param name="method">The api method invoked</param>
            <param name="webClient">Web client for sending g server tracking events</param>
            <returns>true if no error</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.LogAdApiUsage(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,std.shared_ptr&lt;Microsoft.Advertising.Net.IWebClient&gt;)">
            <summary>
Logs an Ad api call to Trace
</summary>
            <param name="className">The class containing the invoked function</param>
            <param name="functionName">The api function invoked</param>
            <param name="details">Optional details about the invoked function</param>
            <param name="webClient">Web client for sending g server tracking events</param>
            <returns>True if no error</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.ExtractIDsFromImpressionUrl(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Extracts the order id and creative id from a polymorphic ad's impression url.
</summary>
            <param name="url">The impression url</param>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.SetArcDebugInfo(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the arc debug information sent from ARC to the SDK in the response header
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.SetSdkType(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the sdkType
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.SetASID(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the ASID
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.SetAdActionId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the ad action id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.SetOrderId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the order id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.SetCreativeId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the Creative Id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.SetAdServed(Microsoft.Advertising.Utils.TraceAdServed)">
            <summary>
Sets the Ad Served state
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.SetAdUnitId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the Ad Unit Id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.SetPublisherId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the Publisher Id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.SetSourceUrl(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the source url
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.GetArcDebugInfo">
            <summary>
Gets the arc debug information sent from ARC to the SDK in the response header
</summary>
            <returns>The arc debug information</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.GetSdkType">
            <summary>
Gets the sdkType
</summary>
            <returns>The sdkType</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.GetASID">
            <summary>
Gets the ASID
</summary>
            <returns>The ASID</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.GetOrderId">
            <summary>
Gets the Order Id
</summary>
            <returns>The order id</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.GetAdActionId">
            <summary>
Gets the Action Id
</summary>
            <returns>The action id</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.GetCreativeId">
            <summary>
Gets the Creative Id
</summary>
            <returns>The creative id</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.GetAdServed">
            <summary>
Gets whether the ad has been served
</summary>
            <returns>The ad served state</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.GetAdUnitId">
            <summary>
Gets the Ad Unit Id
</summary>
            <returns>The ad unit id</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.GetPublisherId">
            <summary>
Gets the Publisher Id
</summary>
            <returns>The publisher id</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.GetSourceUrl">
            <summary>
Gets the source/service url
</summary>
            <returns>The source url</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructor for ads requested by applicationId/adUnitId
</summary>
            <param name="publisherId">The provisioned PubCenter identifier for the app.</param>
            <param name="adUnitId">The ad placement code.</param>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructor for ads requested by url
</summary>
            <param name="sourceUrl">The url to the requested ad experience</param>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallTraceLogger.#ctor">
            <summary>
Default constructor
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.StartResponseTimer(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Starts the response timer. Used to determine latency for the LogAdCallSuccess message.
</summary>
            <param name="url">The request url</param>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.StartInteractionTimer">
            <summary>
Starts the interaction timer. This is used by LogAdInteraction fill in the duration field.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.LogError(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Char!System.Runtime.CompilerServices.IsConst*,std.shared_ptr&lt;Microsoft.Advertising.Net.IWebClient&gt;)">
            <summary>
Logs an error to Trace
</summary>
            <param name="code">The error code</param>
            <param name="message">The error message</param>
            <param name="webClient">Web client for sending g server tracking events</param>
            <returns>true if no error</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.LogAdInteraction(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Logs an Ad Interaction event to Trace
</summary>
            <param name="endReason">Enumerates the reason for interaction end, e.g. deeplinked out to
advertising web site, collapsed back to tile, switched/terminated app, snapped.</param>
            <returns>true if no error</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.LogAdCallSuccess(System.Char!System.Runtime.CompilerServices.IsConst*,std.shared_ptr&lt;Microsoft.Advertising.Net.IWebClient&gt;)">
            <summary>
Logs an Ad Call to Trace
</summary>
            <param name="method">The api method invoked</param>
            <param name="webClient">Web client for sending g server tracking events</param>
            <returns>true if no error</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.LogAdApiUsage(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,std.shared_ptr&lt;Microsoft.Advertising.Net.IWebClient&gt;)">
            <summary>
Logs an Ad api call to Trace
</summary>
            <param name="className">The class containing the invoked function</param>
            <param name="functionName">The api function invoked</param>
            <param name="details">Optional details about the invoked function</param>
            <param name="details">Web client to send g server tracking events</param>
            <returns>True if no error</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.ExtractIDsFromImpressionUrl(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Extracts the order id and creative id from a polymorphic ad's impression url.
</summary>
            <param name="url">The impression url</param>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.SetArcDebugInfo(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the arc debug information sent from ARC to the SDK in the response header
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.SetSdkType(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the sdkType
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.SetASID(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the ASID
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.SetAdActionId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the ad action id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.SetOrderId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the order id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.SetCreativeId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the Creative Id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.SetAdServed(Microsoft.Advertising.Utils.TraceAdServed)">
            <summary>
Sets the Ad Served state
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.SetAdUnitId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the Ad Unit Id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.SetPublisherId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the Publisher Id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.SetSourceUrl(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the source url
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.GetArcDebugInfo">
            <summary>
Gets the arc debug information sent from ARC to the SDK in the response header
</summary>
            <returns>The arc debug information</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.GetSdkType">
            <summary>
Gets the sdkType
</summary>
            <returns>The sdkType</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.GetASID">
            <summary>
Gets the ASID
</summary>
            <returns>The ASID</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.GetOrderId">
            <summary>
Gets the Order Id
</summary>
            <returns>The order id</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.GetAdActionId">
            <summary>
Gets the Action Id
</summary>
            <returns>The action id</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.GetCreativeId">
            <summary>
Gets the Creative Id
</summary>
            <returns>The creative id</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.GetAdServed">
            <summary>
Gets whether the ad has been served
</summary>
            <returns>The ad served state</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.GetAdUnitId">
            <summary>
Gets the Ad Unit Id
</summary>
            <returns>The ad unit id</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.GetPublisherId">
            <summary>
Gets the Publisher Id
</summary>
            <returns>The publisher id</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.GetSourceUrl">
            <summary>
Gets the source/service url
</summary>
            <returns>The source url</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructor for ads requested by applicationId/adUnitId
</summary>
            <param name="publisherId">The provisioned PubCenter identifier for the app.</param>
            <param name="adUnitId">The ad placement code.</param>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructor for ads requested by url
</summary>
            <param name="sourceUrl">The url to the requested ad experience</param>
        </member>
        <member name="M:Microsoft.Advertising.Utils.AdCallDebugLogger.#ctor">
            <summary>
Default constructor
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.StartResponseTimer(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Starts the response timer. Used to determine latency for the LogAdCallSuccess message.
</summary>
            <param name="url">The request url.</param>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.StartInteractionTimer">
            <summary>
Starts the interaction timer. This is used by LogAdInteraction fill in the duration field.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.LogAdInteraction(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Logs an Ad Interaction event to Trace
</summary>
            <param name="endReason">Enumerates the reason for interaction end, e.g. deeplinked out to
advertising web site, collapsed back to tile, switched/terminated app, snapped.</param>
            <returns>true if no error</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.ExtractIDsFromImpressionUrl(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Extracts the order id and creative id from a polymorphic ad's impression url.
</summary>
            <param name="url">The impression url</param>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.SetArcDebugInfo(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the arc debug information sent from ARC to the SDK in the response header
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.SetSdkType(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the sdkType
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.SetASID(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the ASID
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.SetAdActionId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the ad action id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.SetOrderId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the order id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.SetCreativeId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the Creative Id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.SetAdServed(Microsoft.Advertising.Utils.TraceAdServed)">
            <summary>
Sets the Ad Served state
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.SetAdUnitId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the Ad Unit Id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.SetPublisherId(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the Publisher Id
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.SetSourceUrl(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Sets the source url
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.GetArcDebugInfo">
            <summary>
Gets the arc debug information sent from ARC to the SDK in the response header
</summary>
            <returns>The arc debug information</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.GetSdkType">
            <summary>
Gets the sdkType
</summary>
            <returns>The sdkType</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.GetASID">
            <summary>
Gets the ASID
</summary>
            <returns>The ASID</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.GetOrderId">
            <summary>
Gets the Order Id
</summary>
            <returns>The order id</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.GetAdActionId">
            <summary>
Gets the Action Id
</summary>
            <returns>The action id</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.GetCreativeId">
            <summary>
Gets the Creative Id
</summary>
            <returns>The creative id</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.GetAdServed">
            <summary>
Gets whether the ad has been served
</summary>
            <returns>The ad served state</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.GetAdUnitId">
            <summary>
Gets the Ad Unit Id
</summary>
            <returns>The ad unit id</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.GetPublisherId">
            <summary>
Gets the Publisher Id
</summary>
            <returns>The publisher id</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.GetSourceUrl">
            <summary>
Gets the source/service url
</summary>
            <returns>The source url</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.LogError(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Char!System.Runtime.CompilerServices.IsConst*,std.shared_ptr&lt;Microsoft.Advertising.Net.IWebClient&gt;)">
            <summary>
Logs an error to Trace
</summary>
            <param name="code">The error code</param>
            <param name="message">The error message</param>
            <param name="webClient">Web client for sending g server tracking events</param>
            <returns>true if no error</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.LogAdCallSuccess(System.Char!System.Runtime.CompilerServices.IsConst*,std.shared_ptr&lt;Microsoft.Advertising.Net.IWebClient&gt;)">
            <summary>
Logs an Ad Call to Trace
</summary>
            <param name="method">The api method invoked</param>
            <param name="webClient">Web client for sending g server tracking events</param>
            <returns>true if no error</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.IAdLogger.LogAdApiUsage(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,std.shared_ptr&lt;Microsoft.Advertising.Net.IWebClient&gt;)">
            <summary>
Logs an Ad Call to Trace
</summary>
            <param name="className">The class the method was invoked from</param>
            <param name="functionName">The api function invoked</param>
            <param name="details">Optional details about the api method</param>
            <param name="webClient">Web client for sending g server tracking events</param>
            <returns>true if no error</returns>
        </member>
        <member name="T:Microsoft.Advertising.Utils.IAdLogger">
            <summary>
This interface describes methods for trace logging for Telemetry or debugging
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.PostAsync(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_str">
            <summary>
Makes an asynchronous HTTP POST request
</summary>
            <param name="url">The url to Post</param>
            <param name="body">A body to send to in this request.</param>
            <param name="bodyLength">The length of the body</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to an ICancel token that lets you cancel the request</returns>
            <summary>
Makes an asynchronous HTTP POST request
</summary>
            <param name="url">The url to Post</param>
            <param name="body">A body to send to in this request.</param>
            <param name="bodyLength">The length of the body</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="decorators">A list of decorators to apply to the request</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to an ICancel token that lets you cancel the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.PostAsync(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,std.function&lt;(std.shared_ptr&lt;Microsoft.Advertising.Net.WebResponse&gt;)(std.shared_ptr&lt;Microsoft.Advertising.Net.WebResponse&gt;)&gt;)">
            <summary>
Makes an asynchronous HTTP POST request
</summary>
            <param name="url">The url to Post</param>
            <param name="body">A body to send to in this request.</param>
            <param name="bodyLength">The length of the body</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to an ICancel token that lets you cancel the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.Post(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;S">
            <summary>
Makes a synchronous HTTP POST request
</summary>
            <param name="url">The url to Post</param>
            <param name="body">A body to send to in this request.</param>
            <param name="bodyLength">The length of the body</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="ctg">The cancel token group used to cancel this request; optional</param>
            <returns>A shared pointer to a webresponse with the results of the request</returns>
            <summary>
Makes a synchronous HTTP POST request
</summary>
            <param name="url">The url to Post</param>
            <param name="body">A body to send to in this request.</param>
            <param name="bodyLength">The length of the body</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="decorators">A list of decorators to apply to the request</param>
            <param name="ctg">The cancel token group used to cancel this request; optional</param>
            <returns>A shared pointer to a webresponse with the results of the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.Post(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,std.shared_ptr&lt;Microsoft.Advertising.Concurrency.CancelTokenGroup&gt;)">
            <summary>
Makes a synchronous HTTP POST request
</summary>
            <param name="url">The url to Post</param>
            <param name="body">A body to send to in this request.</param>
            <param name="bodyLength">The length of the body</param>
            <param name="ctg">The cancel token group used to cancel this request; optional</param>
            <returns>A shared pointer to a webresponse with the results of the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.GetAsync(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.">
            <summary>
Makes an asynchronous HTTP GET request
</summary>
            <param name="url">The url to get</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to an ICancel token that lets you cancel the request</returns>
            <summary>
Makes an asynchronous HTTP GET request
</summary>
            <param name="url">The url to get</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="decorators">A list of decorators to apply to the request</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to an ICancel token that lets you cancel the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.GetAsync(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;(std.shared_ptr&lt;Microsoft.Advertising.Net.WebResponse&gt;)(std.shared_ptr&lt;Microsoft.Advertising.Net.WebResponse&gt;)&gt;)">
            <summary>
Makes an asynchronous HTTP GET request
</summary>
            <param name="url">The url to get</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to an ICancel token that lets you cancel the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.Get(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsCon">
            <summary>
Makes a synchronous HTTP GET request
</summary>
            <param name="url">The url to get</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="ctg">The cancel token group used to cancel this request; optional</param>
            <returns>A shared pointer to a webresponse with the results of the request</returns>
            <summary>
Makes a synchronous HTTP GET request
</summary>
            <param name="url">The url to get</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="decorators">A list of decorators to apply to the request</param>
            <param name="ctg">The cancel token group used to cancel this request; optional</param>
            <returns>A shared pointer to a webresponse with the results of the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.Get(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Concurrency.CancelTokenGroup&gt;)">
            <summary>
Makes a synchronous HTTP GET request
</summary>
            <param name="url">The url to get</param>
            <param name="ctg">The cancel token group used to cancel this request; optional</param>
            <returns>A shared pointer to a webresponse with the results of the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.SetTimeout(System.UInt32)">
            <summary>
Set the timeout to use for http operations, in milliseconds
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.WebClient.#ctor(std.shared_ptr&lt;Microsoft.Advertising.Net.IWebClient&gt;)">
            <summary>
Constructor. Allows user to pass in their own IWebClient.
</summary>
            <param name="impl">The IWebClientImpl to use to make http requests</param>
        </member>
        <member name="T:Microsoft.Advertising.Net.WebClient">
            <summary>
This class makes http calls
</summary>
        </member>
        <member name="M:Microsoft.Advertising.TraceLogging.Error(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,Microsoft.Advertising.Utils.TraceAdServed!System.Runtime.CompilerServices.IsConst,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
This is the implementation for sending an Trace message indicating an error has occurred
</summary>
            <param name="publisherId">The provisioned PubCenter identifier for the app.</param>
            <param name="adUnitId">The ad placement code.</param>
            <param name="asid">A transaction ID, as GUID, generated with each ad request</param>
            <param name="sdkType">the sdk type firing the event</param>
            <param name="sdkVersion">Ad SDK version</param>
            <param name="adServed">Whether this error means the user didn't get an ad.</param>
            <param name="source">Host name if an http call, else internal component name</param>
            <param name="code">The error code</param>
            <param name="message">The error message</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Microsoft.Advertising.TraceLogging.AdInteraction">
            <summary>
This is the implementation for sending an Trace message indicating a user interacted with an ad.
</summary>
            <param name="UserId">XUID with context of the event</param>
            <param name="ActionTypeId">Type of action. Which button pressed, swipe, etc.</param>
            <param name="ActionInputMethodId">Type of input method</param>
            <param name="PageUri">Unique ID of the page action was taken on. I.e. URL/URI indicating the page the action was taken on</param>
            <param name="PageName">Canonical name of the displayed page</param>
            <param name="PageTypeId">Page layout id</param>
            <param name="TemplateId">Id of template used to layout the page.</param>
            <param name="DestPageUri">Unique ID of the page action invokes. I.e. URL/URI indicating the destination page of the action</param>
            <param name="DestPageTypeId">Type ID of page shown</param>
            <param name="CampaignId">Campaign page is part of</param>
            <param name="GroupId">Group/Segment/Treatment ID for this content</param>
            <param name="Content">JSON of asset/content on which action was taken</param>
            <param name="PublisherId">The provisioned PubCenter identifier for the app.</param>
            <param name="AdUnitId">The ad placement code.</param>
            <param name="CreativeId">The identifier for the matched ad creative from CAM</param>
            <param name="OrderId">The order id from AdEx</param>
            <param name="ASID">A transaction ID, as GUID, generated with each ad request</param>
            <param name="Duration">Time between expand/close, measuring the interaction time with full screen ad experience, in milliseconds.</param>
            <param name="EndReason">Enumerates the reason for interaction end, e.g. deeplinked out to advertising web site, collapsed back to tile, switched/terminated app, snapped.</param>
            <param name="PlayerCount">The number of signed in users</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Microsoft.Advertising.TraceLogging.AdCallSuccess(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst)">
            <summary>
This is the implementation for sending a Trace message indicating an ad call was successful.
</summary>
            <param name="PublisherId">The provisioned PubCenter identifier for the app.</param>
            <param name="AdUnitId">The ad placement code.</param>
            <param name="asid">A transaction ID, as GUID, generated with each ad request</param>
            <param name="sdkType">the sdk type firing the event</param>
            <param name="sdkVersion">Ad SDK version</param>
            <param name="Method">The api method invoked</param>
            <param name="RequestUrl">Captures the request's full URL, including query string paramters (null if not applicable)</param>
            <param name="LatencyMs">Latency of response to be returned (in milliseconds)</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Microsoft.Advertising.TraceLogging.AdApiUsage(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
This is the implementation for sending a Trace message to log Mraid/Ormma Telemetry
</summary>
            <param name="PublisherId">The provisioned PubCenter identifier for the app.</param>
            <param name="AdUnitId">The ad placement code.</param>
            <param name="asid">A transaction ID, as GUID, generated with each ad request</param>
            <param name="sdkType">the sdk type firing the event</param>
            <param name="sdkVersion">Ad SDK version</param>
            <param name="className">The class containing the invoked function</param>
            <param name="methodName">The api function invoked</param>
            <param name="additionalDetails">Optional details about the invoked function</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Microsoft.Advertising.TraceLogging.GetInstance">
            <summary>
Gets the singleton instance
</summary>
            <returns>A pointer to the TraceLogging singleton instance</returns>
        </member>
        <member name="M:Microsoft.Advertising.TraceLogging.Dispose">
            <summary>
Private destructor.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.TraceLogging.#ctor">
            <summary>
Private constructor. This is a singleton.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.TraceLogging">
            <summary>
Class that wraps Trace logging. Automatically fills in a few fields
Singleton.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.AdControlModel.ProcessResponse(std.weak_ptr&lt;Microsoft.Advertising.UI.Models.Details.AdControlModelState&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Ads.IAdPayloadHandler&gt;)">
            <summary>
Tries to parse a string into a payload using the given payload handler
</summary>
            <param name="weakState">The ad control model state to that made the request</param>
            <param name="response">The string to parse</param>
            <param name="handler">The payload handler</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.AdControlModel.BuildAdBrokerRequest(std.weak_ptr&lt;Microsoft.Advertising.UI.Models.Details.AdControlModelState&gt;)">
            <summary>
Builds an ad broker request using the properties stored in this ad control model
</summary>
            <param name="weakState">The ad control model state to use</param>
            <returns>The built adrequest or nullptr if it can't build one</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.AdControlModel.BroadcastErrorEvent(std.weak_ptr&lt;Microsoft.Advertising.UI.Models.Details.AdControlModelState&gt;,Microsoft.Advertising.NativeErrorCode,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Helper method to log errors and fire the error event using a given state
</summary>
            <param name="weakState">The ad control model state to use</param>
            <param name="errorCode">The error code</param>
            <param name="errorMessage">The error message</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.AdControlModel.HandleRefreshTimerTick(std.weak_ptr&lt;Microsoft.Advertising.UI.Models.Details.AdControlModelState&gt;)">
            <summary>
This method is executed when the auto-refresh timer ticks.
It tries to request another ad.
</summary>
            <param name="weakState">A pointer to the AdControlModel state that will make the ad request</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.AdControlModel.HandleRequest(std.weak_ptr&lt;Microsoft.Advertising.UI.Models.Details.AdControlModelState&gt;,std.shared_ptr&lt;Microsoft.Advertising.Net.WebResponse&gt;,std.shared_ptr&lt;Microsoft.Advertising.Ads.IAdPayloadHandler&gt;)">
            <summary>
This handles the result of an ad request - it evalutes whether the 
http request's response we as successful and sends it a payloadhandler to parse it into a payload
</summary>
            <param name="weakState">An AdControlModelState instance that started the ad request</param>
            <param name="response">The http response that was received</param>
            <param name="handler">The payload handler that will parse the response into a payload</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.AdControlModel.StartAdRequest(std.weak_ptr&lt;Microsoft.Advertising.UI.Models.Details.AdControlModelState&gt;)">
            <summary>
Starts the next ad request using a given state
</summary>
            <param name="weakState">The ad control model state to use</param>
            <returns>True if the ad request was started</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.AdControlModel.Resume">
            <summary>
Resumse the ad control model
This resumes the auto refresh timer.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.AdControlModel.Suspend">
            <summary>
Suspends the ad control model
This pauses the auto refresh timer.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.AdControlModel.Start">
            <summary>
Starts the ad control model; sets up and starts the auto-refresh timer
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.AdControlModel.Refresh">
            <summary>
Manually refreshes the ad control
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.AdControlModel.RemoveAdTag(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Remove an ad tag from the ad control. This has no effect if the tag name does not exist.
</summary>
            <param name="tagName">The name of the tag to remove.</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.AdControlModel.AddAdTag(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Add an ad tag to the ad control. The maximum is 10 tags per ad control. If maximum is exceeded an errorOccurred event will be fired. 
</summary>
            <param name="tagName">The name of the tag. Maximum of 16 characters, if exceeded an errorOccurred event will be fired.</param>
            <param name="tagValue">The value of the tag. Maximum of 128 characters, if exceeded an errorOccurred event will be fired.</param>
        </member>
        <member name="T:Microsoft.Advertising.UI.Models.AdControlModel">
            <summary>
This interface describes the model for the ad control
</summary>
        </member>
        <member name="T:Microsoft.Advertising.UI.Models.Details.AdControlModelState">
            <summary>
This struct holds the state of an ad control model.
By holding state in an object separate from the class, we can break cyclic references without
using weak refs/pointers.

Typically, cyclic references occur due to callbacks; for example, requesting an ad is an async operation.
When the response is received, the model would be responsible for parsing it, but you'd need a pointer to the
model instance that made the request to begin with. This is usually done through a capture in the callback lambda.
This capture creates a strong reference back to the instance; however the instance also owns the callback. This is how
the cycle can be unintentionally created.

The ownership of this state object looks like


AdControlModel ----------------------------------------------+---&gt; m_state
      |                                                               ^
      |                                                               |
      +--- Timer ---&gt; TickDelegate ---&gt; TickDelegateState ---+---&gt; Weak Ptr
      |                                                      |
      +--- Async AdRequest ---&gt; captures state in handler----+


In previous designs, the tick delegate would bind to a weak reference to ad control model,
 more like
AdControl  (--- Weak reference --------------------------------+
      |                                                        |
      +--- Timer ---&gt; TickDelegate ---&gt; TickDelegateState -----+
      |                                                        |
      +--- Async AdRequest ---&gt; captures control in handler----+

A side benefit is that testing is easier as we can modify the state directly then
call the methods in whatever state we need.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Utils.Timer.TimerState">
            <summary>
This struct holds the state of the timer.
It allows the timer thread and the timer object to share data safely
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Timer.Resume">
            <summary>
Resumes a paused timer
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Timer.Pause">
            <summary>
Pauses the timer.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Timer.SetIntervalInMs(System.Int32)">
            <summary>
Sets this timer's interval between ticks in milliseconds
</summary>
            <param name="value">The number of milliseconds between each tick</param>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Timer.GetIntervalInMs">
            <summary>
Gets this timer's interval between ticks in milliseconds
</summary>
            <returns>The number of milliseconds between each tick</returns>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Timer.Stop">
            <summary>
Stops the timer
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Timer.Start">
            <summary>
Starts the timer
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Timer.Dispose">
            <summary>
Destructor. Stops the timer.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Utils.Timer.#ctor(System.Int32)">
            <summary>
Starts a timer with the given interval
</summary>
            <param name="intervalInMs">The number of milliseconds between each tick</param>
        </member>
        <member name="M:Microsoft.Advertising.Ads.IAdPayloadHandler.HandlePayload(std.shared_ptr&lt;Microsoft.Advertising.Ads.IAdPayload&gt;,Microsoft.Advertising.WException)">
            <summary>
Handles the response from the request
</summary>
            <param name="adPayload">The received ad payload</param>
            <param name="exception">The exception from the request, if there is one</param>
            <returns>True if the given payload was recognized and handled by this handler</returns>
        </member>
        <member name="T:Microsoft.Advertising.Ads.IAdPayloadHandler">
            <summary>
IAdPayloadHandler handles an IAdPayload
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.IAdPayload.GetPayloadType">
            <summary>
Gets a string that identifies the type of this payload, ie VideoSchedule or UniversalAd, etc
</summary>
            <returns>The payload type</returns>
        </member>
        <member name="T:Microsoft.Advertising.Ads.IAdPayload">
            <summary>
IAdPayload represents an ad payload
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.IAdPayloadParser.ParseIntoPayload(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Microsoft.Advertising.WException*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Parses a string into an IAdPayload
</summary>
            <param name="payloadString">The string to parse</param>
            <param name="wasParsed">An output bool. The method sets this to true if it recognizes the string as something it can handle</param>
            <param name="exception">An output exception. If the parser recognizes the payload string but an error occurs during parsing, it is stored here.</param>
            <returns>The parsed IAdPayload if successful. Nullptr if not.</returns>
        </member>
        <member name="T:Microsoft.Advertising.Ads.IAdPayloadParser">
            <summary>
IAdPayloadParser parses a string into an IAdPayload
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Ads.IAdRequest.MakeRequest(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Ads.IAdPayloadHandler&gt;)">
            <summary>
Makes the Post ad request
</summary>
            <param name="handler">The AdPayload handler to use when the payload has been parsed</param>
        </member>
        <member name="M:Microsoft.Advertising.Ads.IAdRequest.MakeRequest(std.shared_ptr&lt;Microsoft.Advertising.Ads.IAdPayloadHandler&gt;)">
            <summary>
Makes the Get ad request
</summary>
            <param name="handler">The AdPayload handler to use when the payload has been parsed</param>
        </member>
        <member name="T:Microsoft.Advertising.Ads.IAdRequest">
            <summary>
IAdRequest makes a request for an ad payload
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Ads.IAdRequestBuilder">
            <summary>
IAdRequestBuilder builds an IAdRequest
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WException">
            <summary>
This class is an exception that holds a message as a wide string.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Strict.Core.StringHelpers.ExtractUrlArgValue(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Utility function; gets the value of a given key from a url's query parameters
</summary>
            <param name="url">The url to check</param>
            <param name="arg">The query arg to look up</param>
            <returns>The value of the arg if it exists; empty string if it doesn't</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.Resume">
            <summary>
Resumse the ad control model
This resumes the auto refresh timer.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.Suspend">
            <summary>
Suspends the ad control model
This pauses the auto refresh timer.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.Start">
            <summary>
Starts the ad control model
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.Refresh">
            <summary>
Attempts to manually start an ad request.
</summary>
            <returns>True if the ad request was started. False if an error occurred</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.RemoveAdTag(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Remove an ad tag from the ad control. This has no effect if the tag name does not exist.
</summary>
            <param name="tagName">The name of the tag to remove.</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.AddAdTag(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Add an ad tag to the ad control. The maximum is 10 tags per ad control. If maximum is exceeded an errorOccurred event will be fired. 
</summary>
            <param name="tagName">The name of the tag. Maximum of 16 characters, if exceeded an errorOccurred event will be fired.</param>
            <param name="tagValue">The value of the tag. Maximum of 128 characters, if exceeded an errorOccurred event will be fired.</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.EventRequestCompleted">
            <summary>
This event is fired when an ad request completes, regardless of success or failure.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.EventRequestStarted">
            <summary>
This event is fired when an ad request starts.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.EventModelReceived">
            <summary>
This event is fired when an ad model is received.
The event passes in a shared pointer to an IAdModel.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.EventError">
            <summary>
This event is fired when an error occurs in the Ad Control Model.
The event passes in an error code and an error message.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.SetAutoRefreshIntervalInSeconds(System.Int32)">
            <summary>
Set the auto-refresh interval value in seconds
</summary>
            <param name="value">The new auto-refresh interval value in seconds</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.GetAutoRefreshIntervalInSeconds">
            <summary>
Get the auto-refresh interval in seconds
</summary>
            <returns>The auto-refresh interval in seconds value</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.SetIsAutoRefreshEnabled(System.Boolean)">
            <summary>
Set the IsAutoRefreshEnabled flag
</summary>
            <param name="value">The new IsAutoRefreshEnabled value</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.GetIsAutoRefreshEnabled">
            <summary>
Get the IsAutoRefreshEnabled flag
</summary>
            <returns>The IsAutoRefreshEnabled state</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.SetArcSdkType(Microsoft.Advertising.UI.Models.ArcSdkType)">
            <summary>
Setter for the ARC Sdk Type.
</summary>
            <param name="value">The new ARC sdk type</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.GetArcSdkType">
            <summary>
Getter for the ARC Sdk Type.
</summary>
            <returns>The ARC sdk type</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.SetHeight(System.Int32)">
            <summary>
Setter for the Ad Control Height.
</summary>
            <param name="value">The new ad control height</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.GetHeight">
            <summary>
Getter for the Ad Control Height.
</summary>
            <returns>The ad control height</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.SetWidth(System.Int32)">
            <summary>
Setter for the Ad Control Width.
</summary>
            <param name="value">The new ad control width</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.GetWidth">
            <summary>
Getter for the Ad Control Width.
</summary>
            <returns>The ad control width</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.SetPostalCode(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Setter for the postal code.
</summary>
            <param name="value">The new postal code value</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.GetPostalCode">
            <summary>
Getter for the postal code.
</summary>
            <returns>The postal code</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.SetCountryOrRegion(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Setter for the Country or Region.
</summary>
            <param name="value">The country or region value</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.GetCountryOrRegion">
            <summary>
Getter for the Country or Region.
</summary>
            <returns>The Country or Region</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.SetKeywords(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Setter for the Keywords.
</summary>
            <param name="value">The keywords value</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.GetKeywords">
            <summary>
Getter for the Keywords.
</summary>
            <returns>The keywords</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.SetApplicationId(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Setter for the ApplicationId.
</summary>
            <param name="value">The new application id value</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.GetApplicationId">
            <summary>
Getter for the ApplicationId.
</summary>
            <returns>The application id</returns>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.SetAdUnitId(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Setter for the AdUnitId.
</summary>
            <param name="value">The new ad unit value</param>
        </member>
        <member name="M:Microsoft.Advertising.UI.Models.IAdControlModel.GetAdUnitId">
            <summary>
Getter for the AdUnitId.
</summary>
            <returns>The ad unit</returns>
        </member>
        <member name="T:Microsoft.Advertising.UI.Models.IAdControlModel">
            <summary>
This interface describes the model for the Ad Control;
Technically this is more of a model + controller; however it is actually owned by the view.

The Ad Control Model is responsible for the following:
  1. Gathering the parameters needed to make an ad request
  2. Making the ad request
  3. Parsing the response from the server
  4. Creating an IAdModel that represents the ad payload
  5. Notifying the view to display said ad model.

Note that it is *NOT* responsible for actually displaying the Ad; the IAdModel will control displaying an ad.
Items marked with ** are not yet implemented

+----------------------------------------+     +------------------+      +---------------------------+                               +----------------------------------------------+
| UI sets properties on Ad Control Model | --&gt; | Start Ad Request | ---&gt; | EventRequestStarted fired | ---&gt; Error Occurred? - No -&gt;  | Determine Response type, Parse Response Type |
+----------------------------------------+     +------------------+      +---------------------------+             |                 +----------------------------------------------+
                                                                                                                  Yes                                         |      
                                                                                                                   |                                          V
                                                                                                                   V                            +-------------------------------+
                                                                                                         +------------------+                   | ** Create AdModel for payload |
                                                                                                         | EventError fired |                   +-------------------------------+
                                                                                                         +------------------+                                 |
                                                                                                                   |                                          V
                                                                                                                   |                             +------------------------------+
                                                                                                                   |                             | ** EventDisplayAdModel fired |
                                                                                                                   |                             | (not implemented yet -       |
                                                                                                                   |                             | will replace                 |
                                                                                                                   |                             | EventPayloadReceived)        |
                                                                                                                   |                             +------------------------------+
                                                                                                                   |                                          |
                                                                                                                   |                                          |
                                                                                                                   +     +-----------------------------+      |
                                                                                                                   +---&gt; | EventRequestCompleted fired | -----+
                                                                                                                         +-----------------------------+       
                                                                                                                    

The Ad Control View is the UI layer that owns the Ad Control Model.
In order to avoid circular dependencies, the View holds a shared pointer to the model interface.
It can invoke methods on the interface directly. The model communicates back to the view using events.

+-----------+                                 +-----------------+
| AdControl | --- Holds shared pointer to --&gt; | IAdControlModel |
|           |                                 |                 |
|           | (==== Sends events back to ==== |                 |
+-----------+                                 +-----------------+

The subscribing to an event DOES hold a strong reference to the model; however, the model never holds a strong
reference to the view, so there is no circular reference so clean up should be automatic.
It is possible to introduce a circular reference by capturing a strong reference to IAdView in an event handler though;
To prevent this, only capture weak references in the event handlers.
No manual unsubscription is needed though. When the event registration token goes out of scope, it should remove itself from the event handler.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Concurrency.MulticastEventToken">
            <summary>
This is an RAII token used to hold onto an event subscription.
As soon as this event token goes out of scope, it unsubscribes from the event
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Concurrency.Details.IMulticastDelegateRemover">
            <summary>
This defines an interface to unsubscribe a delegate from an event using its token
</summary>
        </member>
        <member name="M:Microsoft.Advertising.OSPlatform.WinRTOsPlatform.GetPlatform">
            <summary>
Gets the OS type.
</summary>
            <returns>The OS type</returns>
        </member>
        <member name="M:Microsoft.Advertising.OSPlatform.WinRTOsPlatform.IsMobile">
            <summary>
Returns whether this operating system is a mobile operating system or not.
</summary>
            <returns>True if the OS is mobile</returns>
        </member>
        <member name="M:Microsoft.Advertising.OSPlatform.WinRTOsPlatform.LaunchBrowser(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Launch a browser with the given url
</summary>
            <param name="url">The url to open</param>
        </member>
        <member name="T:Microsoft.Advertising.OSPlatform.WinRTOsPlatform">
            <summary>
This is an implementation of IOperatingSystem using WinRT APIs
</summary>
        </member>
        <member name="M:Microsoft.Advertising.OSPlatform.IOperatingSystem.GetPlatform">
            <summary>
Gets the OS type.
</summary>
            <returns>The OS type</returns>
        </member>
        <member name="M:Microsoft.Advertising.OSPlatform.IOperatingSystem.IsMobile">
            <summary>
Returns whether this operating system is a mobile operating system or not.
</summary>
            <returns>True if the OS is mobile</returns>
        </member>
        <member name="M:Microsoft.Advertising.OSPlatform.IOperatingSystem.LaunchBrowser(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Launch a browser with the given url
</summary>
            <param name="url">The url to open</param>
        </member>
        <member name="T:Microsoft.Advertising.OSPlatform.IOperatingSystem">
            <summary>
This interface abstracts some operating system information as well as
some operating system related operations, such as launching a browser.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.OSPlatform.OpSysPlatform">
            <summary>
This enum represents the os type.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.Decorators.UserTicket.WLIDUserTicketDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsI">
            <summary>
Modifies a given url and/or its headers
</summary>
            <param name="url">The url to decorate</param>
            <param name="headers">A map of header to header value to modify</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.Decorators.UserTicket.IUserTicketDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImpl">
            <summary>
Modifies a given url and/or its headers
</summary>
            <param name="url">The url to decorate</param>
            <param name="headers">A map of header to header value to modify</param>
        </member>
        <member name="F:Microsoft.Advertising.Net.IWebClientDecorator.k_pairSeparator">
            <summary>
Url query parameter key/value separator "="
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.IWebClientDecorator.k_paramSeparator">
            <summary>
Url query parameter separator "&amp;"
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.IWebClientDecorator.Decorate(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Modifies a given url and/or its headers
</summary>
            <param name="url">The url to decorate</param>
            <param name="headers">A map of header to header value to modify</param>
        </member>
        <member name="T:Microsoft.Advertising.Net.IWebClientDecorator">
            <summary>
This interface describes methods that modify a HTTP request
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTWebClient.SetTimeout(System.UInt32)">
            <summary>
This method sets the timeout for http operations
</summary>
            <param name="timeout">The timeout, in milliseconds</param>
            <summary>
This method sets the timeout for http operations
</summary>
            <param name="timeout">The timeout, in seconds</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTWebClient.SendRequest(Microsoft.Advertising.Net.HttpRequestMethodType!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.C">
            <summary>
This method sends an http request.
</summary>
            <param name="method">The http verb to use for this request.</param>
            <param name="url">The url to request</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="body">A body to send to in this request. Currently not used</param>
            <param name="bodyLength">The length of the body</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to an ICancel token that lets you cancel the request</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTWebClient.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructor; initializes the user agent
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.WinRTWebClient">
            <summary>
An implementation of IWebClient that uses WinRT's HttpClient
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTWebClientCancelToken.IsCompleted">
            <summary>
Returns true if the async operation is completed
</summary>
            <returns>Returns true if the async operation is completed</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTWebClientCancelToken.IsCancelled">
            <summary>
Returns true if the async operation is cancelled
</summary>
            <returns>Returns true if the async operation is cancelled</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTWebClientCancelToken.Cancel">
            <summary>
Cancel the async operation
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTWebClientCancelToken.#ctor(Concurrency.cancellation_token_source)">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.IWebClientFactoryConstructorParam">
            <summary>
A dummy interface for restricting the types input to WebClient constructor
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.IWebClient.SetTimeout(System.UInt32)">
            <summary>
This method sets the timeout for http operations
</summary>
            <param name="timeout">The timeout, in milliseconds</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.IWebClient.SendRequest(Microsoft.Advertising.Net.HttpRequestMethodType!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,std.less&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;&gt;,std.allocator&lt;std.pair&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.Char,">
            <summary>
This method sends an http request.
</summary>
            <param name="method">The http verb to use for this request.</param>
            <param name="url">The url to request</param>
            <param name="headers">Any extra headers to set in this request</param>
            <param name="body">A body to send to in this request. Currently not used</param>
            <param name="bodyLength">The length of the body</param>
            <param name="handler">The callback to execute when the web request completes</param>
            <returns>A shared pointer to an ICancel token that lets you cancel the request</returns>
        </member>
        <member name="T:Microsoft.Advertising.Net.IWebClient">
            <summary>
This interface describes methods that send http requests
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.CancelTokenGroup.RegisterCancelToken(std.shared_ptr&lt;Microsoft.Advertising.Concurrency.ICancelToken&gt;)">
            <summary>
Add a cancel token to this group
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.CancelTokenGroup.Cancel">
            <summary>
Cancel all tokens
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Concurrency.CancelTokenGroup">
            <summary>
This class holds a group of cancel tokens and can cancel them all at once
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.ICancelToken.IsCompleted">
            <summary>
Get the completion state of the action
</summary>
            <returns>True if completed</returns>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.ICancelToken.IsCancelled">
            <summary>
Get the cancel state of the action
</summary>
            <returns>True if cancelled</returns>
        </member>
        <member name="M:Microsoft.Advertising.Concurrency.ICancelToken.Cancel">
            <summary>
Cancel the action.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Concurrency.ICancelToken">
            <summary>
Interface that allows a user to cancel an asynchronous action.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTEdgeWebViewUserAgentSource.HandleScriptNotify(std.weak_ptr&lt;Microsoft.Advertising.Net.Details.WinRTEdgeWebViewUserAgentSourceState&gt;,IInspectable*,ABI.Windows.UI.Xaml.Controls.INotifyEventArgs*)">
            <summary>
Handles the script notify event on the web view. This grabs the user agent out of the event and stores it.
</summary>
            <param name="weakState">The updating sate</param>
            <param name="sender">Unused</param>
            <param name="e">The notify event args</param>
            <returns>S_OK</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTEdgeWebViewUserAgentSource.FinishUpdate(std.shared_ptr&lt;Microsoft.Advertising.Net.Details.WinRTEdgeWebViewUserAgentSourceState&gt;)">
            <summary>
Helper to be called when an update completes. This cleans up flags, event subscriptions, etc.
</summary>
            <param name="state">The updating state to finish</param>
            <returns>S_OK</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTEdgeWebViewUserAgentSource.WriteCache(std.shared_ptr&lt;Microsoft.Advertising.Net.Details.WinRTEdgeWebViewUserAgentSourceState&gt;)">
            <summary>
Writes the state to the cache file. The write is asynchronous and the function returns without
waiting for it to complete.
</summary>
            <param name="state">The state to write</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTEdgeWebViewUserAgentSource.ReadCache(std.shared_ptr&lt;Microsoft.Advertising.Net.Details.WinRTEdgeWebViewUserAgentSourceState&gt;)">
            <summary>
Reads the cache into the given state.
</summary>
            <param name="state">The state to store the cache</param>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTEdgeWebViewUserAgentSource.UpdateCacheInWebView(std.shared_ptr&lt;Microsoft.Advertising.Net.Details.WinRTEdgeWebViewUserAgentSourceState&gt;)">
            <summary>
This actually instantiates the webview and injects the script to grab the user agent string.
It needs to be run on the UI thread.
</summary>
            <param name="state">The state of the updating instance</param>
            <returns>S_OK</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTEdgeWebViewUserAgentSource.UpdateCacheInDispatcher(std.shared_ptr&lt;Microsoft.Advertising.Net.Details.WinRTEdgeWebViewUserAgentSourceState&gt;)">
            <summary>
This method checks to see if an update is in progress; if it isn't, then
it tries to run UpdateCache
</summary>
            <param name="state">The state of the updating instance</param>
            <returns>S_OK</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTEdgeWebViewUserAgentSource.ParseTimeString(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This method parses a string into a time
</summary>
            <param name="timeString">A string representing a time in time_t format (seconds since 1/1/1970)</param>
            <returns>A time_point representing the string</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTEdgeWebViewUserAgentSource.UpdateCachedValue">
            <summary>
This function reads the cache to determine whether it should update the user agent.
If the cache has expired, it will start updating the user agent
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTEdgeWebViewUserAgentSource.GetUserAgent(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Gets a string representing the user agent for a web request.
</summary>
            <param name="factories">The factories to use</param>
            <returns>The user agent</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTEdgeWebViewUserAgentSource.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.WinRTEdgeWebViewUserAgentSource.#ctor">
            <summary>
Constructor.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.WinRTEdgeWebViewUserAgentSource">
            <summary>
This class retrieves a user agent string out of the webview ui control.
This caches the user agent to disk as well.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.Details.WinRTEdgeWebViewUserAgentSourceState.#ctor">
            <summary>
Constructor. Initializes flags.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Details.WinRTEdgeWebViewUserAgentSourceState.m_waitEvent">
            <summary>
This event is used to wait for the first load of the cached value.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Details.WinRTEdgeWebViewUserAgentSourceState.m_updatingLock">
            <summary>
This lock guards against multiple user agent updates and loads from disk
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Details.WinRTEdgeWebViewUserAgentSourceState.m_updating">
            <summary>
This flag tracks whether a user agent update is in progress
</summary>
        </member>
        <member name="F:Microsoft.Advertising.Net.Details.WinRTEdgeWebViewUserAgentSourceState.m_loaded">
            <summary>
This flag tracks whether an attempt to load the cache has been made yet
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.Details.WinRTEdgeWebViewUserAgentSourceState">
            <summary>
This class holds all the state for a WinRTEdgeWebViewUserAgentSource
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Stopwatch.Restart(std.chrono.time_point&lt;std.chrono.steady_clock,std.chrono.duration&lt;System.Int64,std.ratio&lt;0x01,0x03b9aca00&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Restarts the timer, setting the 'start time' to the given time point.
Starts the timer if it isn't started.
</summary>
            <param name="time">The start time to use</param>
        </member>
        <member name="M:Microsoft.Advertising.Stopwatch.Restart">
            <summary>
Restarts the timer. Starts the timer if it isn't started.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Stopwatch.ElapsedMs">
            <summary>
Gets the elapsed time
</summary>
            <returns>The time elapsed in milliseconds</returns>
        </member>
        <member name="M:Microsoft.Advertising.Stopwatch.Stop">
            <summary>
Stop the stopwatch
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Stopwatch.Start">
            <summary>
Start the stopwatch
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Stopwatch.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Stopwatch">
            <summary>
This class is used for timing things.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Net.IUserAgentSource.GetUserAgent(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)">
            <summary>
Gets a string representing the user agent for a web request.
</summary>
            <returns>The user agent</returns>
        </member>
        <member name="M:Microsoft.Advertising.Net.IUserAgentSource.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Net.IUserAgentSource">
            <summary>
This interface abstracts getting/caching user agents.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.WinRTJsonParser.Convert(Microsoft.WRL.ComPtr&lt;ABI.Windows.Data.Json.IJsonValue&gt;)">
            <summary>
Converts winrt IJsonValue to native 
</summary>
            <param name="value">winrt IJsonValue</param>
            <returns>parsed native json value</returns>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.WinRTJsonParser.Parse(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Parses the json data string 
</summary>
            <param name="data">json string</param>
            <returns>parsed native json value</returns>
        </member>
        <member name="T:Microsoft.Advertising.Documents.Json.WinRTJsonParser">
            <summary>
This class implements the IJsonParser interface using the WinRT JSON APIs.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.IJsonParser.Parse(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This method attempts to parse a string into a JSON object.
</summary>
            <param name="data">The string to parse</param>
            <returns>The parsed JSON object if successful; nullptr if it failed to parse.</returns>
        </member>
        <member name="T:Microsoft.Advertising.Documents.Json.IJsonParser">
            <summary>
This interface represents a JSON parsers.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonObject.GetType">
            <summary>
Gets the data type of this JSON object.
</summary>
            <returns>Object type</returns>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonObject.GetValue">
            <summary>
Gets a map representing this JSON object.
</summary>
            <returns>The map</returns>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonObject.Clear">
            <summary>
Removes all entries from the object.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonObject.Append(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.shared_ptr&lt;Microsoft.Advertising.Documents.Json.NativeJsonValue&gt;)">
            <summary>
Appends a JSON value to the object using a given key.
If the key already exists, it is overwritten.
</summary>
            <param name="key">The key for this entry</param>
            <param name="value">The value to add</param>
        </member>
        <member name="T:Microsoft.Advertising.Documents.Json.JsonObject">
            <summary>
This class represents a JSON object.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonArray.GetType">
            <summary>
Gets the data type of this JSON object.
</summary>
            <returns>Array type</returns>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonArray.GetValue">
            <summary>
Gets a vector representing the array.
</summary>
            <returns>The vector</returns>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonArray.Clear">
            <summary>
Removes all entries from the array.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonArray.Append(std.shared_ptr&lt;Microsoft.Advertising.Documents.Json.NativeJsonValue&gt;)">
            <summary>
Appends a JSON value to the end of the array.
</summary>
            <param name="item">A pointer to th JSON value to append</param>
        </member>
        <member name="T:Microsoft.Advertising.Documents.Json.JsonArray">
            <summary>
This class represents a JSON array.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonBoolean.GetType">
            <summary>
Gets the data type of this JSON object.
</summary>
            <returns>Boolean type</returns>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonBoolean.GetValue">
            <summary>
Gets the value as a bool.
</summary>
            <returns>The bool value</returns>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonBoolean.#ctor(System.Boolean!System.Runtime.CompilerServices.IsConst)">
            <summary>
Constructor. Initializes the value to the given bool.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.Json.JsonBoolean">
            <summary>
This class represents a JSON boolean.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonString.GetType">
            <summary>
Gets the data type of this JSON object.
</summary>
            <returns>String type</returns>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonString.GetValue">
            <summary>
Gets the value as a string.
</summary>
            <returns>The string value</returns>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonString.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructor. Initializes the value to the given string.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.Json.JsonString">
            <summary>
This class represents a JSON string
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonNumber.GetType">
            <summary>
Gets the data type of this JSON object.
</summary>
            <returns>Number type</returns>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonNumber.GetValue">
            <summary>
Returns the value as a double
</summary>
            <returns>The value</returns>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonNumber.#ctor(System.Double!System.Runtime.CompilerServices.IsConst)">
            <summary>
Constructor. Initializes the value with the given double.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.Json.JsonNumber">
            <summary>
This represents a JSON number
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.JsonNull.GetType">
            <summary>
Gets the data type of this JSON object
</summary>
            <returns>Null type</returns>
        </member>
        <member name="T:Microsoft.Advertising.Documents.Json.JsonNull">
            <summary>
This represents a null JSON object
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Documents.Json.NativeJsonValue.GetType">
            <summary>
Gets the data type of this JSON object
</summary>
            <returns>The data type</returns>
        </member>
        <member name="T:Microsoft.Advertising.Documents.Json.NativeJsonValue">
            <summary>
This is the base class for JSON data types.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Documents.Json.JsonType">
            <summary>
This enum represents the JSON data type.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.Shared.DefaultContext">
            <summary>
This is the default set of factories for the SDK
</summary>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.GetJsonParser">
            <summary>
Gets a JSON parser.
</summary>
            <returns>A shared pointer to the JSON parser</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.GetOperatingSystem">
            <summary>
Gets an operating system class. The OS class provides OS specific information and utilities, such as launching browsers.
</summary>
            <returns>A shared pointer to the operating system object</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.GetResourceLoader">
            <summary>
Gets a resource loader. The resource loader gets strings and files stored as resources with the library.
</summary>
            <returns>A shared pointer to the resource loader</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.GetAdControlModel">
            <summary>
Gets an ad control model. The ad control model handles the business logic for the ad control.
</summary>
            <returns>A shared pointer to the ad control model</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.GetUserTicketProvider">
            <summary>
Gets a user ticket decorator. The user ticket decorator is used to get a Windows Live Id and attach it to a web request.
</summary>
            <returns> A shared pointer to the user ticket decorator</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.GetStorageProvider">
            <summary>
Gets a storage provider. Storage provider reads and writes files to/from disk.
</summary>
            <returns> A shared pointer to the storage provider instance</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.GetGeoLocator">
            <summary>
Gets a geolocator. Geolocator is used to get location information, such as GPS coordinates.
</summary>
            <returns> A shared pointer to the geo locator instance</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.GetIAdLogger">
            <summary>
Gets a logger. This logger is used to log advertising request success and failtures.
</summary>
            <returns> A shared pointer to the logger instance</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.GetWebClient">
            <summary>
Gets a WebClient. Web client is used to make HTTP requests.
</summary>
            <returns> A shared pointer to the webclient instance</returns>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.SetJsonParserFactory(std.function&lt;(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)&gt;)">
            <summary>
Sets the factory method to get a JSON parser.
</summary>
            <param name="jsonParserFactory">The factory method</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.SetOperatingSystemFactory(std.function&lt;(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)&gt;)">
            <summary>
Sets the factory method to get the operating system class. The OS class provides OS specific information and utilities, such as launching browsers.
</summary>
            <param name="operatingSystemFactory">The factory method</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.SetResourceLoaderFactory(std.function&lt;(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)&gt;)">
            <summary>
Sets the factory method to get the resource loader. The resource loader gets strings and files stored as resources with the library.
</summary>
            <param name="resourceLoaderFactory">The factory method</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.SetAdControlModelFactory(std.function&lt;(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)&gt;)">
            <summary>
Sets the factory method to get the ad control model. The ad control model is not platform specific, but it's useful to mock it
to test the UI separate from the rest of the code.
</summary>
            <param name="adControlModelFactory">The factory method</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.SetUserTicketProviderFactory(std.function&lt;(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)&gt;)">
            <summary>
Sets the factory method to get a user ticket decorator. The user ticket decorator is used to get a Windows Live Id and attach it to a web request.
!TODO Pull the user ticket retrieval code out of the decorator so it can be properly isolated and reused.
</summary>
            <param name="userTicketProviderFactory">The factory method</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.SetStorageProviderFactory(std.function&lt;(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)&gt;)">
            <summary>
Sets the factory method to get a storage provider. Storage provider reads and writes files to/from disk.
</summary>
            <param name="storageProviderFactory">The factory method</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.SetGeoLocatorFactory(std.function&lt;(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)&gt;)">
            <summary>
Sets the factory method to get a geo locator. Geo locator is used to get location information, such as GPS coordinates.
!TODO refactor the geolocator to not be a singleton.
</summary>
            <param name="geoLocatorFactory">The factory method</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.SetIAdLoggerFactory(std.function&lt;(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)&gt;)">
            <summary>
Sets the factory method to get a logger. This logger is used to log advertising request success and failtures.
</summary>
            <param name="adLoggerFactory">The factory method</param>
        </member>
        <member name="M:Microsoft.Advertising.Shared.Context.SetWebClientFactory(std.function&lt;(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)(std.shared_ptr&lt;Microsoft.Advertising.Shared.Context!System.Runtime.CompilerServices.IsConst&gt;)&gt;)">
            <summary>
Sets the factory method to get a web client. Web client is used to make HTTP requests.
</summary>
            <param name="webclientFactory">The factory method</param>
        </member>
        <member name="T:Microsoft.Advertising.Shared.Context">
            <summary>
A class that provides all the factory methods to get platform specific interface implementations.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.UIUtilities.RunOnUIThread(Windows.UI.Core.DispatchedHandler)">
            <summary>
Takes a DispatchedHandler, if we're already on the UI thread it invokes
it directly otherwise pushes it onto the Dispatcher.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.UIUtilities.RunOnDispatcher(Windows.UI.Core.CoreDispatcher,std.function&lt;(void)&gt;)">
            <summary>
Helper method that runs a function on the given dispatcher.
If the function is already running on the dispatcher, it runs it immediately instead of calling RunAsync
</summary>
            <param name="dispatcher">The dispatcher to run the function on</param>
            <param name="func">The function to run on the dispatcher</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.UIUtilities.ForEachAncestorInVisualTree(Windows.UI.Xaml.FrameworkElement,std.function&lt;(Windows.UI.Xaml.FrameworkElement,Windows.UI.Xaml.FrameworkElement)(Windows.UI.Xaml.FrameworkElement^,Windows.UI.Xaml.FrameworkElement^)&gt;)">
            <summary>
Helper method that iterates through the parents of uiElement (first param) and calls the callback on each iteration
</summary>
            <param name="uiElement">The ui element to use</param>
            <param name="uiElement">The callback to call each iteration</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.UIUtilities.PercentOnScreen(Microsoft.Advertising.WinRT.UI.WindowWrapper,Windows.UI.Xaml.FrameworkElement)">
            <summary>
Returns the percent the uielement is visible in the current window
</summary>
            <param name="currentWindow">The current window of the application</param>
            <param name="uiElement">The ui element used in determining the percent visible</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.UIUtilities.CalculateVisibleArea(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
Calculates the visible area of an element in windowWidth x WindowHeight 
using the position (uiElementPositionX, uiElementPositionY)
and bounds (uiElementWidth, uiElementHeight)
e.g. 10x10 window
	 position: 0,0, width: 10, height: 10 
	 result: 100% visible (1.0)
e.g. 10x10 window
	 position: -5,0, width: 5, height: 5
	 result: 50% visible (0.5)
</summary>
            <param name="windowWidth">The width of the window</param>
            <param name="windowHeight">The height of the window</param>
            <param name="uiElementPositionX">The X position of the element</param>
            <param name="uiElementPositionY">The Y position of the element</param>
            <param name="uiElementWidth">The width of the element</param>
            <param name="uiElementHeight">The height of the element</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.UIUtilities.IsControlOnScreen(Microsoft.Advertising.WinRT.UI.WindowWrapper,Windows.UI.Xaml.FrameworkElement,System.Double)">
            <summary>
Returns true if at least x% of the ad area is on screen, false otherwise
</summary>
            <param name="currentWindow">The current window of the application</param>
            <param name="uiElement">The framework element that will be used in the percentonscreen calculation</param>
            <param name="maxAllowedOffscreen">The % (0-1) allowed to be off screen before returning false</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.UIUtilities.IsControlOnScreen(Windows.UI.Xaml.FrameworkElement,System.Double)">
            <summary>
returns true if at least x% of the ad area is on screen, false otherwise
</summary>
            <param name="maxAllowedOffscreen">threshold percent to determing if control is on screen or not</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.UIUtilities.IsUiElementOccludedAllTrees(Windows.UI.Xaml.UIElement,Windows.UI.Xaml.FrameworkElement)">
            <summary>
This method iterates throw the Mainwondow and the popups till it gets the 
right occlusion states.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.UIUtilities.GetControlScreenPosition(Windows.UI.Xaml.UIElement)">
            <summary>
returns the position of the element relative to the main window
see: http://forums.silverlight.net/p/12160/39074.aspx
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.OcclusionState">
            <summary>
Enum Occlusion States
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.OcclusionState.NotOccluded">
            <summary>
Not Occluded
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.OcclusionState.Occluded">
            <summary>
Occluded.
</summary>
        </member>
        <member name="F:Microsoft.Advertising.WinRT.UI.OcclusionState.Unknown">
            <summary>
Unknwon State.
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdErrorEventArgs.ErrorMessage">
            <summary>
Error Message
</summary>
        </member>
        <member name="P:Microsoft.Advertising.WinRT.UI.AdErrorEventArgs.ErrorCode">
            <summary>
Error Code
</summary>
        </member>
        <member name="T:Microsoft.Advertising.ErrorCode">
            <summary>
      An enumeration of error codes.
    </summary>
        </member>
        <member name="F:Microsoft.Advertising.ErrorCode.ValidationFailure">
            <summary>
      Error occurred during validation of the payload.
    </summary>
        </member>
        <member name="F:Microsoft.Advertising.ErrorCode.ParseToBOMFailure">
            <summary>
      Error occurred while extracting data from the payload.
    </summary>
        </member>
        <member name="F:Microsoft.Advertising.ErrorCode.FileOperationFailure">
            <summary>
      Error occurred while performing a file operation.
    </summary>
        </member>
        <member name="F:Microsoft.Advertising.ErrorCode.Cancelled">
            <summary>
      Action was cancelled.
    </summary>
        </member>
        <member name="F:Microsoft.Advertising.ErrorCode.Success">
            <summary>
      Action succeeded.
    </summary>
        </member>
        <member name="F:Microsoft.Advertising.ErrorCode.MraidOperationFailure">
            <summary>
      An error occurred while performing an MRAID operation triggered by the ad.
    </summary>
        </member>
        <member name="F:Microsoft.Advertising.ErrorCode.CreativeError">
            <summary>
      The ad creative experienced an error.
    </summary>
        </member>
        <member name="F:Microsoft.Advertising.ErrorCode.RefreshNotAllowed">
            <summary>
      Refresh was attempted but not allowed due to the current state of the ad control (e.g. not visible on screen).
    </summary>
        </member>
        <member name="F:Microsoft.Advertising.ErrorCode.Other">
            <summary>
      The error code for errors not covered by other codes.
    </summary>
        </member>
        <member name="F:Microsoft.Advertising.ErrorCode.InvalidServerResponse">
            <summary>
      The server returned a response that could not be parsed or contained data that was invalid.
    </summary>
        </member>
        <member name="F:Microsoft.Advertising.ErrorCode.ServerSideError">
            <summary>
      An error occurred on the server while handling the request.
    </summary>
        </member>
        <member name="F:Microsoft.Advertising.ErrorCode.ClientConfiguration">
            <summary>
      One of the required parameters set by the app developer is not valid or not set.
    </summary>
        </member>
        <member name="F:Microsoft.Advertising.ErrorCode.NetworkConnectionFailure">
            <summary>
      An error occurred when making a network request.
    </summary>
        </member>
        <member name="F:Microsoft.Advertising.ErrorCode.NoAdAvailable">
            <summary>
      The server was unable to find an ad that matched the request.
    </summary>
        </member>
        <member name="F:Microsoft.Advertising.ErrorCode.Unknown">
            <summary>
      Default value. Cause of error is unknown.
    </summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState.SetAppFocusState(Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityAppFocusState)">
            <summary>
Set appHasFocus state. This pertains to app focus, unfocus, minimize, restore.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState.GetAppFocusState">
            <summary>
Get appHasFocus state. This pertains to app focus, unfocus, minimize, restore.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState.SetAppBounds(Microsoft.Advertising.UI.Rectangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the app bounds.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState.GetAppBounds">
            <summary>
Gets the app bounds.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState.SetPositionOnScreen(Microsoft.Advertising.UI.Point!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the position on screen.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState.GetPositionOnScreen">
            <summary>
Gets the position on screen.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState.SetPercentOnScreen(System.Double)">
            <summary>
Set percent on screen.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState.GetPercentOnScreen">
            <summary>
Get the percent that the ad is in view.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState.SetOpacity(System.Double)">
            <summary>
Set the ad opacity.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState.GetOpacity">
            <summary>
Get the ad opacity.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState.SetOcclusionState(Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityOcclusionState)">
            <summary>
Set the occlusion state.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState.GetOcclusionState">
            <summary>
Get the current state of occlusion (not occluded, occluded, unknown).
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityOcclusionState">
            <summary>
This is used for the AdBroker ad call. Viewability is currently measured in two steps:
1. AdControl (StackPanel) - Created instantly as the AdControl is a stackpanel, making it available before the first ad call. 
	 We attach viewability to this control to provide viewable data to the ad server (ad broker) for the first ad call. The occlusion
	 measurement for this control isn't accurate, so we need to send an "Unknown" state (2) to ad broker.
2. WebView - Created after we receive a payload back from the server and are ready to display it. Measurement on the webview is more accurate
	than the ad control because it is the container for the ad. Occlusion needs to be done on the webview because it is
	the top-most layer in the stack; if we monitor occlusion on the ad control (stack panel) it thinks it's occluded. Until
	we create our own occlusion routine, we need to measure this way. After the webview is created, we never go back to monitoring the 
	Ad Control (StackPanel). 
</summary>
        </member>
        <member name="T:Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityAppFocusState">
            <summary>
This is used for the AdBroker ad call. The state of focus is converted
to an unsigned int and appended to the query string. Since AdBroker relies
on these values, we cannot change them.
Also, it is import to note that AdBroker is the only consumer of this tri-state; 
mraid and vpaid use a binary state, so any non-zero number is considered "in focus" for them.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.UI.Point">
            <summary>
A native point class. This is used for keeping classes that rely on Windows::Foundation::UI types
completely native.
</summary>
        </member>
        <member name="T:Microsoft.Advertising.UI.Rectangle">
            <summary>
A native rectangle class. This is used for keeping classes that rely on Windows::Foundation::UI types
completely native.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AdOpacity.ToJson">
            <summary>
Returns opacity value as a JSON string ("key":value)
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AdOpacity.Update">
            <summary>
Finds the lowest opacity in the ad's visual tree.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.AdOpacity.#ctor(Windows.UI.Xaml.FrameworkElement,std.shared_ptr&lt;Microsoft.Advertising.WinRT.UI.Viewable.ViewabilityState&gt;)">
            <summary>
Constructor
</summary>
            <param name="uiElement">The framework element used in opacity monitoring</param>
            <param name="viewabilityState">If not null, the viewable property will publish its value to the viewabilityState</param>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.BaseViewableProperty.ToJson">
            <summary>
Convert the property to JSON
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.BaseViewableProperty.Invalidate">
            <summary>
Reset the changed flag to true.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.BaseViewableProperty.ResetChangedFlag">
            <summary>
Reset the changed flag to false.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.BaseViewableProperty.DidChange">
            <summary>
Checks to see if the property has changed (via the m_hasChanged flag). If so, flags itself as changed.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.BaseViewableProperty.Update">
            <summary>
Override this to do work/calculations for the viewable property. Set the changed flag in here.
</summary>
        </member>
        <member name="M:Microsoft.Advertising.WinRT.UI.Viewable.BaseViewableProperty.#ctor">
            <summary>
Sets the changed flag to false for anyone derived.
</summary>
        </member>
    </members>
</doc>